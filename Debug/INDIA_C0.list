
INDIA_C0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c758  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800c9a8  0800c9a8  0000d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca30  0800ca30  0000e014  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca30  0800ca30  0000da30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca38  0800ca38  0000e014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca38  0800ca38  0000da38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca3c  0800ca3c  0000da3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800ca40  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ed0  20000014  0800ca54  0000e014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ee4  0800ca54  0000eee4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267b7  00000000  00000000  0000e04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048f5  00000000  00000000  00034801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea8  00000000  00000000  000390f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017cd  00000000  00000000  0003afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036b2c  00000000  00000000  0003c76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028916  00000000  00000000  00073299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001562bd  00000000  00000000  0009bbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f1e6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008158  00000000  00000000  001f1eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  001fa008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000014 	.word	0x20000014
 800026c:	00000000 	.word	0x00000000
 8000270:	0800c990 	.word	0x0800c990

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000018 	.word	0x20000018
 800028c:	0800c990 	.word	0x0800c990

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ac:	4a04      	ldr	r2, [pc, #16]	@ (80005c0 <MX_FREERTOS_Init+0x18>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <MX_FREERTOS_Init+0x1c>)
 80005b2:	f00a f90f 	bl	800a7d4 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x20>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	0800c9cc 	.word	0x0800c9cc
 80005c4:	080005cd 	.word	0x080005cd
 80005c8:	20000030 	.word	0x20000030

080005cc <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f00a f98e 	bl	800a8f6 <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_ETH_Init+0x80>)
 80005e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000660 <MX_ETH_Init+0x84>)
 80005e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <MX_ETH_Init+0x88>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <MX_ETH_Init+0x88>)
 80005ee:	2280      	movs	r2, #128	@ 0x80
 80005f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <MX_ETH_Init+0x88>)
 80005f4:	22e1      	movs	r2, #225	@ 0xe1
 80005f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_ETH_Init+0x88>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005fe:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_ETH_Init+0x88>)
 8000600:	2200      	movs	r2, #0
 8000602:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000604:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <MX_ETH_Init+0x88>)
 8000606:	2200      	movs	r2, #0
 8000608:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <MX_ETH_Init+0x80>)
 800060c:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <MX_ETH_Init+0x88>)
 800060e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <MX_ETH_Init+0x80>)
 8000612:	2201      	movs	r2, #1
 8000614:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_ETH_Init+0x80>)
 8000618:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <MX_ETH_Init+0x8c>)
 800061a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <MX_ETH_Init+0x80>)
 800061e:	4a13      	ldr	r2, [pc, #76]	@ (800066c <MX_ETH_Init+0x90>)
 8000620:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_ETH_Init+0x80>)
 8000624:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000628:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <MX_ETH_Init+0x80>)
 800062c:	f001 f814 	bl	8001658 <HAL_ETH_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000636:	f000 fae5 	bl	8000c04 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfigTypeDef));
 800063a:	2238      	movs	r2, #56	@ 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MX_ETH_Init+0x94>)
 8000640:	f00c f96b 	bl	800c91a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_ETH_Init+0x94>)
 8000646:	2221      	movs	r2, #33	@ 0x21
 8000648:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_ETH_Init+0x94>)
 800064c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000650:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_ETH_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000012c 	.word	0x2000012c
 8000660:	40028000 	.word	0x40028000
 8000664:	200001dc 	.word	0x200001dc
 8000668:	200000cc 	.word	0x200000cc
 800066c:	2000006c 	.word	0x2000006c
 8000670:	20000034 	.word	0x20000034

08000674 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08e      	sub	sp, #56	@ 0x38
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a49      	ldr	r2, [pc, #292]	@ (80007b8 <HAL_ETH_MspInit+0x144>)
 8000692:	4293      	cmp	r3, r2
 8000694:	f040 808c 	bne.w	80007b0 <HAL_ETH_MspInit+0x13c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000698:	4b48      	ldr	r3, [pc, #288]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800069e:	4a47      	ldr	r2, [pc, #284]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80006a8:	4b44      	ldr	r3, [pc, #272]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 80006b6:	4b41      	ldr	r3, [pc, #260]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006bc:	4a3f      	ldr	r2, [pc, #252]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80006c6:	4b3d      	ldr	r3, [pc, #244]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80006d0:	61fb      	str	r3, [r7, #28]
 80006d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 80006d4:	4b39      	ldr	r3, [pc, #228]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006da:	4a38      	ldr	r2, [pc, #224]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80006e4:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b32      	ldr	r3, [pc, #200]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006f8:	4a30      	ldr	r2, [pc, #192]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000702:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 8000704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 8000712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000716:	4a29      	ldr	r2, [pc, #164]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000720:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 8000722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 8000730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000734:	4a21      	ldr	r2, [pc, #132]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800073e:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <HAL_ETH_MspInit+0x148>)
 8000740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PC10     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|ETH_RX_D0_Pin|ETH_RX_D1_Pin|ETH_TX_D0_Pin;
 800074c:	f240 4332 	movw	r3, #1074	@ 0x432
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075a:	2302      	movs	r3, #2
 800075c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075e:	230b      	movs	r3, #11
 8000760:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000766:	4619      	mov	r1, r3
 8000768:	4815      	ldr	r0, [pc, #84]	@ (80007c0 <HAL_ETH_MspInit+0x14c>)
 800076a:	f001 fba9 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_7;
 800076e:	23a6      	movs	r3, #166	@ 0xa6
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	2302      	movs	r3, #2
 800077c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077e:	230b      	movs	r3, #11
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	4619      	mov	r1, r3
 8000788:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <HAL_ETH_MspInit+0x150>)
 800078a:	f001 fb99 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_D1_Pin;
 800078e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	2302      	movs	r3, #2
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ETH_TX_D1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <HAL_ETH_MspInit+0x154>)
 80007ac:	f001 fb88 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3738      	adds	r7, #56	@ 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40028000 	.word	0x40028000
 80007bc:	44020c00 	.word	0x44020c00
 80007c0:	42020800 	.word	0x42020800
 80007c4:	42020000 	.word	0x42020000
 80007c8:	42020400 	.word	0x42020400

080007cc <MX_GPIO_Init>:
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15(JTDI)   ------> DEBUG_JTDI
     PB3(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b47      	ldr	r3, [pc, #284]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007e8:	4a45      	ldr	r2, [pc, #276]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007f2:	4b43      	ldr	r3, [pc, #268]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000800:	4b3f      	ldr	r3, [pc, #252]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000802:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000806:	4a3e      	ldr	r2, [pc, #248]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800080c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000810:	4b3b      	ldr	r3, [pc, #236]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b38      	ldr	r3, [pc, #224]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000824:	4a36      	ldr	r2, [pc, #216]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800082e:	4b34      	ldr	r3, [pc, #208]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <MX_GPIO_Init+0x134>)
 800083e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000842:	4a2f      	ldr	r2, [pc, #188]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800084c:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <MX_GPIO_Init+0x134>)
 800084e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	4b29      	ldr	r3, [pc, #164]	@ (8000900 <MX_GPIO_Init+0x134>)
 800085c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000860:	4a27      	ldr	r2, [pc, #156]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <MX_GPIO_Init+0x134>)
 800086c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000870:	f003 0308 	and.w	r3, r3, #8
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC2 PC3 PC8 PC9
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000878:	f64f 330d 	movw	r3, #64269	@ 0xfb0d
 800087c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	481d      	ldr	r0, [pc, #116]	@ (8000904 <MX_GPIO_Init+0x138>)
 800088e:	f001 fb17 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000892:	2302      	movs	r3, #2
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000896:	2303      	movs	r3, #3
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4818      	ldr	r0, [pc, #96]	@ (8000908 <MX_GPIO_Init+0x13c>)
 80008a6:	f001 fb0b 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA6
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 80008aa:	f641 7359 	movw	r3, #8025	@ 0x1f59
 80008ae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b0:	2303      	movs	r3, #3
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4813      	ldr	r0, [pc, #76]	@ (800090c <MX_GPIO_Init+0x140>)
 80008c0:	f001 fafe 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80008c4:	f247 1335 	movw	r3, #28981	@ 0x7135
 80008c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480d      	ldr	r0, [pc, #52]	@ (8000910 <MX_GPIO_Init+0x144>)
 80008da:	f001 faf1 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008de:	2304      	movs	r3, #4
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4808      	ldr	r0, [pc, #32]	@ (8000914 <MX_GPIO_Init+0x148>)
 80008f2:	f001 fae5 	bl	8001ec0 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	@ 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	44020c00 	.word	0x44020c00
 8000904:	42020800 	.word	0x42020800
 8000908:	42021c00 	.word	0x42021c00
 800090c:	42020000 	.word	0x42020000
 8000910:	42020400 	.word	0x42020400
 8000914:	42020c00 	.word	0x42020c00

08000918 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_I2C1_Init+0x74>)
 800091e:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <MX_I2C1_Init+0x78>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_I2C1_Init+0x74>)
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <MX_I2C1_Init+0x7c>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_I2C1_Init+0x74>)
 8000930:	2201      	movs	r2, #1
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000952:	480e      	ldr	r0, [pc, #56]	@ (800098c <MX_I2C1_Init+0x74>)
 8000954:	f001 fc06 	bl	8002164 <HAL_I2C_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095e:	f000 f951 	bl	8000c04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4809      	ldr	r0, [pc, #36]	@ (800098c <MX_I2C1_Init+0x74>)
 8000966:	f001 fc98 	bl	800229a <HAL_I2CEx_ConfigAnalogFilter>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000970:	f000 f948 	bl	8000c04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_I2C1_Init+0x74>)
 8000978:	f001 fcda 	bl	8002330 <HAL_I2CEx_ConfigDigitalFilter>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 f93f 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200001e4 	.word	0x200001e4
 8000990:	40005400 	.word	0x40005400
 8000994:	10c0ecff 	.word	0x10c0ecff

08000998 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0cc      	sub	sp, #304	@ 0x130
 800099c:	af00      	add	r7, sp, #0
 800099e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80009a6:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80009c0:	4618      	mov	r0, r3
 80009c2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80009c6:	461a      	mov	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	f00b ffa6 	bl	800c91a <memset>
  if(i2cHandle->Instance==I2C1)
 80009ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a33      	ldr	r2, [pc, #204]	@ (8000aa8 <HAL_I2C_MspInit+0x110>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d15d      	bne.n	8000a9c <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009e4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80009e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ec:	f04f 0300 	mov.w	r3, #0
 80009f0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80009fc:	2200      	movs	r2, #0
 80009fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fcc0 	bl	800338c <HAL_RCCEx_PeriphCLKConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000a12:	f000 f8f7 	bl	8000c04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <HAL_I2C_MspInit+0x114>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a1c:	4a23      	ldr	r2, [pc, #140]	@ (8000aac <HAL_I2C_MspInit+0x114>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a26:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <HAL_I2C_MspInit+0x114>)
 8000a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a2c:	f003 0202 	and.w	r2, r3, #2
 8000a30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a3e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000a42:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LEDMUX_I2C1_SCL_Pin|LEDMUX_I2C1_SDA_Pin;
 8000a44:	23c0      	movs	r3, #192	@ 0xc0
 8000a46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4a:	2312      	movs	r3, #18
 8000a4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000a66:	4619      	mov	r1, r3
 8000a68:	4811      	ldr	r0, [pc, #68]	@ (8000ab0 <HAL_I2C_MspInit+0x118>)
 8000a6a:	f001 fa29 	bl	8001ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <HAL_I2C_MspInit+0x114>)
 8000a70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <HAL_I2C_MspInit+0x114>)
 8000a76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a7a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <HAL_I2C_MspInit+0x114>)
 8000a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a84:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000a88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a8c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a96:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000a9a:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	44020c00 	.word	0x44020c00
 8000ab0:	42020400 	.word	0x42020400

08000ab4 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 fc85 	bl	80023c8 <HAL_ICACHE_ConfigAssociativityMode>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ac4:	f000 f89e 	bl	8000c04 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ac8:	f001 fc9e 	bl	8002408 <HAL_ICACHE_Enable>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000ad2:	f000 f897 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ade:	f000 fc25 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae2:	f000 f817 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae6:	f7ff fe71 	bl	80007cc <MX_GPIO_Init>
  MX_ETH_Init();
 8000aea:	f7ff fd77 	bl	80005dc <MX_ETH_Init>
  MX_I2C1_Init();
 8000aee:	f7ff ff13 	bl	8000918 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000af2:	f000 fb19 	bl	8001128 <MX_USART6_UART_Init>
  MX_ICACHE_Init();
 8000af6:	f7ff ffdd 	bl	8000ab4 <MX_ICACHE_Init>
  MX_TIM2_Init();
 8000afa:	f000 f9a1 	bl	8000e40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000afe:	f000 f9f9 	bl	8000ef4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b02:	f009 fe17 	bl	800a734 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b06:	f7ff fd4f 	bl	80005a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b0a:	f009 fe39 	bl	800a780 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b0e:	bf00      	nop
 8000b10:	e7fd      	b.n	8000b0e <main+0x34>
	...

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b09c      	sub	sp, #112	@ 0x70
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	2250      	movs	r2, #80	@ 0x50
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f00b fef9 	bl	800c91a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b3a:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <SystemClock_Config+0xc8>)
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	4a27      	ldr	r2, [pc, #156]	@ (8000bdc <SystemClock_Config+0xc8>)
 8000b40:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b44:	6113      	str	r3, [r2, #16]
 8000b46:	4b25      	ldr	r3, [pc, #148]	@ (8000bdc <SystemClock_Config+0xc8>)
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b52:	bf00      	nop
 8000b54:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <SystemClock_Config+0xc8>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d1f9      	bne.n	8000b54 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b64:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000b76:	2310      	movs	r3, #16
 8000b78:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000b86:	230c      	movs	r3, #12
 8000b88:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b92:	f107 0320 	add.w	r3, r7, #32
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fc46 	bl	8002428 <HAL_RCC_OscConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ba2:	f000 f82f 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	231f      	movs	r3, #31
 8000ba8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000baa:	2303      	movs	r3, #3
 8000bac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 f867 	bl	8002c98 <HAL_RCC_ClockConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bd0:	f000 f818 	bl	8000c04 <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3770      	adds	r7, #112	@ 0x70
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	44020800 	.word	0x44020800

08000be0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf2:	f000 fbc3 	bl	800137c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40012c00 	.word	0x40012c00

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <Error_Handler+0x8>

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	210f      	movs	r1, #15
 8000c18:	f06f 0001 	mvn.w	r0, #1
 8000c1c:	f000 fc9c 	bl	8001558 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	@ 0x38
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce8 <HAL_InitTick+0xc4>)
 8000c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c32:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce8 <HAL_InitTick+0xc4>)
 8000c34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c38:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <HAL_InitTick+0xc4>)
 8000c3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c4a:	f107 0210 	add.w	r2, r7, #16
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fb61 	bl	800331c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c5a:	f002 fb33 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8000c5e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	4a21      	ldr	r2, [pc, #132]	@ (8000cec <HAL_InitTick+0xc8>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	09db      	lsrs	r3, r3, #7
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <HAL_InitTick+0xcc>)
 8000c72:	4a20      	ldr	r2, [pc, #128]	@ (8000cf4 <HAL_InitTick+0xd0>)
 8000c74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (100000U / 1000U) - 1U;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <HAL_InitTick+0xcc>)
 8000c78:	2263      	movs	r2, #99	@ 0x63
 8000c7a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf0 <HAL_InitTick+0xcc>)
 8000c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c80:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <HAL_InitTick+0xcc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_InitTick+0xcc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000c8e:	4818      	ldr	r0, [pc, #96]	@ (8000cf0 <HAL_InitTick+0xcc>)
 8000c90:	f007 fbce 	bl	8008430 <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000c9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d118      	bne.n	8000cd4 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ca2:	4813      	ldr	r0, [pc, #76]	@ (8000cf0 <HAL_InitTick+0xcc>)
 8000ca4:	f007 fc1c 	bl	80084e0 <HAL_TIM_Base_Start_IT>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000cae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d808      	bhi.n	8000cce <HAL_InitTick+0xaa>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	202a      	movs	r0, #42	@ 0x2a
 8000cc2:	f000 fc49 	bl	8001558 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <HAL_InitTick+0xd4>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	e002      	b.n	8000cd4 <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
}

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cd4:	202a      	movs	r0, #42	@ 0x2a
 8000cd6:	f000 fc59 	bl	800158c <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000cda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3738      	adds	r7, #56	@ 0x38
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	44020c00 	.word	0x44020c00
 8000cec:	0a7c5ac5 	.word	0x0a7c5ac5
 8000cf0:	20000238 	.word	0x20000238
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	20000004 	.word	0x20000004

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <NMI_Handler+0x4>

08000d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <MemManage_Handler+0x4>

08000d14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <TIM1_UP_IRQHandler+0x10>)
 8000d3a:	f007 fcd6 	bl	80086ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000238 	.word	0x20000238

08000d48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d4e:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <SystemInit+0xdc>)
 8000d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d54:	4a33      	ldr	r2, [pc, #204]	@ (8000e24 <SystemInit+0xdc>)
 8000d56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d5e:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <SystemInit+0xe0>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d64:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <SystemInit+0xe0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <SystemInit+0xe0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d70:	4b2d      	ldr	r3, [pc, #180]	@ (8000e28 <SystemInit+0xe0>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	492c      	ldr	r1, [pc, #176]	@ (8000e28 <SystemInit+0xe0>)
 8000d76:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <SystemInit+0xe4>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <SystemInit+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <SystemInit+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <SystemInit+0xe0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <SystemInit+0xe0>)
 8000d90:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <SystemInit+0xe8>)
 8000d92:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <SystemInit+0xe0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d9a:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <SystemInit+0xe0>)
 8000d9c:	4a24      	ldr	r2, [pc, #144]	@ (8000e30 <SystemInit+0xe8>)
 8000d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000da0:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <SystemInit+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000da6:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <SystemInit+0xe0>)
 8000da8:	4a21      	ldr	r2, [pc, #132]	@ (8000e30 <SystemInit+0xe8>)
 8000daa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <SystemInit+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <SystemInit+0xe0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <SystemInit+0xe0>)
 8000db8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <SystemInit+0xe0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <SystemInit+0xdc>)
 8000dc6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dca:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <SystemInit+0xec>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000dd4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000ddc:	d003      	beq.n	8000de6 <SystemInit+0x9e>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000de4:	d117      	bne.n	8000e16 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <SystemInit+0xec>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <SystemInit+0xec>)
 8000df4:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <SystemInit+0xf0>)
 8000df6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <SystemInit+0xec>)
 8000dfa:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <SystemInit+0xf4>)
 8000dfc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <SystemInit+0xec>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a0c      	ldr	r2, [pc, #48]	@ (8000e34 <SystemInit+0xec>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <SystemInit+0xec>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a09      	ldr	r2, [pc, #36]	@ (8000e34 <SystemInit+0xec>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	61d3      	str	r3, [r2, #28]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	44020c00 	.word	0x44020c00
 8000e2c:	eae2eae3 	.word	0xeae2eae3
 8000e30:	01010280 	.word	0x01010280
 8000e34:	40022000 	.word	0x40022000
 8000e38:	08192a3b 	.word	0x08192a3b
 8000e3c:	4c5d6e7f 	.word	0x4c5d6e7f

08000e40 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e64:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000e66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e8c:	4818      	ldr	r0, [pc, #96]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000e8e:	f007 fbd5 	bl	800863c <HAL_TIM_PWM_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e98:	f7ff feb4 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4811      	ldr	r0, [pc, #68]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000eac:	f008 fd62 	bl	8009974 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000eb6:	f7ff fea5 	bl	8000c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eba:	2360      	movs	r3, #96	@ 0x60
 8000ebc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2208      	movs	r2, #8
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000ed2:	f007 fd59 	bl	8008988 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000edc:	f7ff fe92 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ee0:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <MX_TIM2_Init+0xb0>)
 8000ee2:	f000 f8c1 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	@ 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000284 	.word	0x20000284

08000ef4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	@ 0x38
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f26:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f28:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe0 <MX_TIM3_Init+0xec>)
 8000f2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f38:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b25      	ldr	r3, [pc, #148]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f4c:	4823      	ldr	r0, [pc, #140]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f4e:	f007 fa6f 	bl	8008430 <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f58:	f7ff fe54 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f66:	4619      	mov	r1, r3
 8000f68:	481c      	ldr	r0, [pc, #112]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f6a:	f007 fe21 	bl	8008bb0 <HAL_TIM_ConfigClockSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f74:	f7ff fe46 	bl	8000c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f78:	4818      	ldr	r0, [pc, #96]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f7a:	f007 fb5f 	bl	800863c <HAL_TIM_PWM_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f84:	f7ff fe3e 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4811      	ldr	r0, [pc, #68]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000f98:	f008 fcec 	bl	8009974 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fa2:	f7ff fe2f 	bl	8000c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa6:	2360      	movs	r3, #96	@ 0x60
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	220c      	movs	r2, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000fbe:	f007 fce3 	bl	8008988 <HAL_TIM_PWM_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000fc8:	f7ff fe1c 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fcc:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <MX_TIM3_Init+0xe8>)
 8000fce:	f000 f84b 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000fd2:	bf00      	nop
 8000fd4:	3738      	adds	r7, #56	@ 0x38
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002d0 	.word	0x200002d0
 8000fe0:	40000400 	.word	0x40000400

08000fe4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff4:	d10e      	bne.n	8001014 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ffc:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_TIM_PWM_MspInit+0x3c>)
 8001008:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	44020c00 	.word	0x44020c00

08001024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0b      	ldr	r2, [pc, #44]	@ (8001060 <HAL_TIM_Base_MspInit+0x3c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10e      	bne.n	8001054 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <HAL_TIM_Base_MspInit+0x40>)
 8001038:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800103c:	4a09      	ldr	r2, [pc, #36]	@ (8001064 <HAL_TIM_Base_MspInit+0x40>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <HAL_TIM_Base_MspInit+0x40>)
 8001048:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	40000400 	.word	0x40000400
 8001064:	44020c00 	.word	0x44020c00

08001068 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001088:	d120      	bne.n	80010cc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b24      	ldr	r3, [pc, #144]	@ (800111c <HAL_TIM_MspPostInit+0xb4>)
 800108c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001090:	4a22      	ldr	r2, [pc, #136]	@ (800111c <HAL_TIM_MspPostInit+0xb4>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <HAL_TIM_MspPostInit+0xb4>)
 800109c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LEDCLKSYNC_TIM2_CH3_Pin;
 80010a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ba:	2301      	movs	r3, #1
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LEDCLKSYNC_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4816      	ldr	r0, [pc, #88]	@ (8001120 <HAL_TIM_MspPostInit+0xb8>)
 80010c6:	f000 fefb 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010ca:	e023      	b.n	8001114 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <HAL_TIM_MspPostInit+0xbc>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d11e      	bne.n	8001114 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <HAL_TIM_MspPostInit+0xb4>)
 80010d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010dc:	4a0f      	ldr	r2, [pc, #60]	@ (800111c <HAL_TIM_MspPostInit+0xb4>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HAL_TIM_MspPostInit+0xb4>)
 80010e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDPWM_TIM3_CH4_Pin;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001104:	2302      	movs	r3, #2
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LEDPWM_TIM3_CH4_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4804      	ldr	r0, [pc, #16]	@ (8001120 <HAL_TIM_MspPostInit+0xb8>)
 8001110:	f000 fed6 	bl	8001ec0 <HAL_GPIO_Init>
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	@ 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	44020c00 	.word	0x44020c00
 8001120:	42020400 	.word	0x42020400
 8001124:	40000400 	.word	0x40000400

08001128 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 800112e:	4a23      	ldr	r2, [pc, #140]	@ (80011bc <MX_USART6_UART_Init+0x94>)
 8001130:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001170:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 8001172:	f008 fd15 	bl	8009ba0 <HAL_UART_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800117c:	f7ff fd42 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 8001184:	f009 f9a2 	bl	800a4cc <HAL_UARTEx_SetTxFifoThreshold>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800118e:	f7ff fd39 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001192:	2100      	movs	r1, #0
 8001194:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 8001196:	f009 f9d7 	bl	800a548 <HAL_UARTEx_SetRxFifoThreshold>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80011a0:	f7ff fd30 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_USART6_UART_Init+0x90>)
 80011a6:	f009 f958 	bl	800a45a <HAL_UARTEx_DisableFifoMode>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80011b0:	f7ff fd28 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000031c 	.word	0x2000031c
 80011bc:	40006400 	.word	0x40006400

080011c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0cc      	sub	sp, #304	@ 0x130
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011ce:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80011e8:	4618      	mov	r0, r3
 80011ea:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80011ee:	461a      	mov	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f00b fb92 	bl	800c91a <memset>
  if(uartHandle->Instance==USART6)
 80011f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a32      	ldr	r2, [pc, #200]	@ (80012cc <HAL_UART_MspInit+0x10c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d15c      	bne.n	80012c2 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001208:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800120c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001210:	f04f 0220 	mov.w	r2, #32
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 800121c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001220:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001224:	2200      	movs	r2, #0
 8001226:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4618      	mov	r0, r3
 800122e:	f002 f8ad 	bl	800338c <HAL_RCCEx_PeriphCLKConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001238:	f7ff fce4 	bl	8000c04 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800123c:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <HAL_UART_MspInit+0x110>)
 800123e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001242:	4a23      	ldr	r2, [pc, #140]	@ (80012d0 <HAL_UART_MspInit+0x110>)
 8001244:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001248:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800124c:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <HAL_UART_MspInit+0x110>)
 800124e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001252:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001256:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800125a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001264:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001268:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_UART_MspInit+0x110>)
 800126c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001270:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <HAL_UART_MspInit+0x110>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <HAL_UART_MspInit+0x110>)
 800127c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001280:	f003 0204 	and.w	r2, r3, #4
 8001284:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001288:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001292:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001296:	681b      	ldr	r3, [r3, #0]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = VCP_USART6_TX_Pin|VCP_USART6_RX_Pin;
 8001298:	23c0      	movs	r3, #192	@ 0xc0
 800129a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80012b0:	2307      	movs	r3, #7
 80012b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <HAL_UART_MspInit+0x114>)
 80012be:	f000 fdff 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80012c2:	bf00      	nop
 80012c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40006400 	.word	0x40006400
 80012d0:	44020c00 	.word	0x44020c00
 80012d4:	42020800 	.word	0x42020800

080012d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012d8:	480d      	ldr	r0, [pc, #52]	@ (8001310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012dc:	f7ff fd34 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	@ (8001318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <LoopForever+0xe>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001324 <LoopForever+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001306:	f00b fb11 	bl	800c92c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130a:	f7ff fbe6 	bl	8000ada <main>

0800130e <LoopForever>:

LoopForever:
    b LoopForever
 800130e:	e7fe      	b.n	800130e <LoopForever>
  ldr   r0, =_estack
 8001310:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800131c:	0800ca40 	.word	0x0800ca40
  ldr r2, =_sbss
 8001320:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001324:	20002ee4 	.word	0x20002ee4

08001328 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC1_IRQHandler>
	...

0800132c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 f906 	bl	8001542 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001336:	f001 fe67 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 800133a:	4602      	mov	r2, r0
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <HAL_Init+0x44>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	490b      	ldr	r1, [pc, #44]	@ (8001374 <HAL_Init+0x48>)
 8001346:	5ccb      	ldrb	r3, [r1, r3]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <HAL_Init+0x4c>)
 800134e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001350:	2004      	movs	r0, #4
 8001352:	f000 f929 	bl	80015a8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	200f      	movs	r0, #15
 8001358:	f7ff fc64 	bl	8000c24 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e002      	b.n	800136c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001366:	f7ff fc53 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	bd80      	pop	{r7, pc}
 8001370:	44020c00 	.word	0x44020c00
 8001374:	0800c9f0 	.word	0x0800c9f0
 8001378:	20000000 	.word	0x20000000

0800137c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	200003b0 	.word	0x200003b0

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200003b0 	.word	0x200003b0

080013bc <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80013c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80013ca:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80013ce:	4905      	ldr	r1, [pc, #20]	@ (80013e4 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	44000400 	.word	0x44000400

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	@ (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4907      	ldr	r1, [pc, #28]	@ (8001484 <__NVIC_EnableIRQ+0x38>)
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	@ (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	@ (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	@ 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	@ 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff4c 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001566:	f7ff ff63 	bl	8001430 <__NVIC_GetPriorityGrouping>
 800156a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	6978      	ldr	r0, [r7, #20]
 8001572:	f7ff ffb3 	bl	80014dc <NVIC_EncodePriority>
 8001576:	4602      	mov	r2, r0
 8001578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff82 	bl	8001488 <__NVIC_SetPriority>
}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff56 	bl	800144c <__NVIC_EnableIRQ>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d844      	bhi.n	8001640 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80015b6:	a201      	add	r2, pc, #4	@ (adr r2, 80015bc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	080015df 	.word	0x080015df
 80015c0:	080015fd 	.word	0x080015fd
 80015c4:	0800161f 	.word	0x0800161f
 80015c8:	08001641 	.word	0x08001641
 80015cc:	080015d1 	.word	0x080015d1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6013      	str	r3, [r2, #0]
      break;
 80015dc:	e031      	b.n	8001642 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001650 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80015ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015f0:	4a18      	ldr	r2, [pc, #96]	@ (8001654 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015f2:	f023 030c 	bic.w	r3, r3, #12
 80015f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80015fa:	e022      	b.n	8001642 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800160a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800160e:	f023 030c 	bic.w	r3, r3, #12
 8001612:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800161c:	e011      	b.n	8001642 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800162c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001630:	f023 030c 	bic.w	r3, r3, #12
 8001634:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800163e:	e000      	b.n	8001642 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001640:	bf00      	nop
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010
 8001654:	44020c00 	.word	0x44020c00

08001658 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0e8      	b.n	800183c <HAL_ETH_Init+0x1e4>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001670:	2b00      	cmp	r3, #0
 8001672:	d106      	bne.n	8001682 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2223      	movs	r2, #35	@ 0x23
 8001678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7fe fff9 	bl	8000674 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8001682:	4b70      	ldr	r3, [pc, #448]	@ (8001844 <HAL_ETH_Init+0x1ec>)
 8001684:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001688:	4a6e      	ldr	r2, [pc, #440]	@ (8001844 <HAL_ETH_Init+0x1ec>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001692:	4b6c      	ldr	r3, [pc, #432]	@ (8001844 <HAL_ETH_Init+0x1ec>)
 8001694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7a1b      	ldrb	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d103      	bne.n	80016b0 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fe87 	bl	80013bc <HAL_SBS_ETHInterfaceSelect>
 80016ae:	e003      	b.n	80016b8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 80016b0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80016b4:	f7ff fe82 	bl	80013bc <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 80016b8:	4b63      	ldr	r3, [pc, #396]	@ (8001848 <HAL_ETH_Init+0x1f0>)
 80016ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d6:	f7ff fe65 	bl	80013a4 <HAL_GetTick>
 80016da:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016dc:	e011      	b.n	8001702 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016de:	f7ff fe61 	bl	80013a4 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016ec:	d909      	bls.n	8001702 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2204      	movs	r2, #4
 80016f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	22e0      	movs	r2, #224	@ 0xe0
 80016fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e09c      	b.n	800183c <HAL_ETH_Init+0x1e4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e4      	bne.n	80016de <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f89d 	bl	8001854 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800171a:	f001 fda1 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 800171e:	4603      	mov	r3, r0
 8001720:	4a4a      	ldr	r2, [pc, #296]	@ (800184c <HAL_ETH_Init+0x1f4>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9a      	lsrs	r2, r3, #18
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3a01      	subs	r2, #1
 800172e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fa80 	bl	8001c38 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001740:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001744:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001750:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001754:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	22e0      	movs	r2, #224	@ 0xe0
 8001770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e061      	b.n	800183c <HAL_ETH_Init+0x1e4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001780:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001784:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001788:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6952      	ldr	r2, [r2, #20]
 8001790:	0051      	lsls	r1, r2, #1
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	430b      	orrs	r3, r1
 8001798:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800179c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fae6 	bl	8001d72 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fb2c 	bl	8001e04 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	3305      	adds	r3, #5
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	021a      	lsls	r2, r3, #8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	3304      	adds	r3, #4
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	3303      	adds	r3, #3
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	061a      	lsls	r2, r3, #24
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	3302      	adds	r3, #2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	041b      	lsls	r3, r3, #16
 80017de:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	3301      	adds	r3, #1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017ea:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017f8:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017fa:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <HAL_ETH_Init+0x1f8>)
 800180c:	430b      	orrs	r3, r1
 800180e:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 8001822:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001826:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2210      	movs	r2, #16
 8001836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	44020c00 	.word	0x44020c00
 8001848:	44000400 	.word	0x44000400
 800184c:	431bde83 	.word	0x431bde83
 8001850:	0c020060 	.word	0x0c020060

08001854 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001864:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800186c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800186e:	f001 fcf7 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8001872:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4a1a      	ldr	r2, [pc, #104]	@ (80018e0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d804      	bhi.n	8001886 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e022      	b.n	80018cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d204      	bcs.n	8001898 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e019      	b.n	80018cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4a13      	ldr	r2, [pc, #76]	@ (80018e8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d915      	bls.n	80018cc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <HAL_ETH_SetMDIOClockRange+0x98>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d804      	bhi.n	80018b2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e00c      	b.n	80018cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4a0e      	ldr	r2, [pc, #56]	@ (80018f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d804      	bhi.n	80018c4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e003      	b.n	80018cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80018ca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	02160ebf 	.word	0x02160ebf
 80018e4:	03938700 	.word	0x03938700
 80018e8:	05f5e0ff 	.word	0x05f5e0ff
 80018ec:	08f0d17f 	.word	0x08f0d17f
 80018f0:	0ee6b27f 	.word	0x0ee6b27f

080018f4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001906:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800190e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	7b1b      	ldrb	r3, [r3, #12]
 8001914:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001916:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7b5b      	ldrb	r3, [r3, #13]
 800191c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800191e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7b9b      	ldrb	r3, [r3, #14]
 8001924:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	7bdb      	ldrb	r3, [r3, #15]
 800192c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800192e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	7c12      	ldrb	r2, [r2, #16]
 8001934:	2a00      	cmp	r2, #0
 8001936:	d102      	bne.n	800193e <ETH_SetMACConfig+0x4a>
 8001938:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800193c:	e000      	b.n	8001940 <ETH_SetMACConfig+0x4c>
 800193e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001940:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	7c52      	ldrb	r2, [r2, #17]
 8001946:	2a00      	cmp	r2, #0
 8001948:	d102      	bne.n	8001950 <ETH_SetMACConfig+0x5c>
 800194a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800194e:	e000      	b.n	8001952 <ETH_SetMACConfig+0x5e>
 8001950:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001952:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	7c9b      	ldrb	r3, [r3, #18]
 8001958:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800195a:	431a      	orrs	r2, r3
               macconf->Speed |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001960:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001966:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	7f1b      	ldrb	r3, [r3, #28]
 800196c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800196e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7f5b      	ldrb	r3, [r3, #29]
 8001974:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001976:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	7f92      	ldrb	r2, [r2, #30]
 800197c:	2a00      	cmp	r2, #0
 800197e:	d102      	bne.n	8001986 <ETH_SetMACConfig+0x92>
 8001980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001984:	e000      	b.n	8001988 <ETH_SetMACConfig+0x94>
 8001986:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001988:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	7fdb      	ldrb	r3, [r3, #31]
 800198e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001990:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001998:	2a00      	cmp	r2, #0
 800199a:	d102      	bne.n	80019a2 <ETH_SetMACConfig+0xae>
 800199c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a0:	e000      	b.n	80019a4 <ETH_SetMACConfig+0xb0>
 80019a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019a4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019b2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80019b4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b57      	ldr	r3, [pc, #348]	@ (8001b24 <ETH_SetMACConfig+0x230>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80019f2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	d102      	bne.n	8001a06 <ETH_SetMACConfig+0x112>
 8001a00:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a04:	e000      	b.n	8001a08 <ETH_SetMACConfig+0x114>
 8001a06:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a08:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4b43      	ldr	r3, [pc, #268]	@ (8001b28 <ETH_SetMACConfig+0x234>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	430b      	orrs	r3, r1
 8001a24:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a2c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a54:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a5a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a62:	2a00      	cmp	r2, #0
 8001a64:	d101      	bne.n	8001a6a <ETH_SetMACConfig+0x176>
 8001a66:	2280      	movs	r2, #128	@ 0x80
 8001a68:	e000      	b.n	8001a6c <ETH_SetMACConfig+0x178>
 8001a6a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a6c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a72:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a7e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001a82:	4013      	ands	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	68f9      	ldr	r1, [r7, #12]
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001a94:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001a9c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aaa:	f023 0103 	bic.w	r1, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001ac2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d101      	bne.n	8001ae6 <ETH_SetMACConfig+0x1f2>
 8001ae2:	2240      	movs	r2, #64	@ 0x40
 8001ae4:	e000      	b.n	8001ae8 <ETH_SetMACConfig+0x1f4>
 8001ae6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001ae8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001af0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001af2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001afa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001b08:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	00048083 	.word	0x00048083
 8001b28:	c0f88000 	.word	0xc0f88000

08001b2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8001b44:	f023 0302 	bic.w	r3, r3, #2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	6811      	ldr	r1, [r2, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b56:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	791b      	ldrb	r3, [r3, #4]
 8001b5c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b62:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	7b1b      	ldrb	r3, [r3, #12]
 8001b68:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	430b      	orrs	r3, r1
 8001b88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b8c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	7b5b      	ldrb	r3, [r3, #13]
 8001b92:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001ba8:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <ETH_SetDMAConfig+0x104>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	68f9      	ldr	r1, [r7, #12]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bb8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7d1b      	ldrb	r3, [r3, #20]
 8001bc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bc6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	7f5b      	ldrb	r3, [r3, #29]
 8001bcc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bda:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <ETH_SetDMAConfig+0x108>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bee:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	7f1b      	ldrb	r3, [r3, #28]
 8001bf6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c08:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c10:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c20:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	fffec000 	.word	0xfffec000
 8001c34:	ffc0efef 	.word	0xffc0efef

08001c38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0a4      	sub	sp, #144	@ 0x90
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c46:	2300      	movs	r3, #0
 8001c48:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c78:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001c90:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001c94:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ce2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ce8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cec:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d12:	2300      	movs	r3, #0
 8001d14:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fde6 	bl	80018f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d42:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d58:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fee1 	bl	8001b2c <ETH_SetDMAConfig>
}
 8001d6a:	bf00      	nop
 8001d6c:	3790      	adds	r7, #144	@ 0x90
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e01d      	b.n	8001dbc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68d9      	ldr	r1, [r3, #12]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	3206      	adds	r2, #6
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3301      	adds	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d9de      	bls.n	8001d80 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e023      	b.n	8001e5a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6919      	ldr	r1, [r3, #16]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	3212      	adds	r2, #18
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d9d8      	bls.n	8001e12 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e86:	461a      	mov	r2, r3
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eae:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ece:	e136      	b.n	800213e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8128 	beq.w	8002138 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x38>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	d125      	bne.n	8001f44 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	f003 020f 	and.w	r2, r3, #15
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	6979      	ldr	r1, [r7, #20]
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d00b      	beq.n	8001f98 <HAL_GPIO_Init+0xd8>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f8c:	2b11      	cmp	r3, #17
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b12      	cmp	r3, #18
 8001f96:	d130      	bne.n	8001ffa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4013      	ands	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fce:	2201      	movs	r2, #1
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	f003 0201 	and.w	r2, r3, #1
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d017      	beq.n	8002032 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4013      	ands	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d07c      	beq.n	8002138 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800203e:	4a47      	ldr	r2, [pc, #284]	@ (800215c <HAL_GPIO_Init+0x29c>)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3318      	adds	r3, #24
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4013      	ands	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0a9a      	lsrs	r2, r3, #10
 8002066:	4b3e      	ldr	r3, [pc, #248]	@ (8002160 <HAL_GPIO_Init+0x2a0>)
 8002068:	4013      	ands	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	00d2      	lsls	r2, r2, #3
 8002072:	4093      	lsls	r3, r2
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800207a:	4938      	ldr	r1, [pc, #224]	@ (800215c <HAL_GPIO_Init+0x29c>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3318      	adds	r3, #24
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002088:	4b34      	ldr	r3, [pc, #208]	@ (800215c <HAL_GPIO_Init+0x29c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43db      	mvns	r3, r3
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80020ac:	4a2b      	ldr	r2, [pc, #172]	@ (800215c <HAL_GPIO_Init+0x29c>)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80020b2:	4b2a      	ldr	r3, [pc, #168]	@ (800215c <HAL_GPIO_Init+0x29c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4013      	ands	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80020d6:	4a21      	ldr	r2, [pc, #132]	@ (800215c <HAL_GPIO_Init+0x29c>)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <HAL_GPIO_Init+0x29c>)
 80020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4013      	ands	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002102:	4a16      	ldr	r2, [pc, #88]	@ (800215c <HAL_GPIO_Init+0x29c>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <HAL_GPIO_Init+0x29c>)
 800210c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002110:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002130:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_GPIO_Init+0x29c>)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3301      	adds	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f aec1 	bne.w	8001ed0 <HAL_GPIO_Init+0x10>
  }
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	44022000 	.word	0x44022000
 8002160:	002f7f7f 	.word	0x002f7f7f

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e08d      	b.n	8002292 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fc04 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	@ 0x24
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e006      	b.n	80021ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d108      	bne.n	8002206 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	e007      	b.n	8002216 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002228:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002238:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69d9      	ldr	r1, [r3, #28]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d138      	bne.n	8002322 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e032      	b.n	8002324 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2224      	movs	r2, #36	@ 0x24
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b20      	cmp	r3, #32
 8002344:	d139      	bne.n	80023ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002350:	2302      	movs	r3, #2
 8002352:	e033      	b.n	80023bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	@ 0x24
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002382:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	e007      	b.n	80023f6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80023e6:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0204 	bic.w	r2, r3, #4
 80023ee:	4905      	ldr	r1, [pc, #20]	@ (8002404 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	40030400 	.word	0x40030400

08002408 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_ICACHE_Enable+0x1c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <HAL_ICACHE_Enable+0x1c>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40030400 	.word	0x40030400

08002428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f000 bc28 	b.w	8002c8c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243c:	4b94      	ldr	r3, [pc, #592]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f003 0318 	and.w	r3, r3, #24
 8002444:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002446:	4b92      	ldr	r3, [pc, #584]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d05b      	beq.n	8002514 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b08      	cmp	r3, #8
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x46>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	2b18      	cmp	r3, #24
 8002466:	d114      	bne.n	8002492 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d111      	bne.n	8002492 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f000 bc08 	b.w	8002c8c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800247c:	4b84      	ldr	r3, [pc, #528]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	041b      	lsls	r3, r3, #16
 800248a:	4981      	ldr	r1, [pc, #516]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 800248c:	4313      	orrs	r3, r2
 800248e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002490:	e040      	b.n	8002514 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d023      	beq.n	80024e2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800249a:	4b7d      	ldr	r3, [pc, #500]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a7c      	ldr	r2, [pc, #496]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe ff7d 	bl	80013a4 <HAL_GetTick>
 80024aa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80024ae:	f7fe ff79 	bl	80013a4 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e3e5      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80024c0:	4b73      	ldr	r3, [pc, #460]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80024cc:	4b70      	ldr	r3, [pc, #448]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	496d      	ldr	r1, [pc, #436]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	618b      	str	r3, [r1, #24]
 80024e0:	e018      	b.n	8002514 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80024e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe ff59 	bl	80013a4 <HAL_GetTick>
 80024f2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80024f6:	f7fe ff55 	bl	80013a4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e3c1      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002508:	4b61      	ldr	r3, [pc, #388]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a0 	beq.w	8002662 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b10      	cmp	r3, #16
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x10c>
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b18      	cmp	r3, #24
 800252c:	d109      	bne.n	8002542 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 8092 	bne.w	8002662 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e3a4      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x132>
 800254c:	4b50      	ldr	r3, [pc, #320]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a4f      	ldr	r2, [pc, #316]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e058      	b.n	800260c <HAL_RCC_OscConfig+0x1e4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d112      	bne.n	8002588 <HAL_RCC_OscConfig+0x160>
 8002562:	4b4b      	ldr	r3, [pc, #300]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a4a      	ldr	r2, [pc, #296]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b48      	ldr	r3, [pc, #288]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a47      	ldr	r2, [pc, #284]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002574:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b45      	ldr	r3, [pc, #276]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a44      	ldr	r2, [pc, #272]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e041      	b.n	800260c <HAL_RCC_OscConfig+0x1e4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x190>
 8002592:	4b3f      	ldr	r3, [pc, #252]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a3e      	ldr	r2, [pc, #248]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b3c      	ldr	r3, [pc, #240]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a38      	ldr	r2, [pc, #224]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e029      	b.n	800260c <HAL_RCC_OscConfig+0x1e4>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80025c0:	d112      	bne.n	80025e8 <HAL_RCC_OscConfig+0x1c0>
 80025c2:	4b33      	ldr	r3, [pc, #204]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a32      	ldr	r2, [pc, #200]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b30      	ldr	r3, [pc, #192]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2c      	ldr	r2, [pc, #176]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e011      	b.n	800260c <HAL_RCC_OscConfig+0x1e4>
 80025e8:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a28      	ldr	r2, [pc, #160]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a25      	ldr	r2, [pc, #148]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002606:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fec6 	bl	80013a4 <HAL_GetTick>
 8002618:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800261c:	f7fe fec2 	bl	80013a4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e32e      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262e:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x1f4>
 800263a:	e012      	b.n	8002662 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe feb2 	bl	80013a4 <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002644:	f7fe feae 	bl	80013a4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e31a      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <HAL_RCC_OscConfig+0x268>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 809a 	beq.w	80027a4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x25a>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b18      	cmp	r3, #24
 800267a:	d149      	bne.n	8002710 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d146      	bne.n	8002710 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d104      	bne.n	8002694 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e2fe      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
 800268e:	bf00      	nop
 8002690:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d11c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800269a:	4b9a      	ldr	r3, [pc, #616]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0218 	and.w	r2, r3, #24
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d014      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80026aa:	4b96      	ldr	r3, [pc, #600]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0218 	bic.w	r2, r3, #24
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	4993      	ldr	r1, [pc, #588]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80026bc:	f000 fdd0 	bl	8003260 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026c0:	4b91      	ldr	r3, [pc, #580]	@ (8002908 <HAL_RCC_OscConfig+0x4e0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe faad 	bl	8000c24 <HAL_InitTick>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e2db      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fe66 	bl	80013a4 <HAL_GetTick>
 80026d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80026dc:	f7fe fe62 	bl	80013a4 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e2ce      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ee:	4b85      	ldr	r3, [pc, #532]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80026fa:	4b82      	ldr	r3, [pc, #520]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	497e      	ldr	r1, [pc, #504]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800270e:	e049      	b.n	80027a4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d02c      	beq.n	8002772 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002718:	4b7a      	ldr	r3, [pc, #488]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 0218 	bic.w	r2, r3, #24
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	4977      	ldr	r1, [pc, #476]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800272a:	4b76      	ldr	r3, [pc, #472]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a75      	ldr	r2, [pc, #468]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fe35 	bl	80013a4 <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800273e:	f7fe fe31 	bl	80013a4 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e29d      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002750:	4b6c      	ldr	r3, [pc, #432]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800275c:	4b69      	ldr	r3, [pc, #420]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	4966      	ldr	r1, [pc, #408]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 800276c:	4313      	orrs	r3, r2
 800276e:	610b      	str	r3, [r1, #16]
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b64      	ldr	r3, [pc, #400]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a63      	ldr	r2, [pc, #396]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fe11 	bl	80013a4 <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002786:	f7fe fe0d 	bl	80013a4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e279      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002798:	4b5a      	ldr	r3, [pc, #360]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d03c      	beq.n	800282a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b8:	4b52      	ldr	r3, [pc, #328]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80027ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027be:	4a51      	ldr	r2, [pc, #324]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80027c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fdec 	bl	80013a4 <HAL_GetTick>
 80027cc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80027d0:	f7fe fde8 	bl	80013a4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e254      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80027e2:	4b48      	ldr	r3, [pc, #288]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80027e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ef      	beq.n	80027d0 <HAL_RCC_OscConfig+0x3a8>
 80027f0:	e01b      	b.n	800282a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b44      	ldr	r3, [pc, #272]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80027f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f8:	4a42      	ldr	r2, [pc, #264]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80027fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fdcf 	bl	80013a4 <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800280a:	f7fe fdcb 	bl	80013a4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e237      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800281c:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 800281e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002822:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ef      	bne.n	800280a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80d2 	beq.w	80029dc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002838:	4b34      	ldr	r3, [pc, #208]	@ (800290c <HAL_RCC_OscConfig+0x4e4>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d118      	bne.n	8002876 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002844:	4b31      	ldr	r3, [pc, #196]	@ (800290c <HAL_RCC_OscConfig+0x4e4>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	4a30      	ldr	r2, [pc, #192]	@ (800290c <HAL_RCC_OscConfig+0x4e4>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002850:	f7fe fda8 	bl	80013a4 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002858:	f7fe fda4 	bl	80013a4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e210      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800286a:	4b28      	ldr	r3, [pc, #160]	@ (800290c <HAL_RCC_OscConfig+0x4e4>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d108      	bne.n	8002890 <HAL_RCC_OscConfig+0x468>
 800287e:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 8002880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002884:	4a1f      	ldr	r2, [pc, #124]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800288e:	e074      	b.n	800297a <HAL_RCC_OscConfig+0x552>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d118      	bne.n	80028ca <HAL_RCC_OscConfig+0x4a2>
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 800289a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800289e:	4a19      	ldr	r2, [pc, #100]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028a8:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ae:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028b8:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028be:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028c8:	e057      	b.n	800297a <HAL_RCC_OscConfig+0x552>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d11e      	bne.n	8002910 <HAL_RCC_OscConfig+0x4e8>
 80028d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e8:	4a06      	ldr	r2, [pc, #24]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028f2:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f8:	4a02      	ldr	r2, [pc, #8]	@ (8002904 <HAL_RCC_OscConfig+0x4dc>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002902:	e03a      	b.n	800297a <HAL_RCC_OscConfig+0x552>
 8002904:	44020c00 	.word	0x44020c00
 8002908:	20000004 	.word	0x20000004
 800290c:	44020800 	.word	0x44020800
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b85      	cmp	r3, #133	@ 0x85
 8002916:	d118      	bne.n	800294a <HAL_RCC_OscConfig+0x522>
 8002918:	4ba2      	ldr	r3, [pc, #648]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 800291a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800291e:	4aa1      	ldr	r2, [pc, #644]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002928:	4b9e      	ldr	r3, [pc, #632]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 800292a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800292e:	4a9d      	ldr	r2, [pc, #628]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002934:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002938:	4b9a      	ldr	r3, [pc, #616]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 800293a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800293e:	4a99      	ldr	r2, [pc, #612]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002948:	e017      	b.n	800297a <HAL_RCC_OscConfig+0x552>
 800294a:	4b96      	ldr	r3, [pc, #600]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 800294c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002950:	4a94      	ldr	r2, [pc, #592]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800295a:	4b92      	ldr	r3, [pc, #584]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 800295c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002960:	4a90      	ldr	r2, [pc, #576]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800296a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 800296c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002970:	4a8c      	ldr	r2, [pc, #560]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002976:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fd0f 	bl	80013a4 <HAL_GetTick>
 8002986:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fd0b 	bl	80013a4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e175      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a0:	4b80      	ldr	r3, [pc, #512]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 80029a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0ed      	beq.n	800298a <HAL_RCC_OscConfig+0x562>
 80029ae:	e015      	b.n	80029dc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe fcf8 	bl	80013a4 <HAL_GetTick>
 80029b4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fcf4 	bl	80013a4 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e15e      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ce:	4b75      	ldr	r3, [pc, #468]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 80029d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ed      	bne.n	80029b8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d036      	beq.n	8002a56 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d019      	beq.n	8002a24 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029f0:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a6b      	ldr	r2, [pc, #428]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 80029f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fcd2 	bl	80013a4 <HAL_GetTick>
 8002a00:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002a04:	f7fe fcce 	bl	80013a4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e13a      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a16:	4b63      	ldr	r3, [pc, #396]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x5dc>
 8002a22:	e018      	b.n	8002a56 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a24:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002a2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7fe fcb8 	bl	80013a4 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002a38:	f7fe fcb4 	bl	80013a4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e120      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a4a:	4b56      	ldr	r3, [pc, #344]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8115 	beq.w	8002c8a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b18      	cmp	r3, #24
 8002a64:	f000 80af 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f040 8086 	bne.w	8002b7e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002a72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002a78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fc91 	bl	80013a4 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fc8d 	bl	80013a4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0f9      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a98:	4b42      	ldr	r3, [pc, #264]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002aac:	f023 0303 	bic.w	r3, r3, #3
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ab8:	0212      	lsls	r2, r2, #8
 8002aba:	430a      	orrs	r2, r1
 8002abc:	4939      	ldr	r1, [pc, #228]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	3b01      	subs	r3, #1
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002af2:	492c      	ldr	r1, [pc, #176]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002af8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	4a29      	ldr	r2, [pc, #164]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002afe:	f023 0310 	bic.w	r3, r3, #16
 8002b02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b08:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002b0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	4a24      	ldr	r2, [pc, #144]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b14:	f043 0310 	orr.w	r3, r3, #16
 8002b18:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002b1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1e:	f023 020c 	bic.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	491f      	ldr	r1, [pc, #124]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b30:	f023 0220 	bic.w	r2, r3, #32
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b38:	491a      	ldr	r1, [pc, #104]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	4a18      	ldr	r2, [pc, #96]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002b4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fc25 	bl	80013a4 <HAL_GetTick>
 8002b5a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe fc21 	bl	80013a4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e08d      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x736>
 8002b7c:	e085      	b.n	8002c8a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002b7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a08      	ldr	r2, [pc, #32]	@ (8002ba4 <HAL_RCC_OscConfig+0x77c>)
 8002b84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fc0b 	bl	80013a4 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b92:	f7fe fc07 	bl	80013a4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d903      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e073      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
 8002ba4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ee      	bne.n	8002b92 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002bb4:	4b37      	ldr	r3, [pc, #220]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	4a36      	ldr	r2, [pc, #216]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002bba:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	6293      	str	r3, [r2, #40]	@ 0x28
 8002bc4:	e061      	b.n	8002c8a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002bc6:	4b33      	ldr	r3, [pc, #204]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bcc:	4b31      	ldr	r3, [pc, #196]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d031      	beq.n	8002c3e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f003 0203 	and.w	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d12a      	bne.n	8002c3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d122      	bne.n	8002c3e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c02:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d11a      	bne.n	8002c3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	0a5b      	lsrs	r3, r3, #9
 8002c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d111      	bne.n	8002c3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c26:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d108      	bne.n	8002c3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	0e1b      	lsrs	r3, r3, #24
 8002c30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e024      	b.n	8002c8c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c46:	08db      	lsrs	r3, r3, #3
 8002c48:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d01a      	beq.n	8002c8a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002c54:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	4a0e      	ldr	r2, [pc, #56]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002c5a:	f023 0310 	bic.w	r3, r3, #16
 8002c5e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fba0 	bl	80013a4 <HAL_GetTick>
 8002c64:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002c66:	bf00      	nop
 8002c68:	f7fe fb9c 	bl	80013a4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d0f9      	beq.n	8002c68 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c78:	4a06      	ldr	r2, [pc, #24]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002c7e:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c82:	4a04      	ldr	r2, [pc, #16]	@ (8002c94 <HAL_RCC_OscConfig+0x86c>)
 8002c84:	f043 0310 	orr.w	r3, r3, #16
 8002c88:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	44020c00 	.word	0x44020c00

08002c98 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e19e      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b83      	ldr	r3, [pc, #524]	@ (8002ebc <HAL_RCC_ClockConfig+0x224>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d910      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b80      	ldr	r3, [pc, #512]	@ (8002ebc <HAL_RCC_ClockConfig+0x224>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 020f 	bic.w	r2, r3, #15
 8002cc2:	497e      	ldr	r1, [pc, #504]	@ (8002ebc <HAL_RCC_ClockConfig+0x224>)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b7c      	ldr	r3, [pc, #496]	@ (8002ebc <HAL_RCC_ClockConfig+0x224>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e186      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	4b74      	ldr	r3, [pc, #464]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d909      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002cfa:	4b71      	ldr	r3, [pc, #452]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	496d      	ldr	r1, [pc, #436]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d012      	beq.n	8002d40 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	4b68      	ldr	r3, [pc, #416]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d909      	bls.n	8002d40 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002d2c:	4b64      	ldr	r3, [pc, #400]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	4961      	ldr	r1, [pc, #388]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d908      	bls.n	8002d6e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d5c:	4b58      	ldr	r3, [pc, #352]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4955      	ldr	r1, [pc, #340]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d010      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	4b50      	ldr	r3, [pc, #320]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d908      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f023 020f 	bic.w	r2, r3, #15
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	494a      	ldr	r1, [pc, #296]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8093 	beq.w	8002ed0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002db2:	4b43      	ldr	r3, [pc, #268]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d121      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e113      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d115      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e107      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002de2:	4b37      	ldr	r3, [pc, #220]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0fb      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df2:	4b33      	ldr	r3, [pc, #204]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0f3      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002e02:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	492c      	ldr	r1, [pc, #176]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e14:	f7fe fac6 	bl	80013a4 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d112      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe fabe 	bl	80013a4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e0d7      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e3a:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0318 	and.w	r3, r3, #24
 8002e42:	2b18      	cmp	r3, #24
 8002e44:	d1ee      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x18c>
 8002e46:	e043      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d112      	bne.n	8002e76 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e52:	f7fe faa7 	bl	80013a4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0c0      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e68:	4b15      	ldr	r3, [pc, #84]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f003 0318 	and.w	r3, r3, #24
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d1ee      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x1ba>
 8002e74:	e02c      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d122      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe fa90 	bl	80013a4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0a9      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_RCC_ClockConfig+0x228>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 0318 	and.w	r3, r3, #24
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d1ee      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
 8002ea2:	e015      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7fe fa7e 	bl	80013a4 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d906      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e097      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
 8002eba:	bf00      	nop
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f003 0318 	and.w	r3, r3, #24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e9      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	4b44      	ldr	r3, [pc, #272]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d208      	bcs.n	8002efe <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002eec:	4b41      	ldr	r3, [pc, #260]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f023 020f 	bic.w	r2, r3, #15
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	493e      	ldr	r1, [pc, #248]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002efe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff8 <HAL_RCC_ClockConfig+0x360>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d210      	bcs.n	8002f2e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff8 <HAL_RCC_ClockConfig+0x360>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 020f 	bic.w	r2, r3, #15
 8002f14:	4938      	ldr	r1, [pc, #224]	@ (8002ff8 <HAL_RCC_ClockConfig+0x360>)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ff8 <HAL_RCC_ClockConfig+0x360>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e05d      	b.n	8002fea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d208      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	4927      	ldr	r1, [pc, #156]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d012      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d209      	bcs.n	8002f8e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	491a      	ldr	r1, [pc, #104]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d012      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d209      	bcs.n	8002fc0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	490e      	ldr	r1, [pc, #56]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002fc0:	f000 f822 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490b      	ldr	r1, [pc, #44]	@ (8002ffc <HAL_RCC_ClockConfig+0x364>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <HAL_RCC_ClockConfig+0x368>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fda:	4b0a      	ldr	r3, [pc, #40]	@ (8003004 <HAL_RCC_ClockConfig+0x36c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fe20 	bl	8000c24 <HAL_InitTick>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	44020c00 	.word	0x44020c00
 8002ff8:	40022000 	.word	0x40022000
 8002ffc:	0800c9f0 	.word	0x0800c9f0
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	@ 0x24
 800300c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800300e:	4b8c      	ldr	r3, [pc, #560]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 0318 	and.w	r3, r3, #24
 8003016:	2b08      	cmp	r3, #8
 8003018:	d102      	bne.n	8003020 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800301a:	4b8a      	ldr	r3, [pc, #552]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x23c>)
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e107      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003020:	4b87      	ldr	r3, [pc, #540]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f003 0318 	and.w	r3, r3, #24
 8003028:	2b00      	cmp	r3, #0
 800302a:	d112      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800302c:	4b84      	ldr	r3, [pc, #528]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d009      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003038:	4b81      	ldr	r3, [pc, #516]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	4a81      	ldr	r2, [pc, #516]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x240>)
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e0f1      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800304c:	4b7e      	ldr	r3, [pc, #504]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x240>)
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	e0ee      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003052:	4b7b      	ldr	r3, [pc, #492]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 0318 	and.w	r3, r3, #24
 800305a:	2b10      	cmp	r3, #16
 800305c:	d102      	bne.n	8003064 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800305e:	4b7b      	ldr	r3, [pc, #492]	@ (800324c <HAL_RCC_GetSysClockFreq+0x244>)
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e0e5      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	4b76      	ldr	r3, [pc, #472]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f003 0318 	and.w	r3, r3, #24
 800306c:	2b18      	cmp	r3, #24
 800306e:	f040 80dd 	bne.w	800322c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003072:	4b73      	ldr	r3, [pc, #460]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800307c:	4b70      	ldr	r3, [pc, #448]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003086:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003088:	4b6d      	ldr	r3, [pc, #436]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003094:	4b6a      	ldr	r3, [pc, #424]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 8003096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003098:	08db      	lsrs	r3, r3, #3
 800309a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ac:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80b7 	beq.w	8003226 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0xbe>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d056      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x16a>
 80030c4:	e077      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80030c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d02d      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80030d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	08db      	lsrs	r3, r3, #3
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x240>)
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	ee07 3a90 	vmov	s15, r3
 80030f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fc:	4b50      	ldr	r3, [pc, #320]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 80030fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800310c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003110:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003250 <HAL_RCC_GetSysClockFreq+0x248>
 8003114:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003118:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800311c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003120:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003128:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800312c:	e065      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003138:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003254 <HAL_RCC_GetSysClockFreq+0x24c>
 800313c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003140:	4b3f      	ldr	r3, [pc, #252]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 8003142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003150:	ed97 6a02 	vldr	s12, [r7, #8]
 8003154:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003250 <HAL_RCC_GetSysClockFreq+0x248>
 8003158:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800315c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003164:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003170:	e043      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003258 <HAL_RCC_GetSysClockFreq+0x250>
 8003180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003184:	4b2e      	ldr	r3, [pc, #184]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 8003186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318c:	ee07 3a90 	vmov	s15, r3
 8003190:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003194:	ed97 6a02 	vldr	s12, [r7, #8]
 8003198:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003250 <HAL_RCC_GetSysClockFreq+0x248>
 800319c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80031b4:	e021      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800325c <HAL_RCC_GetSysClockFreq+0x254>
 80031c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 80031ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80031dc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003250 <HAL_RCC_GetSysClockFreq+0x248>
 80031e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80031f8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80031fa:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x238>)
 80031fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fe:	0a5b      	lsrs	r3, r3, #9
 8003200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003204:	3301      	adds	r3, #1
 8003206:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003212:	edd7 6a06 	vldr	s13, [r7, #24]
 8003216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800321a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800321e:	ee17 3a90 	vmov	r3, s15
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	e004      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e001      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800322c:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x240>)
 800322e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003230:	69fb      	ldr	r3, [r7, #28]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	@ 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	44020c00 	.word	0x44020c00
 8003244:	003d0900 	.word	0x003d0900
 8003248:	03d09000 	.word	0x03d09000
 800324c:	02faf080 	.word	0x02faf080
 8003250:	46000000 	.word	0x46000000
 8003254:	4c742400 	.word	0x4c742400
 8003258:	4c3ebc20 	.word	0x4c3ebc20
 800325c:	4a742400 	.word	0x4a742400

08003260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003264:	f7ff fed0 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b08      	ldr	r3, [pc, #32]	@ (800328c <HAL_RCC_GetHCLKFreq+0x2c>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800326e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003272:	4907      	ldr	r1, [pc, #28]	@ (8003290 <HAL_RCC_GetHCLKFreq+0x30>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003276:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	4a05      	ldr	r2, [pc, #20]	@ (8003294 <HAL_RCC_GetHCLKFreq+0x34>)
 8003280:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003282:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <HAL_RCC_GetHCLKFreq+0x34>)
 8003284:	681b      	ldr	r3, [r3, #0]
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	44020c00 	.word	0x44020c00
 8003290:	0800c9f0 	.word	0x0800c9f0
 8003294:	20000000 	.word	0x20000000

08003298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800329c:	f7ff ffe0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4904      	ldr	r1, [pc, #16]	@ (80032c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	44020c00 	.word	0x44020c00
 80032c0:	0800ca00 	.word	0x0800ca00

080032c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80032c8:	f7ff ffca 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4904      	ldr	r1, [pc, #16]	@ (80032ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	44020c00 	.word	0x44020c00
 80032ec:	0800ca00 	.word	0x0800ca00

080032f0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80032f4:	f7ff ffb4 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_RCC_GetPCLK3Freq+0x24>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	0b1b      	lsrs	r3, r3, #12
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4904      	ldr	r1, [pc, #16]	@ (8003318 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	44020c00 	.word	0x44020c00
 8003318:	0800ca00 	.word	0x0800ca00

0800331c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	221f      	movs	r2, #31
 800332a:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800332c:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <HAL_RCC_GetClockConfig+0x68>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f003 0203 	and.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8003338:	4b12      	ldr	r3, [pc, #72]	@ (8003384 <HAL_RCC_GetClockConfig+0x68>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800336a:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <HAL_RCC_GetClockConfig+0x6c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 020f 	and.w	r2, r3, #15
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	601a      	str	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	44020c00 	.word	0x44020c00
 8003388:	40022000 	.word	0x40022000

0800338c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b0d8      	sub	sp, #352	@ 0x160
 8003392:	af00      	add	r7, sp, #0
 8003394:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003398:	2300      	movs	r3, #0
 800339a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80033b0:	2500      	movs	r5, #0
 80033b2:	ea54 0305 	orrs.w	r3, r4, r5
 80033b6:	d00b      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80033b8:	4bcd      	ldr	r3, [pc, #820]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80033ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033be:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80033c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c8:	4ac9      	ldr	r2, [pc, #804]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80033ca:	430b      	orrs	r3, r1
 80033cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f002 0801 	and.w	r8, r2, #1
 80033dc:	f04f 0900 	mov.w	r9, #0
 80033e0:	ea58 0309 	orrs.w	r3, r8, r9
 80033e4:	d042      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80033e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d823      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80033f0:	a201      	add	r2, pc, #4	@ (adr r2, 80033f8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003441 	.word	0x08003441
 80033fc:	08003411 	.word	0x08003411
 8003400:	08003425 	.word	0x08003425
 8003404:	08003441 	.word	0x08003441
 8003408:	08003441 	.word	0x08003441
 800340c:	08003441 	.word	0x08003441
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003410:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003414:	3308      	adds	r3, #8
 8003416:	4618      	mov	r0, r3
 8003418:	f004 feda 	bl	80081d0 <RCCEx_PLL2_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003422:	e00e      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003428:	3330      	adds	r3, #48	@ 0x30
 800342a:	4618      	mov	r0, r3
 800342c:	f004 ff68 	bl	8008300 <RCCEx_PLL3_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003436:	e004      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800343e:	e000      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003442:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800344a:	4ba9      	ldr	r3, [pc, #676]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800344c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003450:	f023 0107 	bic.w	r1, r3, #7
 8003454:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	4aa5      	ldr	r2, [pc, #660]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800345c:	430b      	orrs	r3, r1
 800345e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003462:	e003      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003468:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f002 0a02 	and.w	sl, r2, #2
 8003478:	f04f 0b00 	mov.w	fp, #0
 800347c:	ea5a 030b 	orrs.w	r3, sl, fp
 8003480:	f000 8088 	beq.w	8003594 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	2b28      	cmp	r3, #40	@ 0x28
 800348c:	d868      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800348e:	a201      	add	r2, pc, #4	@ (adr r2, 8003494 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003494:	08003569 	.word	0x08003569
 8003498:	08003561 	.word	0x08003561
 800349c:	08003561 	.word	0x08003561
 80034a0:	08003561 	.word	0x08003561
 80034a4:	08003561 	.word	0x08003561
 80034a8:	08003561 	.word	0x08003561
 80034ac:	08003561 	.word	0x08003561
 80034b0:	08003561 	.word	0x08003561
 80034b4:	08003539 	.word	0x08003539
 80034b8:	08003561 	.word	0x08003561
 80034bc:	08003561 	.word	0x08003561
 80034c0:	08003561 	.word	0x08003561
 80034c4:	08003561 	.word	0x08003561
 80034c8:	08003561 	.word	0x08003561
 80034cc:	08003561 	.word	0x08003561
 80034d0:	08003561 	.word	0x08003561
 80034d4:	0800354d 	.word	0x0800354d
 80034d8:	08003561 	.word	0x08003561
 80034dc:	08003561 	.word	0x08003561
 80034e0:	08003561 	.word	0x08003561
 80034e4:	08003561 	.word	0x08003561
 80034e8:	08003561 	.word	0x08003561
 80034ec:	08003561 	.word	0x08003561
 80034f0:	08003561 	.word	0x08003561
 80034f4:	08003569 	.word	0x08003569
 80034f8:	08003561 	.word	0x08003561
 80034fc:	08003561 	.word	0x08003561
 8003500:	08003561 	.word	0x08003561
 8003504:	08003561 	.word	0x08003561
 8003508:	08003561 	.word	0x08003561
 800350c:	08003561 	.word	0x08003561
 8003510:	08003561 	.word	0x08003561
 8003514:	08003569 	.word	0x08003569
 8003518:	08003561 	.word	0x08003561
 800351c:	08003561 	.word	0x08003561
 8003520:	08003561 	.word	0x08003561
 8003524:	08003561 	.word	0x08003561
 8003528:	08003561 	.word	0x08003561
 800352c:	08003561 	.word	0x08003561
 8003530:	08003561 	.word	0x08003561
 8003534:	08003569 	.word	0x08003569
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003538:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800353c:	3308      	adds	r3, #8
 800353e:	4618      	mov	r0, r3
 8003540:	f004 fe46 	bl	80081d0 <RCCEx_PLL2_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800354a:	e00e      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800354c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003550:	3330      	adds	r3, #48	@ 0x30
 8003552:	4618      	mov	r0, r3
 8003554:	f004 fed4 	bl	8008300 <RCCEx_PLL3_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800355e:	e004      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10c      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003572:	4b5f      	ldr	r3, [pc, #380]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003574:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003578:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800357c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003582:	4a5b      	ldr	r2, [pc, #364]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003584:	430b      	orrs	r3, r1
 8003586:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800358a:	e003      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003590:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f002 0304 	and.w	r3, r2, #4
 80035a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80035aa:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80035ae:	460b      	mov	r3, r1
 80035b0:	4313      	orrs	r3, r2
 80035b2:	d04e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80035b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035be:	d02c      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80035c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035c4:	d825      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80035c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ca:	d028      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d0:	d81f      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80035d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80035d4:	d025      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80035d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80035d8:	d81b      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80035da:	2b80      	cmp	r3, #128	@ 0x80
 80035dc:	d00f      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x272>
 80035de:	2b80      	cmp	r3, #128	@ 0x80
 80035e0:	d817      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01f      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80035e6:	2b40      	cmp	r3, #64	@ 0x40
 80035e8:	d113      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ee:	3308      	adds	r3, #8
 80035f0:	4618      	mov	r0, r3
 80035f2:	f004 fded 	bl	80081d0 <RCCEx_PLL2_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80035fc:	e014      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003602:	3330      	adds	r3, #48	@ 0x30
 8003604:	4618      	mov	r0, r3
 8003606:	f004 fe7b 	bl	8008300 <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003610:	e00a      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800361a:	bf00      	nop
 800361c:	e004      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800361e:	bf00      	nop
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003628:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10c      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003630:	4b2f      	ldr	r3, [pc, #188]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003632:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003636:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800363a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800363e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003640:	4a2b      	ldr	r2, [pc, #172]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003642:	430b      	orrs	r3, r1
 8003644:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800364e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003652:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f002 0308 	and.w	r3, r2, #8
 800365e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003668:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800366c:	460b      	mov	r3, r1
 800366e:	4313      	orrs	r3, r2
 8003670:	d056      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003672:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003678:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800367c:	d031      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800367e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003682:	d82a      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003688:	d02d      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800368a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368e:	d824      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003690:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003694:	d029      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003696:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800369a:	d81e      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a0:	d011      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a6:	d818      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d023      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036b0:	d113      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036b6:	3308      	adds	r3, #8
 80036b8:	4618      	mov	r0, r3
 80036ba:	f004 fd89 	bl	80081d0 <RCCEx_PLL2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80036c4:	e017      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036ca:	3330      	adds	r3, #48	@ 0x30
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 fe17 	bl	8008300 <RCCEx_PLL3_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80036d8:	e00d      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80036e0:	e009      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80036e2:	bf00      	nop
 80036e4:	e007      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80036e6:	bf00      	nop
 80036e8:	e005      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80036ea:	bf00      	nop
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80036ee:	bf00      	nop
 80036f0:	44020c00 	.word	0x44020c00
        break;
 80036f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10c      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80036fe:	4bbb      	ldr	r3, [pc, #748]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003704:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003708:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800370c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800370e:	4ab7      	ldr	r2, [pc, #732]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003710:	430b      	orrs	r3, r1
 8003712:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003716:	e003      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800371c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003720:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f002 0310 	and.w	r3, r2, #16
 800372c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003730:	2300      	movs	r3, #0
 8003732:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003736:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800373a:	460b      	mov	r3, r1
 800373c:	4313      	orrs	r3, r2
 800373e:	d053      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003740:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003746:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800374a:	d031      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800374c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003750:	d82a      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003756:	d02d      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375c:	d824      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800375e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003762:	d029      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003764:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003768:	d81e      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376e:	d011      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003774:	d818      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d020      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x430>
 800377a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377e:	d113      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003784:	3308      	adds	r3, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f004 fd22 	bl	80081d0 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003792:	e014      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003794:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003798:	3330      	adds	r3, #48	@ 0x30
 800379a:	4618      	mov	r0, r3
 800379c:	f004 fdb0 	bl	8008300 <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80037a6:	e00a      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037ae:	e006      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80037b0:	bf00      	nop
 80037b2:	e004      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80037b4:	bf00      	nop
 80037b6:	e002      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80037b8:	bf00      	nop
 80037ba:	e000      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80037bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80037c6:	4b89      	ldr	r3, [pc, #548]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80037c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d6:	4a85      	ldr	r2, [pc, #532]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80037d8:	430b      	orrs	r3, r1
 80037da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037de:	e003      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f002 0320 	and.w	r3, r2, #32
 80037f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80037fe:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8003802:	460b      	mov	r3, r1
 8003804:	4313      	orrs	r3, r2
 8003806:	d053      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003808:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003812:	d031      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003814:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003818:	d82a      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800381a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800381e:	d02d      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003824:	d824      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003826:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800382a:	d029      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800382c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003830:	d81e      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003836:	d011      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800383c:	d818      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d020      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003846:	d113      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800384c:	3308      	adds	r3, #8
 800384e:	4618      	mov	r0, r3
 8003850:	f004 fcbe 	bl	80081d0 <RCCEx_PLL2_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800385a:	e014      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800385c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003860:	3330      	adds	r3, #48	@ 0x30
 8003862:	4618      	mov	r0, r3
 8003864:	f004 fd4c 	bl	8008300 <RCCEx_PLL3_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800386e:	e00a      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003876:	e006      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003878:	bf00      	nop
 800387a:	e004      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800387c:	bf00      	nop
 800387e:	e002      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003880:	bf00      	nop
 8003882:	e000      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003886:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800388e:	4b57      	ldr	r3, [pc, #348]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003894:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003898:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	4a53      	ldr	r2, [pc, #332]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80038a0:	430b      	orrs	r3, r1
 80038a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038a6:	e003      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80038bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80038c6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d053      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80038d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80038da:	d031      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80038dc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80038e0:	d82a      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80038e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038e6:	d02d      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80038e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ec:	d824      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80038ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038f2:	d029      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80038f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038f8:	d81e      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80038fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038fe:	d011      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003900:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003904:	d818      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d020      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800390a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800390e:	d113      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003914:	3308      	adds	r3, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f004 fc5a 	bl	80081d0 <RCCEx_PLL2_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003922:	e014      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003924:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003928:	3330      	adds	r3, #48	@ 0x30
 800392a:	4618      	mov	r0, r3
 800392c:	f004 fce8 	bl	8008300 <RCCEx_PLL3_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003936:	e00a      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800393e:	e006      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003940:	bf00      	nop
 8003942:	e004      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003944:	bf00      	nop
 8003946:	e002      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003948:	bf00      	nop
 800394a:	e000      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800394c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003956:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800395c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003966:	4a21      	ldr	r2, [pc, #132]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003968:	430b      	orrs	r3, r1
 800396a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003974:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003978:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003984:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800398e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d055      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800399c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800399e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80039a2:	d033      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x680>
 80039a4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80039a8:	d82c      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80039aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039ae:	d02f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80039b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039b4:	d826      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80039b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039ba:	d02b      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80039bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039c0:	d820      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80039c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c6:	d013      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039cc:	d81a      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d022      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80039d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039d6:	d115      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039dc:	3308      	adds	r3, #8
 80039de:	4618      	mov	r0, r3
 80039e0:	f004 fbf6 	bl	80081d0 <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80039ea:	e016      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80039ec:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039f4:	3330      	adds	r3, #48	@ 0x30
 80039f6:	4618      	mov	r0, r3
 80039f8:	f004 fc82 	bl	8008300 <RCCEx_PLL3_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003a02:	e00a      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a0a:	e006      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003a0c:	bf00      	nop
 8003a0e:	e004      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003a10:	bf00      	nop
 8003a12:	e002      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003a22:	4bbb      	ldr	r3, [pc, #748]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a28:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a32:	4ab7      	ldr	r2, [pc, #732]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a3a:	e003      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a40:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003a50:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003a5a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4313      	orrs	r3, r2
 8003a62:	d053      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a6a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a6e:	d031      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003a70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a74:	d82a      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003a76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a7a:	d02d      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a80:	d824      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003a82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a86:	d029      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003a88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a8c:	d81e      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a92:	d011      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a98:	d818      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d020      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aa2:	d113      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 fb90 	bl	80081d0 <RCCEx_PLL2_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003abc:	3330      	adds	r3, #48	@ 0x30
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 fc1e 	bl	8008300 <RCCEx_PLL3_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ad2:	e006      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003ad4:	bf00      	nop
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003ad8:	bf00      	nop
 8003ada:	e002      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003adc:	bf00      	nop
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003aea:	4b89      	ldr	r3, [pc, #548]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003af0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003afa:	4a85      	ldr	r2, [pc, #532]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b02:	e003      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003b18:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003b22:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003b26:	460b      	mov	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	d055      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003b2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b34:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003b38:	d031      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003b3a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003b3e:	d82a      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b44:	d02d      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b4a:	d824      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003b4c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003b50:	d029      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003b52:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003b56:	d81e      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003b58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b5c:	d011      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b62:	d818      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b6c:	d113      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b72:	3308      	adds	r3, #8
 8003b74:	4618      	mov	r0, r3
 8003b76:	f004 fb2b 	bl	80081d0 <RCCEx_PLL2_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003b80:	e014      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b86:	3330      	adds	r3, #48	@ 0x30
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f004 fbb9 	bl	8008300 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003b94:	e00a      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b9c:	e006      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003b9e:	bf00      	nop
 8003ba0:	e004      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003ba2:	bf00      	nop
 8003ba4:	e002      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003bb4:	4b56      	ldr	r3, [pc, #344]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003bb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003bba:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc6:	4a52      	ldr	r2, [pc, #328]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003bce:	e003      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bd4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003be4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003bee:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d044      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d823      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003c04:	a201      	add	r2, pc, #4	@ (adr r2, 8003c0c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c55 	.word	0x08003c55
 8003c10:	08003c25 	.word	0x08003c25
 8003c14:	08003c39 	.word	0x08003c39
 8003c18:	08003c55 	.word	0x08003c55
 8003c1c:	08003c55 	.word	0x08003c55
 8003c20:	08003c55 	.word	0x08003c55
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c28:	3308      	adds	r3, #8
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 fad0 	bl	80081d0 <RCCEx_PLL2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003c36:	e00e      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c3c:	3330      	adds	r3, #48	@ 0x30
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f004 fb5e 	bl	8008300 <RCCEx_PLL3_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10d      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003c60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c64:	f023 0107 	bic.w	r1, r3, #7
 8003c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c70:	4a27      	ldr	r2, [pc, #156]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003c78:	e003      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c98:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	d04f      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003ca2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	2b50      	cmp	r3, #80	@ 0x50
 8003cac:	d029      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003cae:	2b50      	cmp	r3, #80	@ 0x50
 8003cb0:	d823      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003cb2:	2b40      	cmp	r3, #64	@ 0x40
 8003cb4:	d027      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003cb6:	2b40      	cmp	r3, #64	@ 0x40
 8003cb8:	d81f      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003cba:	2b30      	cmp	r3, #48	@ 0x30
 8003cbc:	d025      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003cbe:	2b30      	cmp	r3, #48	@ 0x30
 8003cc0:	d81b      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d00f      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d817      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d022      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	d113      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f004 fa79 	bl	80081d0 <RCCEx_PLL2_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003ce4:	e017      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ce6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cea:	3330      	adds	r3, #48	@ 0x30
 8003cec:	4618      	mov	r0, r3
 8003cee:	f004 fb07 	bl	8008300 <RCCEx_PLL3_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003cf8:	e00d      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d00:	e009      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003d02:	bf00      	nop
 8003d04:	e007      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003d06:	bf00      	nop
 8003d08:	e005      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e003      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003d0e:	bf00      	nop
 8003d10:	44020c00 	.word	0x44020c00
        break;
 8003d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10d      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003d1e:	4baf      	ldr	r3, [pc, #700]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003d24:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	4aaa      	ldr	r2, [pc, #680]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d32:	430b      	orrs	r3, r1
 8003d34:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003d38:	e003      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003d58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	d055      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d6a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003d6e:	d031      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003d70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003d74:	d82a      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003d76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d7a:	d02d      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003d7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d80:	d824      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003d82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d86:	d029      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003d88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d8c:	d81e      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003d8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d92:	d011      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003d94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d98:	d818      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d020      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003da2:	d113      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003da4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003da8:	3308      	adds	r3, #8
 8003daa:	4618      	mov	r0, r3
 8003dac:	f004 fa10 	bl	80081d0 <RCCEx_PLL2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003db6:	e014      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dbc:	3330      	adds	r3, #48	@ 0x30
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 fa9e 	bl	8008300 <RCCEx_PLL3_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003dca:	e00a      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003dd2:	e006      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003dd4:	bf00      	nop
 8003dd6:	e004      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003dd8:	bf00      	nop
 8003dda:	e002      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003ddc:	bf00      	nop
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003dea:	4b7c      	ldr	r3, [pc, #496]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003df0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003df4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dfc:	4a77      	ldr	r2, [pc, #476]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d03d      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e3a:	d01b      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003e3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e40:	d814      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003e42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e46:	d017      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e4c:	d80e      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d014      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e56:	d109      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e5c:	3330      	adds	r3, #48	@ 0x30
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f004 fa4e 	bl	8008300 <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003e6a:	e008      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003e74:	bf00      	nop
 8003e76:	e002      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10d      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003e86:	4b55      	ldr	r3, [pc, #340]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e8c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e98:	4a50      	ldr	r2, [pc, #320]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ea0:	e003      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ea6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ec0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	d03d      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003eca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ed6:	d01b      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003ed8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003edc:	d814      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003ede:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ee2:	d017      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003ee4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ee8:	d80e      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d014      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003eee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ef2:	d109      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ef4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ef8:	3330      	adds	r3, #48	@ 0x30
 8003efa:	4618      	mov	r0, r3
 8003efc:	f004 fa00 	bl	8008300 <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003f06:	e008      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f0e:	e004      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003f10:	bf00      	nop
 8003f12:	e002      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003f14:	bf00      	nop
 8003f16:	e000      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10d      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003f22:	4b2e      	ldr	r3, [pc, #184]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003f24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f28:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f34:	4a29      	ldr	r2, [pc, #164]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003f36:	430b      	orrs	r3, r1
 8003f38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003f52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003f5c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d040      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003f66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f72:	d01b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003f74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f78:	d814      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003f7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f7e:	d017      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003f80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f84:	d80e      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d014      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f8e:	d109      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f94:	3330      	adds	r3, #48	@ 0x30
 8003f96:	4618      	mov	r0, r3
 8003f98:	f004 f9b2 	bl	8008300 <RCCEx_PLL3_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003faa:	e004      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003fac:	bf00      	nop
 8003fae:	e002      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d110      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003fbe:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003fc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fc4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd0:	4a02      	ldr	r2, [pc, #8]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003fda:	bf00      	nop
 8003fdc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fe4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ffe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d03d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800400c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004010:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004014:	d01b      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004016:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800401a:	d814      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800401c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004020:	d017      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004022:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004026:	d80e      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d014      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800402c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004030:	d109      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004032:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004036:	3330      	adds	r3, #48	@ 0x30
 8004038:	4618      	mov	r0, r3
 800403a:	f004 f961 	bl	8008300 <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004044:	e008      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800404c:	e004      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004058:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004060:	4bbe      	ldr	r3, [pc, #760]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004062:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004066:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800406a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800406e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004072:	4aba      	ldr	r2, [pc, #744]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004074:	430b      	orrs	r3, r1
 8004076:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004080:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004084:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004090:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800409a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d035      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80040a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040b0:	d015      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80040b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040b6:	d80e      	bhi.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d012      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80040bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040c0:	d109      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040c6:	3330      	adds	r3, #48	@ 0x30
 80040c8:	4618      	mov	r0, r3
 80040ca:	f004 f919 	bl	8008300 <RCCEx_PLL3_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80040dc:	e002      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80040e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10d      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80040ec:	4b9b      	ldr	r3, [pc, #620]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80040ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040f2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80040f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040fe:	4a97      	ldr	r2, [pc, #604]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004100:	430b      	orrs	r3, r1
 8004102:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800410c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	2100      	movs	r1, #0
 800411a:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800411e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004122:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004126:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800412a:	460b      	mov	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004130:	4b8a      	ldr	r3, [pc, #552]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	4a89      	ldr	r2, [pc, #548]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004136:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800413a:	61d3      	str	r3, [r2, #28]
 800413c:	4b87      	ldr	r3, [pc, #540]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800413e:	69d9      	ldr	r1, [r3, #28]
 8004140:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004144:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004148:	4a84      	ldr	r2, [pc, #528]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800414a:	430b      	orrs	r3, r1
 800414c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800414e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800415a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800415e:	2300      	movs	r3, #0
 8004160:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004164:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004168:	460b      	mov	r3, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	d055      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800416e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004172:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004176:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800417a:	d031      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800417c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004180:	d82a      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004186:	d02d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418c:	d824      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800418e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004192:	d029      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004198:	d81e      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800419a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419e:	d011      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a4:	d818      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d020      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ae:	d113      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041b4:	3308      	adds	r3, #8
 80041b6:	4618      	mov	r0, r3
 80041b8:	f004 f80a 	bl	80081d0 <RCCEx_PLL2_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80041c2:	e014      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041c8:	3330      	adds	r3, #48	@ 0x30
 80041ca:	4618      	mov	r0, r3
 80041cc:	f004 f898 	bl	8008300 <RCCEx_PLL3_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80041d6:	e00a      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80041de:	e006      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80041e0:	bf00      	nop
 80041e2:	e004      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80041e4:	bf00      	nop
 80041e6:	e002      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80041e8:	bf00      	nop
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80041ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80041f6:	4b59      	ldr	r3, [pc, #356]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80041f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80041fc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004200:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004208:	4a54      	ldr	r2, [pc, #336]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800420a:	430b      	orrs	r3, r1
 800420c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004210:	e003      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004212:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004216:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800421a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800422a:	2300      	movs	r3, #0
 800422c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004230:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004234:	460b      	mov	r3, r1
 8004236:	4313      	orrs	r3, r2
 8004238:	d055      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800423a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800423e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004242:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004246:	d031      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004248:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800424c:	d82a      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800424e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004252:	d02d      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004258:	d824      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800425a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800425e:	d029      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004260:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004264:	d81e      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800426a:	d011      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800426c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004270:	d818      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d020      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427a:	d113      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800427c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004280:	3308      	adds	r3, #8
 8004282:	4618      	mov	r0, r3
 8004284:	f003 ffa4 	bl	80081d0 <RCCEx_PLL2_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800428e:	e014      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004290:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004294:	3330      	adds	r3, #48	@ 0x30
 8004296:	4618      	mov	r0, r3
 8004298:	f004 f832 	bl	8008300 <RCCEx_PLL3_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80042a2:	e00a      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042aa:	e006      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80042ac:	bf00      	nop
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80042b0:	bf00      	nop
 80042b2:	e002      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80042b4:	bf00      	nop
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80042b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10d      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80042c2:	4b26      	ldr	r3, [pc, #152]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80042c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80042c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80042cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042d4:	4a21      	ldr	r2, [pc, #132]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80042d6:	430b      	orrs	r3, r1
 80042d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80042dc:	e003      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80042e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	2100      	movs	r1, #0
 80042f0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004300:	460b      	mov	r3, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	d057      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004306:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800430a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800430e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004312:	d033      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004318:	d82c      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800431a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800431e:	d02f      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004320:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004324:	d826      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004326:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800432a:	d02b      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800432c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004330:	d820      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004336:	d013      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800433c:	d81a      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d022      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004346:	d115      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004348:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800434c:	3308      	adds	r3, #8
 800434e:	4618      	mov	r0, r3
 8004350:	f003 ff3e 	bl	80081d0 <RCCEx_PLL2_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800435a:	e016      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800435c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004364:	3330      	adds	r3, #48	@ 0x30
 8004366:	4618      	mov	r0, r3
 8004368:	f003 ffca 	bl	8008300 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004372:	e00a      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800437a:	e006      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800437c:	bf00      	nop
 800437e:	e004      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004380:	bf00      	nop
 8004382:	e002      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004384:	bf00      	nop
 8004386:	e000      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10d      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004392:	4bbb      	ldr	r3, [pc, #748]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004394:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004398:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800439c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80043a4:	4ab6      	ldr	r2, [pc, #728]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043a6:	430b      	orrs	r3, r1
 80043a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80043ac:	e003      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80043b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	2100      	movs	r1, #0
 80043c0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80043c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80043cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4313      	orrs	r3, r2
 80043d4:	d055      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80043d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043de:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80043e2:	d031      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80043e4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80043e8:	d82a      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80043ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ee:	d02d      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80043f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043f4:	d824      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80043f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043fa:	d029      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80043fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004400:	d81e      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004402:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004406:	d011      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004408:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800440c:	d818      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d020      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004416:	d113      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800441c:	3308      	adds	r3, #8
 800441e:	4618      	mov	r0, r3
 8004420:	f003 fed6 	bl	80081d0 <RCCEx_PLL2_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800442a:	e014      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800442c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004430:	3330      	adds	r3, #48	@ 0x30
 8004432:	4618      	mov	r0, r3
 8004434:	f003 ff64 	bl	8008300 <RCCEx_PLL3_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800443e:	e00a      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004446:	e006      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004448:	bf00      	nop
 800444a:	e004      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800444c:	bf00      	nop
 800444e:	e002      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004456:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800445e:	4b88      	ldr	r3, [pc, #544]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004460:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004464:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800446c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004470:	4a83      	ldr	r2, [pc, #524]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004472:	430b      	orrs	r3, r1
 8004474:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004478:	e003      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800447e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004482:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	2100      	movs	r1, #0
 800448c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004498:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800449c:	460b      	mov	r3, r1
 800449e:	4313      	orrs	r3, r2
 80044a0:	d055      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80044a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044aa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80044ae:	d031      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80044b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80044b4:	d82a      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80044b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044ba:	d02d      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80044bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044c0:	d824      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80044c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044c6:	d029      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80044c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044cc:	d81e      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80044ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044d2:	d011      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80044d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044d8:	d818      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80044de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044e2:	d113      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044e8:	3308      	adds	r3, #8
 80044ea:	4618      	mov	r0, r3
 80044ec:	f003 fe70 	bl	80081d0 <RCCEx_PLL2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80044f6:	e014      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044fc:	3330      	adds	r3, #48	@ 0x30
 80044fe:	4618      	mov	r0, r3
 8004500:	f003 fefe 	bl	8008300 <RCCEx_PLL3_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800450a:	e00a      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004512:	e006      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004514:	bf00      	nop
 8004516:	e004      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004518:	bf00      	nop
 800451a:	e002      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800451c:	bf00      	nop
 800451e:	e000      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004522:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10d      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800452a:	4b55      	ldr	r3, [pc, #340]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800452c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004530:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004538:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800453c:	4a50      	ldr	r2, [pc, #320]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800453e:	430b      	orrs	r3, r1
 8004540:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004544:	e003      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004546:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800454a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800454e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	2100      	movs	r1, #0
 8004558:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004564:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004568:	460b      	mov	r3, r1
 800456a:	4313      	orrs	r3, r2
 800456c:	d055      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800456e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004572:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800457a:	d031      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800457c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004580:	d82a      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004586:	d02d      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458c:	d824      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800458e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004592:	d029      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004594:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004598:	d81e      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800459a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800459e:	d011      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80045a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045a4:	d818      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d020      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80045aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ae:	d113      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045b4:	3308      	adds	r3, #8
 80045b6:	4618      	mov	r0, r3
 80045b8:	f003 fe0a 	bl	80081d0 <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80045c2:	e014      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045c8:	3330      	adds	r3, #48	@ 0x30
 80045ca:	4618      	mov	r0, r3
 80045cc:	f003 fe98 	bl	8008300 <RCCEx_PLL3_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80045d6:	e00a      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045de:	e006      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80045e0:	bf00      	nop
 80045e2:	e004      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80045e4:	bf00      	nop
 80045e6:	e002      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80045e8:	bf00      	nop
 80045ea:	e000      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80045ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10d      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80045f6:	4b22      	ldr	r3, [pc, #136]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80045f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80045fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004604:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004608:	4a1d      	ldr	r2, [pc, #116]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800460a:	430b      	orrs	r3, r1
 800460c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004610:	e003      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004612:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004616:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800461a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004630:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d055      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800463a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800463e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004642:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004646:	d035      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004648:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800464c:	d82e      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800464e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004652:	d031      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004654:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004658:	d828      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800465a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800465e:	d01b      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004664:	d822      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800466a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800466e:	d009      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004670:	e01c      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004672:	4b03      	ldr	r3, [pc, #12]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004676:	4a02      	ldr	r2, [pc, #8]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800467e:	e01c      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004680:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004684:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004688:	3308      	adds	r3, #8
 800468a:	4618      	mov	r0, r3
 800468c:	f003 fda0 	bl	80081d0 <RCCEx_PLL2_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004696:	e010      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800469c:	3330      	adds	r3, #48	@ 0x30
 800469e:	4618      	mov	r0, r3
 80046a0:	f003 fe2e 	bl	8008300 <RCCEx_PLL3_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80046aa:	e006      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046b2:	e002      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80046b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10d      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80046c2:	4bc3      	ldr	r3, [pc, #780]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80046cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80046d4:	4abe      	ldr	r2, [pc, #760]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046d6:	430b      	orrs	r3, r1
 80046d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046dc:	e003      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80046e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80046f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004700:	460b      	mov	r3, r1
 8004702:	4313      	orrs	r3, r2
 8004704:	d051      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004706:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800470a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800470e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004712:	d033      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004718:	d82c      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800471a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800471e:	d02d      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004720:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004724:	d826      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800472a:	d019      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800472c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004730:	d820      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004736:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800473a:	d007      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800473c:	e01a      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473e:	4ba4      	ldr	r3, [pc, #656]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	4aa3      	ldr	r2, [pc, #652]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004748:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800474a:	e018      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800474c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004750:	3308      	adds	r3, #8
 8004752:	4618      	mov	r0, r3
 8004754:	f003 fd3c 	bl	80081d0 <RCCEx_PLL2_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800475e:	e00e      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004764:	3330      	adds	r3, #48	@ 0x30
 8004766:	4618      	mov	r0, r3
 8004768:	f003 fdca 	bl	8008300 <RCCEx_PLL3_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004772:	e004      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800477c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10d      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004786:	4b92      	ldr	r3, [pc, #584]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800478c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004790:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004794:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004798:	4a8d      	ldr	r2, [pc, #564]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800479a:	430b      	orrs	r3, r1
 800479c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80047a0:	e003      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80047aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047b8:	2300      	movs	r3, #0
 80047ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d032      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80047c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	d80f      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d211      	bcs.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d911      	bls.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d109      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047e2:	3308      	adds	r3, #8
 80047e4:	4618      	mov	r0, r3
 80047e6:	f003 fcf3 	bl	80081d0 <RCCEx_PLL2_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047f0:	e006      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047f8:	e002      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80047fa:	bf00      	nop
 80047fc:	e000      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80047fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004800:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004808:	4b71      	ldr	r3, [pc, #452]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800480a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800480e:	f023 0107 	bic.w	r1, r3, #7
 8004812:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004816:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800481a:	4a6d      	ldr	r2, [pc, #436]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800481c:	430b      	orrs	r3, r1
 800481e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004822:	e003      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004828:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800482c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	2100      	movs	r1, #0
 8004836:	6739      	str	r1, [r7, #112]	@ 0x70
 8004838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483c:	677b      	str	r3, [r7, #116]	@ 0x74
 800483e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004842:	460b      	mov	r3, r1
 8004844:	4313      	orrs	r3, r2
 8004846:	d024      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800484c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004854:	2b08      	cmp	r3, #8
 8004856:	d005      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800485e:	e002      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004860:	bf00      	nop
 8004862:	e000      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004866:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800486e:	4b58      	ldr	r3, [pc, #352]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004874:	f023 0108 	bic.w	r1, r3, #8
 8004878:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800487c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004880:	4a53      	ldr	r2, [pc, #332]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004882:	430b      	orrs	r3, r1
 8004884:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004888:	e003      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800488e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004892:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800489e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048a0:	2300      	movs	r3, #0
 80048a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048a8:	460b      	mov	r3, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f000 80b9 	beq.w	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80048b0:	4b48      	ldr	r3, [pc, #288]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	4a47      	ldr	r2, [pc, #284]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048bc:	f7fc fd72 	bl	80013a4 <HAL_GetTick>
 80048c0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80048c4:	e00b      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c6:	f7fc fd6d 	bl	80013a4 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d903      	bls.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048dc:	e005      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80048de:	4b3d      	ldr	r3, [pc, #244]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0ed      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80048ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f040 8093 	bne.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048f4:	4b36      	ldr	r3, [pc, #216]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80048f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fe:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004902:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d023      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800490a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800490e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8004912:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004916:	4293      	cmp	r3, r2
 8004918:	d01b      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800491a:	4b2d      	ldr	r3, [pc, #180]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800491c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004924:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004928:	4b29      	ldr	r3, [pc, #164]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800492a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800492e:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004934:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004938:	4b25      	ldr	r3, [pc, #148]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800493a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800493e:	4a24      	ldr	r2, [pc, #144]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004948:	4a21      	ldr	r2, [pc, #132]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800494a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800494e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004952:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d019      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495e:	f7fc fd21 	bl	80013a4 <HAL_GetTick>
 8004962:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004966:	e00d      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004968:	f7fc fd1c 	bl	80013a4 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004978:	429a      	cmp	r2, r3
 800497a:	d903      	bls.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8004982:	e006      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004984:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0ea      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004992:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004996:	2b00      	cmp	r3, #0
 8004998:	d13a      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800499a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800499e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80049a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049aa:	d115      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80049ac:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80049b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80049c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80049c6:	4a02      	ldr	r2, [pc, #8]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80049c8:	430b      	orrs	r3, r1
 80049ca:	61d3      	str	r3, [r2, #28]
 80049cc:	e00a      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80049ce:	bf00      	nop
 80049d0:	44020c00 	.word	0x44020c00
 80049d4:	44020800 	.word	0x44020800
 80049d8:	4b9f      	ldr	r3, [pc, #636]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	4a9e      	ldr	r2, [pc, #632]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80049e2:	61d3      	str	r3, [r2, #28]
 80049e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ea:	4a9b      	ldr	r2, [pc, #620]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049f4:	4b98      	ldr	r3, [pc, #608]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049f6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80049fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049fe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a06:	4a94      	ldr	r2, [pc, #592]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a0e:	e008      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004a18:	e003      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004a2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a30:	2300      	movs	r3, #0
 8004a32:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	d035      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004a3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a42:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004a46:	2b30      	cmp	r3, #48	@ 0x30
 8004a48:	d014      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004a4a:	2b30      	cmp	r3, #48	@ 0x30
 8004a4c:	d80e      	bhi.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d012      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d80a      	bhi.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d010      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d106      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	4a7d      	ldr	r2, [pc, #500]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a68:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a6a:	e008      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a72:	e004      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004a74:	bf00      	nop
 8004a76:	e002      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10d      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004a86:	4b74      	ldr	r3, [pc, #464]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a94:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004a98:	4a6f      	ldr	r2, [pc, #444]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004aa6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ab8:	2300      	movs	r3, #0
 8004aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004abc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	d033      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8004ad2:	2b40      	cmp	r3, #64	@ 0x40
 8004ad4:	d007      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8004ad6:	e010      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad8:	4b5f      	ldr	r3, [pc, #380]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	4a5e      	ldr	r2, [pc, #376]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004ae4:	e00d      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aea:	3308      	adds	r3, #8
 8004aec:	4618      	mov	r0, r3
 8004aee:	f003 fb6f 	bl	80081d0 <RCCEx_PLL2_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004af8:	e003      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10d      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004b0a:	4b53      	ldr	r3, [pc, #332]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004b0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b10:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b18:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004b1c:	4a4e      	ldr	r2, [pc, #312]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b24:	e003      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b2a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b40:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d033      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b4e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004b56:	2b80      	cmp	r3, #128	@ 0x80
 8004b58:	d007      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004b5a:	e010      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	4a3d      	ldr	r2, [pc, #244]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b66:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004b68:	e00d      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b6e:	3308      	adds	r3, #8
 8004b70:	4618      	mov	r0, r3
 8004b72:	f003 fb2d 	bl	80081d0 <RCCEx_PLL2_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004b7c:	e003      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10d      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004b8e:	4b32      	ldr	r3, [pc, #200]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004b90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b94:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b9c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ba8:	e003      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004baa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	d04a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d827      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004bda:	a201      	add	r2, pc, #4	@ (adr r2, 8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004bf5 	.word	0x08004bf5
 8004be4:	08004c03 	.word	0x08004c03
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c33 	.word	0x08004c33
 8004bf0:	08004c33 	.word	0x08004c33
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf4:	4b18      	ldr	r3, [pc, #96]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bfe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004c00:	e018      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c06:	3308      	adds	r3, #8
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f003 fae1 	bl	80081d0 <RCCEx_PLL2_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004c14:	e00e      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c1a:	3330      	adds	r3, #48	@ 0x30
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f003 fb6f 	bl	8008300 <RCCEx_PLL3_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004c28:	e004      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c30:	e000      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c34:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10f      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c42:	f023 0107 	bic.w	r1, r3, #7
 8004c46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c4e:	4a02      	ldr	r2, [pc, #8]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c50:	430b      	orrs	r3, r1
 8004c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c56:	e005      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004c58:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c72:	2300      	movs	r3, #0
 8004c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f000 8081 	beq.w	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d85f      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c94:	08004d19 	.word	0x08004d19
 8004c98:	08004d4f 	.word	0x08004d4f
 8004c9c:	08004d4f 	.word	0x08004d4f
 8004ca0:	08004d4f 	.word	0x08004d4f
 8004ca4:	08004d4f 	.word	0x08004d4f
 8004ca8:	08004d4f 	.word	0x08004d4f
 8004cac:	08004d4f 	.word	0x08004d4f
 8004cb0:	08004d4f 	.word	0x08004d4f
 8004cb4:	08004d27 	.word	0x08004d27
 8004cb8:	08004d4f 	.word	0x08004d4f
 8004cbc:	08004d4f 	.word	0x08004d4f
 8004cc0:	08004d4f 	.word	0x08004d4f
 8004cc4:	08004d4f 	.word	0x08004d4f
 8004cc8:	08004d4f 	.word	0x08004d4f
 8004ccc:	08004d4f 	.word	0x08004d4f
 8004cd0:	08004d4f 	.word	0x08004d4f
 8004cd4:	08004d3b 	.word	0x08004d3b
 8004cd8:	08004d4f 	.word	0x08004d4f
 8004cdc:	08004d4f 	.word	0x08004d4f
 8004ce0:	08004d4f 	.word	0x08004d4f
 8004ce4:	08004d4f 	.word	0x08004d4f
 8004ce8:	08004d4f 	.word	0x08004d4f
 8004cec:	08004d4f 	.word	0x08004d4f
 8004cf0:	08004d4f 	.word	0x08004d4f
 8004cf4:	08004d57 	.word	0x08004d57
 8004cf8:	08004d4f 	.word	0x08004d4f
 8004cfc:	08004d4f 	.word	0x08004d4f
 8004d00:	08004d4f 	.word	0x08004d4f
 8004d04:	08004d4f 	.word	0x08004d4f
 8004d08:	08004d4f 	.word	0x08004d4f
 8004d0c:	08004d4f 	.word	0x08004d4f
 8004d10:	08004d4f 	.word	0x08004d4f
 8004d14:	08004d57 	.word	0x08004d57
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d18:	4bab      	ldr	r3, [pc, #684]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1c:	4aaa      	ldr	r2, [pc, #680]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d22:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004d24:	e018      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f003 fa4f 	bl	80081d0 <RCCEx_PLL2_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004d38:	e00e      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d3e:	3330      	adds	r3, #48	@ 0x30
 8004d40:	4618      	mov	r0, r3
 8004d42:	f003 fadd 	bl	8008300 <RCCEx_PLL3_Config>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004d4c:	e004      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d54:	e000      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10d      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004d60:	4b99      	ldr	r3, [pc, #612]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d72:	4a95      	ldr	r2, [pc, #596]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d74:	430b      	orrs	r3, r1
 8004d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d7a:	e003      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d92:	2300      	movs	r3, #0
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	d04e      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dac:	d02e      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004db2:	d827      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004db4:	2bc0      	cmp	r3, #192	@ 0xc0
 8004db6:	d02b      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004db8:	2bc0      	cmp	r3, #192	@ 0xc0
 8004dba:	d823      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004dbc:	2b80      	cmp	r3, #128	@ 0x80
 8004dbe:	d017      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004dc0:	2b80      	cmp	r3, #128	@ 0x80
 8004dc2:	d81f      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d007      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004dcc:	e01a      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dce:	4b7e      	ldr	r3, [pc, #504]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd2:	4a7d      	ldr	r2, [pc, #500]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004dda:	e01a      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004de0:	3308      	adds	r3, #8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f003 f9f4 	bl	80081d0 <RCCEx_PLL2_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004dee:	e010      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df4:	3330      	adds	r3, #48	@ 0x30
 8004df6:	4618      	mov	r0, r3
 8004df8:	f003 fa82 	bl	8008300 <RCCEx_PLL3_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004e02:	e006      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e0a:	e002      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004e0c:	bf00      	nop
 8004e0e:	e000      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004e1a:	4b6b      	ldr	r3, [pc, #428]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e2c:	4a66      	ldr	r2, [pc, #408]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004e3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e54:	460b      	mov	r3, r1
 8004e56:	4313      	orrs	r3, r2
 8004e58:	d055      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004e5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004e62:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e66:	d031      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004e68:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e6c:	d82a      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e72:	d02d      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e78:	d824      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004e7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e7e:	d029      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004e80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e84:	d81e      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8a:	d011      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e90:	d818      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d020      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e9a:	d113      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f003 f994 	bl	80081d0 <RCCEx_PLL2_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004eae:	e014      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004eb4:	3330      	adds	r3, #48	@ 0x30
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f003 fa22 	bl	8008300 <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004ec2:	e00a      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004eca:	e006      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ecc:	bf00      	nop
 8004ece:	e004      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ed0:	bf00      	nop
 8004ed2:	e002      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10d      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004ee2:	4b39      	ldr	r3, [pc, #228]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ee8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ef0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004ef4:	4a34      	ldr	r2, [pc, #208]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004efc:	e003      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	d058      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004f22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f2e:	d031      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004f30:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f34:	d82a      	bhi.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f3a:	d02d      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f40:	d824      	bhi.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004f42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f46:	d029      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004f48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f4c:	d81e      	bhi.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f52:	d011      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f58:	d818      	bhi.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d020      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f62:	d113      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f68:	3308      	adds	r3, #8
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f003 f930 	bl	80081d0 <RCCEx_PLL2_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004f76:	e014      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f7c:	3330      	adds	r3, #48	@ 0x30
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f003 f9be 	bl	8008300 <RCCEx_PLL3_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f92:	e006      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004f94:	bf00      	nop
 8004f96:	e004      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004f98:	bf00      	nop
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004f9c:	bf00      	nop
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d110      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004faa:	4b07      	ldr	r3, [pc, #28]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fb0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fbc:	4902      	ldr	r1, [pc, #8]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004fc4:	e006      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004fc6:	bf00      	nop
 8004fc8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fd0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	6239      	str	r1, [r7, #32]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004fea:	460b      	mov	r3, r1
 8004fec:	4313      	orrs	r3, r2
 8004fee:	d055      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ff8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004ffc:	d031      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004ffe:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005002:	d82a      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005008:	d02d      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800500a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800500e:	d824      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005010:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005014:	d029      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005016:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800501a:	d81e      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005020:	d011      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005026:	d818      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d020      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800502c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005030:	d113      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005032:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005036:	3308      	adds	r3, #8
 8005038:	4618      	mov	r0, r3
 800503a:	f003 f8c9 	bl	80081d0 <RCCEx_PLL2_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005044:	e014      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005046:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800504a:	3330      	adds	r3, #48	@ 0x30
 800504c:	4618      	mov	r0, r3
 800504e:	f003 f957 	bl	8008300 <RCCEx_PLL3_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005058:	e00a      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005060:	e006      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005062:	bf00      	nop
 8005064:	e004      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005066:	bf00      	nop
 8005068:	e002      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800506a:	bf00      	nop
 800506c:	e000      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800506e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005070:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10d      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005078:	4b88      	ldr	r3, [pc, #544]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800507a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800507e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8005082:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800508a:	4984      	ldr	r1, [pc, #528]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005092:	e003      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005094:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005098:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800509c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a4:	2100      	movs	r1, #0
 80050a6:	61b9      	str	r1, [r7, #24]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80050b2:	460b      	mov	r3, r1
 80050b4:	4313      	orrs	r3, r2
 80050b6:	d03d      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80050b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d81c      	bhi.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80050c4:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	08005107 	.word	0x08005107
 80050d0:	080050dd 	.word	0x080050dd
 80050d4:	080050eb 	.word	0x080050eb
 80050d8:	08005107 	.word	0x08005107
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050dc:	4b6f      	ldr	r3, [pc, #444]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	4a6e      	ldr	r2, [pc, #440]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80050e8:	e00e      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ee:	3308      	adds	r3, #8
 80050f0:	4618      	mov	r0, r3
 80050f2:	f003 f86d 	bl	80081d0 <RCCEx_PLL2_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80050fc:	e004      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8005106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005108:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10d      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005110:	4b62      	ldr	r3, [pc, #392]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005112:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800511e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005122:	495e      	ldr	r1, [pc, #376]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005130:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	2100      	movs	r1, #0
 800513e:	6139      	str	r1, [r7, #16]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800514a:	460b      	mov	r3, r1
 800514c:	4313      	orrs	r3, r2
 800514e:	d03a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005150:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005154:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800515c:	d00e      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800515e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005162:	d815      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d017      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800516c:	d110      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516e:	4b4b      	ldr	r3, [pc, #300]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005172:	4a4a      	ldr	r2, [pc, #296]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005178:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800517a:	e00e      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800517c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005180:	3308      	adds	r3, #8
 8005182:	4618      	mov	r0, r3
 8005184:	f003 f824 	bl	80081d0 <RCCEx_PLL2_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800518e:	e004      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005196:	e000      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10d      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80051a2:	4b3e      	ldr	r3, [pc, #248]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80051a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051b4:	4939      	ldr	r1, [pc, #228]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80051bc:	e003      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	2100      	movs	r1, #0
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80051dc:	460b      	mov	r3, r1
 80051de:	4313      	orrs	r3, r2
 80051e0:	d038      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80051e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051ea:	2b30      	cmp	r3, #48	@ 0x30
 80051ec:	d01b      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80051ee:	2b30      	cmp	r3, #48	@ 0x30
 80051f0:	d815      	bhi.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d002      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d007      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80051fa:	e010      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051fc:	4b27      	ldr	r3, [pc, #156]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	4a26      	ldr	r2, [pc, #152]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005206:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005208:	e00e      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800520a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800520e:	3330      	adds	r3, #48	@ 0x30
 8005210:	4618      	mov	r0, r3
 8005212:	f003 f875 	bl	8008300 <RCCEx_PLL3_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800521c:	e004      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005224:	e000      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005228:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10d      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005230:	4b1a      	ldr	r3, [pc, #104]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005236:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800523a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800523e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005242:	4916      	ldr	r1, [pc, #88]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800524a:	e003      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005250:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005254:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	2100      	movs	r1, #0
 800525e:	6039      	str	r1, [r7, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	e9d7 1200 	ldrd	r1, r2, [r7]
 800526a:	460b      	mov	r3, r1
 800526c:	4313      	orrs	r3, r2
 800526e:	d00c      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005270:	4b0a      	ldr	r3, [pc, #40]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005276:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800527a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800527e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005282:	4906      	ldr	r1, [pc, #24]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800528a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800528e:	4618      	mov	r0, r3
 8005290:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8005294:	46bd      	mov	sp, r7
 8005296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529a:	bf00      	nop
 800529c:	44020c00 	.word	0x44020c00

080052a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b08b      	sub	sp, #44	@ 0x2c
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80052a8:	4bad      	ldr	r3, [pc, #692]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80052b2:	4bab      	ldr	r3, [pc, #684]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80052bc:	4ba8      	ldr	r3, [pc, #672]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	0a1b      	lsrs	r3, r3, #8
 80052c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052c6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80052c8:	4ba5      	ldr	r3, [pc, #660]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80052d2:	4ba3      	ldr	r3, [pc, #652]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	08db      	lsrs	r3, r3, #3
 80052d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8126 	beq.w	8005542 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d053      	beq.n	80053a4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d86f      	bhi.n	80053e2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d003      	beq.n	8005310 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d02b      	beq.n	8005366 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800530e:	e068      	b.n	80053e2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005310:	4b93      	ldr	r3, [pc, #588]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	4a92      	ldr	r2, [pc, #584]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	ee07 3a90 	vmov	s15, r3
 8005328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	ee07 3a90 	vmov	s15, r3
 8005340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005344:	ed97 6a04 	vldr	s12, [r7, #16]
 8005348:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005568 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800534c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005354:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005360:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005364:	e068      	b.n	8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005370:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800556c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a04 	vldr	s12, [r7, #16]
 8005386:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005568 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80053a2:	e049      	b.n	8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005570 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80053b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80053c4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005568 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80053c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80053e0:	e02a      	b.n	8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	08db      	lsrs	r3, r3, #3
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	4a5d      	ldr	r2, [pc, #372]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80053ee:	fa22 f303 	lsr.w	r3, r2, r3
 80053f2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a04 	vldr	s12, [r7, #16]
 800541a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005568 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005436:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005438:	4b49      	ldr	r3, [pc, #292]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005444:	d121      	bne.n	800548a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005446:	4b46      	ldr	r3, [pc, #280]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d017      	beq.n	8005482 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005452:	4b43      	ldr	r3, [pc, #268]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005456:	0a5b      	lsrs	r3, r3, #9
 8005458:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005464:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005468:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800546c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005478:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	e002      	b.n	8005490 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005490:	4b33      	ldr	r3, [pc, #204]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800549c:	d121      	bne.n	80054e2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800549e:	4b30      	ldr	r3, [pc, #192]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d017      	beq.n	80054da <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80054aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ae:	0c1b      	lsrs	r3, r3, #16
 80054b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b4:	ee07 3a90 	vmov	s15, r3
 80054b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80054bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80054c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80054c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	e006      	b.n	80054e8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	605a      	str	r2, [r3, #4]
 80054e0:	e002      	b.n	80054e8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054f4:	d121      	bne.n	800553a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80054f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d017      	beq.n	8005532 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005502:	4b17      	ldr	r3, [pc, #92]	@ (8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005506:	0e1b      	lsrs	r3, r3, #24
 8005508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800550c:	ee07 3a90 	vmov	s15, r3
 8005510:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005514:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005518:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800551c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005528:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005530:	e010      	b.n	8005554 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	609a      	str	r2, [r3, #8]
}
 8005538:	e00c      	b.n	8005554 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	e008      	b.n	8005554 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	609a      	str	r2, [r3, #8]
}
 8005554:	bf00      	nop
 8005556:	372c      	adds	r7, #44	@ 0x2c
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	44020c00 	.word	0x44020c00
 8005564:	03d09000 	.word	0x03d09000
 8005568:	46000000 	.word	0x46000000
 800556c:	4a742400 	.word	0x4a742400
 8005570:	4c3ebc20 	.word	0x4c3ebc20

08005574 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005574:	b480      	push	{r7}
 8005576:	b08b      	sub	sp, #44	@ 0x2c
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800557c:	4bad      	ldr	r3, [pc, #692]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005584:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005586:	4bab      	ldr	r3, [pc, #684]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005590:	4ba8      	ldr	r3, [pc, #672]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	0a1b      	lsrs	r3, r3, #8
 8005596:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800559a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800559c:	4ba5      	ldr	r3, [pc, #660]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80055a6:	4ba3      	ldr	r3, [pc, #652]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	08db      	lsrs	r3, r3, #3
 80055ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055be:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8126 	beq.w	8005816 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d053      	beq.n	8005678 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d86f      	bhi.n	80056b6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d003      	beq.n	80055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d02b      	beq.n	800563a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80055e2:	e068      	b.n	80056b6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055e4:	4b93      	ldr	r3, [pc, #588]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	08db      	lsrs	r3, r3, #3
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	4a92      	ldr	r2, [pc, #584]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005618:	ed97 6a04 	vldr	s12, [r7, #16]
 800561c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800562c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005634:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005638:	e068      	b.n	800570c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005644:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005656:	ed97 6a04 	vldr	s12, [r7, #16]
 800565a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800565e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800566a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800566e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005672:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005676:	e049      	b.n	800570c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005694:	ed97 6a04 	vldr	s12, [r7, #16]
 8005698:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800569c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80056b4:	e02a      	b.n	800570c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	08db      	lsrs	r3, r3, #3
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80056ee:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80056f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005706:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800570a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800570c:	4b49      	ldr	r3, [pc, #292]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005718:	d121      	bne.n	800575e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800571a:	4b46      	ldr	r3, [pc, #280]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d017      	beq.n	8005756 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005726:	4b43      	ldr	r3, [pc, #268]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572a:	0a5b      	lsrs	r3, r3, #9
 800572c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005730:	ee07 3a90 	vmov	s15, r3
 8005734:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005738:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800573c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005740:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	e006      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e002      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005764:	4b33      	ldr	r3, [pc, #204]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800576c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005770:	d121      	bne.n	80057b6 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005772:	4b30      	ldr	r3, [pc, #192]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d017      	beq.n	80057ae <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800577e:	4b2d      	ldr	r3, [pc, #180]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005782:	0c1b      	lsrs	r3, r3, #16
 8005784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005794:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005798:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800579c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	605a      	str	r2, [r3, #4]
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	605a      	str	r2, [r3, #4]
 80057b4:	e002      	b.n	80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057c8:	d121      	bne.n	800580e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80057ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d017      	beq.n	8005806 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80057d6:	4b17      	ldr	r3, [pc, #92]	@ (8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057da:	0e1b      	lsrs	r3, r3, #24
 80057dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e0:	ee07 3a90 	vmov	s15, r3
 80057e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80057e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80057f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80057f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005804:	e010      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	e00c      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	e008      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	609a      	str	r2, [r3, #8]
}
 8005828:	bf00      	nop
 800582a:	372c      	adds	r7, #44	@ 0x2c
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	44020c00 	.word	0x44020c00
 8005838:	03d09000 	.word	0x03d09000
 800583c:	46000000 	.word	0x46000000
 8005840:	4a742400 	.word	0x4a742400
 8005844:	4c3ebc20 	.word	0x4c3ebc20

08005848 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005848:	b480      	push	{r7}
 800584a:	b08b      	sub	sp, #44	@ 0x2c
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005850:	4bad      	ldr	r3, [pc, #692]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005858:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800585a:	4bab      	ldr	r3, [pc, #684]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005864:	4ba8      	ldr	r3, [pc, #672]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800586e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005870:	4ba5      	ldr	r3, [pc, #660]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800587a:	4ba3      	ldr	r3, [pc, #652]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800587c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587e:	08db      	lsrs	r3, r3, #3
 8005880:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8126 	beq.w	8005aea <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d053      	beq.n	800594c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d86f      	bhi.n	800598a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d003      	beq.n	80058b8 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d02b      	beq.n	800590e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80058b6:	e068      	b.n	800598a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058b8:	4b93      	ldr	r3, [pc, #588]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	4a92      	ldr	r2, [pc, #584]	@ (8005b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80058f0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005b10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80058f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005908:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800590c:	e068      	b.n	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005918:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800591c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592a:	ed97 6a04 	vldr	s12, [r7, #16]
 800592e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800594a:	e049      	b.n	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005956:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800595a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	ee07 3a90 	vmov	s15, r3
 8005964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005968:	ed97 6a04 	vldr	s12, [r7, #16]
 800596c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005b10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005978:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800597c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005984:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005988:	e02a      	b.n	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800598a:	4b5f      	ldr	r3, [pc, #380]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	4a5d      	ldr	r2, [pc, #372]	@ (8005b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005996:	fa22 f303 	lsr.w	r3, r2, r3
 800599a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	ee07 3a90 	vmov	s15, r3
 80059ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a04 	vldr	s12, [r7, #16]
 80059c2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005b10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80059de:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059e0:	4b49      	ldr	r3, [pc, #292]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ec:	d121      	bne.n	8005a32 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80059ee:	4b46      	ldr	r3, [pc, #280]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80059fa:	4b43      	ldr	r3, [pc, #268]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80059fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fe:	0a5b      	lsrs	r3, r3, #9
 8005a00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005a0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a10:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005a14:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a20:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e006      	b.n	8005a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a38:	4b33      	ldr	r3, [pc, #204]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a44:	d121      	bne.n	8005a8a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005a46:	4b30      	ldr	r3, [pc, #192]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d017      	beq.n	8005a82 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005a52:	4b2d      	ldr	r3, [pc, #180]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005a64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a68:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005a6c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a78:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	e006      	b.n	8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	e002      	b.n	8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a90:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a9c:	d121      	bne.n	8005ae2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d017      	beq.n	8005ada <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005aaa:	4b17      	ldr	r3, [pc, #92]	@ (8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aae:	0e1b      	lsrs	r3, r3, #24
 8005ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005ac4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005ad8:	e010      	b.n	8005afc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	609a      	str	r2, [r3, #8]
}
 8005ae0:	e00c      	b.n	8005afc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	e008      	b.n	8005afc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	372c      	adds	r7, #44	@ 0x2c
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	44020c00 	.word	0x44020c00
 8005b0c:	03d09000 	.word	0x03d09000
 8005b10:	46000000 	.word	0x46000000
 8005b14:	4a742400 	.word	0x4a742400
 8005b18:	4c3ebc20 	.word	0x4c3ebc20

08005b1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005b1c:	b590      	push	{r4, r7, lr}
 8005b1e:	b08f      	sub	sp, #60	@ 0x3c
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b2a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005b2e:	4321      	orrs	r1, r4
 8005b30:	d150      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b32:	4b26      	ldr	r3, [pc, #152]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b3c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005b3e:	4b23      	ldr	r3, [pc, #140]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d108      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b52:	d104      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b5a:	f002 bb2a 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b6c:	d108      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b74:	d104      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005b76:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b7c:	f002 bb19 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005b80:	4b12      	ldr	r3, [pc, #72]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b8c:	d119      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b94:	d115      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005b96:	4b0d      	ldr	r3, [pc, #52]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba2:	d30a      	bcc.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005ba4:	4b09      	ldr	r3, [pc, #36]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	0a1b      	lsrs	r3, r3, #8
 8005baa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bae:	4a08      	ldr	r2, [pc, #32]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005bb6:	f002 bafc 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005bbe:	f002 baf8 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bc6:	f002 baf4 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005bca:	bf00      	nop
 8005bcc:	44020c00 	.word	0x44020c00
 8005bd0:	02faf080 	.word	0x02faf080
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd8:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8005bdc:	ea50 0104 	orrs.w	r1, r0, r4
 8005be0:	f001 8275 	beq.w	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8005be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be8:	2801      	cmp	r0, #1
 8005bea:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8005bee:	f082 82dd 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005bfa:	ea50 0104 	orrs.w	r1, r0, r4
 8005bfe:	f001 816c 	beq.w	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8005c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c06:	2801      	cmp	r0, #1
 8005c08:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005c0c:	f082 82ce 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c14:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8005c18:	ea50 0104 	orrs.w	r1, r0, r4
 8005c1c:	f001 8602 	beq.w	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005c20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c24:	2801      	cmp	r0, #1
 8005c26:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8005c2a:	f082 82bf 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c32:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8005c36:	ea50 0104 	orrs.w	r1, r0, r4
 8005c3a:	f001 854c 	beq.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005c3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c42:	2801      	cmp	r0, #1
 8005c44:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8005c48:	f082 82b0 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c50:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8005c54:	ea50 0104 	orrs.w	r1, r0, r4
 8005c58:	f001 849e 	beq.w	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c60:	2801      	cmp	r0, #1
 8005c62:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8005c66:	f082 82a1 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c6e:	f1a1 0420 	sub.w	r4, r1, #32
 8005c72:	ea50 0104 	orrs.w	r1, r0, r4
 8005c76:	f001 83e8 	beq.w	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005c7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c7e:	2801      	cmp	r0, #1
 8005c80:	f171 0120 	sbcs.w	r1, r1, #32
 8005c84:	f082 8292 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c8c:	f1a1 0410 	sub.w	r4, r1, #16
 8005c90:	ea50 0104 	orrs.w	r1, r0, r4
 8005c94:	f002 8256 	beq.w	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c9c:	2801      	cmp	r0, #1
 8005c9e:	f171 0110 	sbcs.w	r1, r1, #16
 8005ca2:	f082 8283 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ca6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005caa:	f1a1 0408 	sub.w	r4, r1, #8
 8005cae:	ea50 0104 	orrs.w	r1, r0, r4
 8005cb2:	f002 81cc 	beq.w	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cba:	2801      	cmp	r0, #1
 8005cbc:	f171 0108 	sbcs.w	r1, r1, #8
 8005cc0:	f082 8274 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc8:	1f0c      	subs	r4, r1, #4
 8005cca:	ea50 0104 	orrs.w	r1, r0, r4
 8005cce:	f001 8648 	beq.w	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd6:	2801      	cmp	r0, #1
 8005cd8:	f171 0104 	sbcs.w	r1, r1, #4
 8005cdc:	f082 8266 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ce4:	1e8c      	subs	r4, r1, #2
 8005ce6:	ea50 0104 	orrs.w	r1, r0, r4
 8005cea:	f002 8143 	beq.w	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cf2:	2801      	cmp	r0, #1
 8005cf4:	f171 0102 	sbcs.w	r1, r1, #2
 8005cf8:	f082 8258 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d00:	1e4c      	subs	r4, r1, #1
 8005d02:	ea50 0104 	orrs.w	r1, r0, r4
 8005d06:	f002 80ce 	beq.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8005d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d0e:	2801      	cmp	r0, #1
 8005d10:	f171 0101 	sbcs.w	r1, r1, #1
 8005d14:	f082 824a 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d1c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8005d20:	4321      	orrs	r1, r4
 8005d22:	f002 8059 	beq.w	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d2a:	4cd9      	ldr	r4, [pc, #868]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005d2c:	42a0      	cmp	r0, r4
 8005d2e:	f171 0100 	sbcs.w	r1, r1, #0
 8005d32:	f082 823b 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d3a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005d3e:	4321      	orrs	r1, r4
 8005d40:	f001 87d9 	beq.w	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d48:	4cd2      	ldr	r4, [pc, #840]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005d4a:	42a0      	cmp	r0, r4
 8005d4c:	f171 0100 	sbcs.w	r1, r1, #0
 8005d50:	f082 822c 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d58:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005d5c:	4321      	orrs	r1, r4
 8005d5e:	f001 8751 	beq.w	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d66:	4ccc      	ldr	r4, [pc, #816]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005d68:	42a0      	cmp	r0, r4
 8005d6a:	f171 0100 	sbcs.w	r1, r1, #0
 8005d6e:	f082 821d 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d76:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005d7a:	4321      	orrs	r1, r4
 8005d7c:	f001 869a 	beq.w	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d84:	4cc5      	ldr	r4, [pc, #788]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005d86:	42a0      	cmp	r0, r4
 8005d88:	f171 0100 	sbcs.w	r1, r1, #0
 8005d8c:	f082 820e 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d94:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005d98:	4321      	orrs	r1, r4
 8005d9a:	f001 8612 	beq.w	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005da2:	4cbf      	ldr	r4, [pc, #764]	@ (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005da4:	42a0      	cmp	r0, r4
 8005da6:	f171 0100 	sbcs.w	r1, r1, #0
 8005daa:	f082 81ff 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005db2:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005db6:	4321      	orrs	r1, r4
 8005db8:	f002 817e 	beq.w	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dc0:	4cb8      	ldr	r4, [pc, #736]	@ (80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005dc2:	42a0      	cmp	r0, r4
 8005dc4:	f171 0100 	sbcs.w	r1, r1, #0
 8005dc8:	f082 81f0 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dd0:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8005dd4:	4321      	orrs	r1, r4
 8005dd6:	f000 829e 	beq.w	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dde:	4cb2      	ldr	r4, [pc, #712]	@ (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	f171 0100 	sbcs.w	r1, r1, #0
 8005de6:	f082 81e1 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dee:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005df2:	4321      	orrs	r1, r4
 8005df4:	f000 826d 	beq.w	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dfc:	4cab      	ldr	r4, [pc, #684]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005dfe:	42a0      	cmp	r0, r4
 8005e00:	f171 0100 	sbcs.w	r1, r1, #0
 8005e04:	f082 81d2 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e0c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005e10:	4321      	orrs	r1, r4
 8005e12:	f001 800d 	beq.w	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e1a:	4ca5      	ldr	r4, [pc, #660]	@ (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005e1c:	42a0      	cmp	r0, r4
 8005e1e:	f171 0100 	sbcs.w	r1, r1, #0
 8005e22:	f082 81c3 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e2a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8005e2e:	4321      	orrs	r1, r4
 8005e30:	f000 81d0 	beq.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005e34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e38:	4c9e      	ldr	r4, [pc, #632]	@ (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005e3a:	42a0      	cmp	r0, r4
 8005e3c:	f171 0100 	sbcs.w	r1, r1, #0
 8005e40:	f082 81b4 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e48:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8005e4c:	4321      	orrs	r1, r4
 8005e4e:	f000 8142 	beq.w	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e56:	4c98      	ldr	r4, [pc, #608]	@ (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	f171 0100 	sbcs.w	r1, r1, #0
 8005e5e:	f082 81a5 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e66:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005e6a:	4321      	orrs	r1, r4
 8005e6c:	f001 824e 	beq.w	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e74:	4c91      	ldr	r4, [pc, #580]	@ (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005e76:	42a0      	cmp	r0, r4
 8005e78:	f171 0100 	sbcs.w	r1, r1, #0
 8005e7c:	f082 8196 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e84:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005e88:	4321      	orrs	r1, r4
 8005e8a:	f001 8197 	beq.w	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e92:	4c8b      	ldr	r4, [pc, #556]	@ (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005e94:	42a0      	cmp	r0, r4
 8005e96:	f171 0100 	sbcs.w	r1, r1, #0
 8005e9a:	f082 8187 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ea2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005ea6:	4321      	orrs	r1, r4
 8005ea8:	f001 8154 	beq.w	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005eac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eb0:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005eb4:	f171 0100 	sbcs.w	r1, r1, #0
 8005eb8:	f082 8178 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ec0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005ec4:	4321      	orrs	r1, r4
 8005ec6:	f001 80b7 	beq.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ece:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005ed2:	42a0      	cmp	r0, r4
 8005ed4:	f171 0100 	sbcs.w	r1, r1, #0
 8005ed8:	f082 8168 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005edc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ee0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005ee4:	4321      	orrs	r1, r4
 8005ee6:	f001 8064 	beq.w	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eee:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005ef2:	42a0      	cmp	r0, r4
 8005ef4:	f171 0100 	sbcs.w	r1, r1, #0
 8005ef8:	f082 8158 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f00:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005f04:	4321      	orrs	r1, r4
 8005f06:	f001 8011 	beq.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f0e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005f12:	42a0      	cmp	r0, r4
 8005f14:	f171 0100 	sbcs.w	r1, r1, #0
 8005f18:	f082 8148 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f20:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8005f24:	4321      	orrs	r1, r4
 8005f26:	f000 871e 	beq.w	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005f2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f2e:	f241 0401 	movw	r4, #4097	@ 0x1001
 8005f32:	42a0      	cmp	r0, r4
 8005f34:	f171 0100 	sbcs.w	r1, r1, #0
 8005f38:	f082 8138 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f40:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8005f44:	4321      	orrs	r1, r4
 8005f46:	f000 86a8 	beq.w	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005f4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f4e:	f640 0401 	movw	r4, #2049	@ 0x801
 8005f52:	42a0      	cmp	r0, r4
 8005f54:	f171 0100 	sbcs.w	r1, r1, #0
 8005f58:	f082 8128 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f60:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005f64:	4321      	orrs	r1, r4
 8005f66:	f000 8632 	beq.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f6e:	f240 4401 	movw	r4, #1025	@ 0x401
 8005f72:	42a0      	cmp	r0, r4
 8005f74:	f171 0100 	sbcs.w	r1, r1, #0
 8005f78:	f082 8118 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005f7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f80:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005f84:	4321      	orrs	r1, r4
 8005f86:	f000 85b0 	beq.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f8e:	f240 2401 	movw	r4, #513	@ 0x201
 8005f92:	42a0      	cmp	r0, r4
 8005f94:	f171 0100 	sbcs.w	r1, r1, #0
 8005f98:	f082 8108 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fa0:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005fa4:	4321      	orrs	r1, r4
 8005fa6:	f000 8535 	beq.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fae:	f240 1401 	movw	r4, #257	@ 0x101
 8005fb2:	42a0      	cmp	r0, r4
 8005fb4:	f171 0100 	sbcs.w	r1, r1, #0
 8005fb8:	f082 80f8 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fc0:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005fc4:	4321      	orrs	r1, r4
 8005fc6:	f000 84ba 	beq.w	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fce:	2881      	cmp	r0, #129	@ 0x81
 8005fd0:	f171 0100 	sbcs.w	r1, r1, #0
 8005fd4:	f082 80ea 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fdc:	2821      	cmp	r0, #33	@ 0x21
 8005fde:	f171 0100 	sbcs.w	r1, r1, #0
 8005fe2:	d26f      	bcs.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fe8:	4301      	orrs	r1, r0
 8005fea:	f002 80df 	beq.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ff2:	1e42      	subs	r2, r0, #1
 8005ff4:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005ff8:	2a20      	cmp	r2, #32
 8005ffa:	f173 0100 	sbcs.w	r1, r3, #0
 8005ffe:	f082 80d5 	bcs.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006002:	2a1f      	cmp	r2, #31
 8006004:	f202 80d2 	bhi.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006008:	a101      	add	r1, pc, #4	@ (adr r1, 8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800600a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006371 	.word	0x08006371
 8006014:	0800643d 	.word	0x0800643d
 8006018:	080081ad 	.word	0x080081ad
 800601c:	080064fd 	.word	0x080064fd
 8006020:	080081ad 	.word	0x080081ad
 8006024:	080081ad 	.word	0x080081ad
 8006028:	080081ad 	.word	0x080081ad
 800602c:	080065cd 	.word	0x080065cd
 8006030:	080081ad 	.word	0x080081ad
 8006034:	080081ad 	.word	0x080081ad
 8006038:	080081ad 	.word	0x080081ad
 800603c:	080081ad 	.word	0x080081ad
 8006040:	080081ad 	.word	0x080081ad
 8006044:	080081ad 	.word	0x080081ad
 8006048:	080081ad 	.word	0x080081ad
 800604c:	080066af 	.word	0x080066af
 8006050:	080081ad 	.word	0x080081ad
 8006054:	080081ad 	.word	0x080081ad
 8006058:	080081ad 	.word	0x080081ad
 800605c:	080081ad 	.word	0x080081ad
 8006060:	080081ad 	.word	0x080081ad
 8006064:	080081ad 	.word	0x080081ad
 8006068:	080081ad 	.word	0x080081ad
 800606c:	080081ad 	.word	0x080081ad
 8006070:	080081ad 	.word	0x080081ad
 8006074:	080081ad 	.word	0x080081ad
 8006078:	080081ad 	.word	0x080081ad
 800607c:	080081ad 	.word	0x080081ad
 8006080:	080081ad 	.word	0x080081ad
 8006084:	080081ad 	.word	0x080081ad
 8006088:	080081ad 	.word	0x080081ad
 800608c:	08006785 	.word	0x08006785
 8006090:	80000001 	.word	0x80000001
 8006094:	40000001 	.word	0x40000001
 8006098:	20000001 	.word	0x20000001
 800609c:	10000001 	.word	0x10000001
 80060a0:	08000001 	.word	0x08000001
 80060a4:	04000001 	.word	0x04000001
 80060a8:	00800001 	.word	0x00800001
 80060ac:	00400001 	.word	0x00400001
 80060b0:	00200001 	.word	0x00200001
 80060b4:	00100001 	.word	0x00100001
 80060b8:	00080001 	.word	0x00080001
 80060bc:	00040001 	.word	0x00040001
 80060c0:	00020001 	.word	0x00020001
 80060c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c8:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80060cc:	430b      	orrs	r3, r1
 80060ce:	f000 83c4 	beq.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80060d2:	f002 b86b 	b.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80060d6:	4ba1      	ldr	r3, [pc, #644]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80060e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060e8:	d036      	beq.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060f0:	d86b      	bhi.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060f8:	d02b      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006100:	d863      	bhi.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006108:	d01b      	beq.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006110:	d85b      	bhi.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800611e:	d008      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8006120:	e053      	b.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006122:	f107 0320 	add.w	r3, r7, #32
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff f8ba 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006130:	e04e      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006132:	f107 0314 	add.w	r3, r7, #20
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fa1c 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006140:	e046      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff fb7e 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006150:	e03e      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006152:	4b83      	ldr	r3, [pc, #524]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006156:	e03b      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006158:	4b80      	ldr	r3, [pc, #512]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800615a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800615e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006162:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006164:	4b7d      	ldr	r3, [pc, #500]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b02      	cmp	r3, #2
 800616e:	d10c      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006176:	4b79      	ldr	r3, [pc, #484]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	08db      	lsrs	r3, r3, #3
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	4a78      	ldr	r2, [pc, #480]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006182:	fa22 f303 	lsr.w	r3, r2, r3
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
 8006188:	e01e      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800618a:	4b74      	ldr	r3, [pc, #464]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006196:	d106      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619e:	d102      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80061a0:	4b71      	ldr	r3, [pc, #452]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80061a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061a4:	e010      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061a6:	4b6d      	ldr	r3, [pc, #436]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061b2:	d106      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80061b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ba:	d102      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80061bc:	4b6b      	ldr	r3, [pc, #428]	@ (800636c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c0:	e002      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80061c6:	e003      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80061c8:	e002      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80061ce:	bf00      	nop
          }
        }
        break;
 80061d0:	f001 bfef 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80061d4:	4b61      	ldr	r3, [pc, #388]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061da:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80061de:	633b      	str	r3, [r7, #48]	@ 0x30
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061e6:	d036      	beq.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061ee:	d86b      	bhi.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80061f6:	d02b      	beq.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80061fe:	d863      	bhi.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006206:	d01b      	beq.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800620e:	d85b      	bhi.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006218:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800621c:	d008      	beq.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800621e:	e053      	b.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006220:	f107 0320 	add.w	r3, r7, #32
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff f83b 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800622e:	e04e      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006230:	f107 0314 	add.w	r3, r7, #20
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff f99d 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800623e:	e046      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006240:	f107 0308 	add.w	r3, r7, #8
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff faff 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800624e:	e03e      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006250:	4b43      	ldr	r3, [pc, #268]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006252:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006254:	e03b      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006256:	4b41      	ldr	r3, [pc, #260]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800625c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006260:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006262:	4b3e      	ldr	r3, [pc, #248]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b02      	cmp	r3, #2
 800626c:	d10c      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800626e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d109      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006274:	4b39      	ldr	r3, [pc, #228]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	08db      	lsrs	r3, r3, #3
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	4a39      	ldr	r2, [pc, #228]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
 8006284:	637b      	str	r3, [r7, #52]	@ 0x34
 8006286:	e01e      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006288:	4b34      	ldr	r3, [pc, #208]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006294:	d106      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629c:	d102      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800629e:	4b32      	ldr	r3, [pc, #200]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80062a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a2:	e010      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062a4:	4b2d      	ldr	r3, [pc, #180]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062b0:	d106      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80062b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062b8:	d102      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80062ba:	4b2c      	ldr	r3, [pc, #176]	@ (800636c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80062bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062be:	e002      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80062c4:	e003      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80062c6:	e002      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80062cc:	bf00      	nop
          }
        }
        break;
 80062ce:	f001 bf70 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80062d2:	4b22      	ldr	r3, [pc, #136]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80062d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062dc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d108      	bne.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062e4:	f107 0320 	add.w	r3, r7, #32
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fe ffd9 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062f2:	f001 bf5e 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d108      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062fc:	f107 0314 	add.w	r3, r7, #20
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff f937 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800630a:	f001 bf52 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006312:	f001 bf4e 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8006316:	4b11      	ldr	r3, [pc, #68]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006318:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800631c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006320:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	2b00      	cmp	r3, #0
 8006326:	d108      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006328:	f107 0320 	add.w	r3, r7, #32
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe ffb7 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006336:	f001 bf3c 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	2b80      	cmp	r3, #128	@ 0x80
 800633e:	d108      	bne.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff f915 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800634e:	f001 bf30 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006356:	f001 bf2c 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800635a:	bf00      	nop
 800635c:	44020c00 	.word	0x44020c00
 8006360:	00bb8000 	.word	0x00bb8000
 8006364:	03d09000 	.word	0x03d09000
 8006368:	003d0900 	.word	0x003d0900
 800636c:	02faf080 	.word	0x02faf080
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006370:	4b9d      	ldr	r3, [pc, #628]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006382:	f7fc ff9f 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8006386:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006388:	f001 bf13 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800638c:	4b96      	ldr	r3, [pc, #600]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006398:	d10a      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	2b01      	cmp	r3, #1
 800639e:	d107      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063a0:	f107 0314 	add.w	r3, r7, #20
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff f8e5 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ae:	e043      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80063b0:	4b8d      	ldr	r3, [pc, #564]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063bc:	d10a      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d107      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c4:	f107 0308 	add.w	r3, r7, #8
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fa3d 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d2:	e031      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80063d4:	4b84      	ldr	r3, [pc, #528]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d10c      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d109      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063e6:	4b80      	ldr	r3, [pc, #512]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	08db      	lsrs	r3, r3, #3
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	4a7e      	ldr	r2, [pc, #504]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f8:	e01e      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80063fa:	4b7b      	ldr	r3, [pc, #492]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006406:	d105      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	2b04      	cmp	r3, #4
 800640c:	d102      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800640e:	4b78      	ldr	r3, [pc, #480]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006414:	4b74      	ldr	r3, [pc, #464]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b02      	cmp	r3, #2
 8006420:	d106      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	2b05      	cmp	r3, #5
 8006426:	d103      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800642c:	637b      	str	r3, [r7, #52]	@ 0x34
 800642e:	e003      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006434:	f001 bebd 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006438:	f001 bebb 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800643c:	4b6a      	ldr	r3, [pc, #424]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800643e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006446:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	2b00      	cmp	r3, #0
 800644c:	d104      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800644e:	f7fc ff23 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006452:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006454:	f001 bead 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006458:	4b63      	ldr	r3, [pc, #396]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006460:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006464:	d10a      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	2b08      	cmp	r3, #8
 800646a:	d107      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff f87f 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
 800647a:	e03d      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	2b10      	cmp	r3, #16
 8006480:	d108      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff f9de 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006490:	f001 be8f 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006494:	4b54      	ldr	r3, [pc, #336]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b02      	cmp	r3, #2
 800649e:	d10c      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80064a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a2:	2b18      	cmp	r3, #24
 80064a4:	d109      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064a6:	4b50      	ldr	r3, [pc, #320]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	08db      	lsrs	r3, r3, #3
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	4a4e      	ldr	r2, [pc, #312]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80064b2:	fa22 f303 	lsr.w	r3, r2, r3
 80064b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064b8:	e01e      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80064ba:	4b4b      	ldr	r3, [pc, #300]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c6:	d105      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	d102      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80064ce:	4b48      	ldr	r3, [pc, #288]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d2:	e011      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80064d4:	4b44      	ldr	r3, [pc, #272]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80064d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d106      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	2b28      	cmp	r3, #40	@ 0x28
 80064e6:	d103      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80064e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ee:	e003      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064f4:	f001 be5d 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064f8:	f001 be5b 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80064fc:	4b3a      	ldr	r3, [pc, #232]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80064fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006502:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006506:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800650e:	f7fc fec3 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006512:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006514:	f001 be4d 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006518:	4b33      	ldr	r3, [pc, #204]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006524:	d10a      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006528:	2b40      	cmp	r3, #64	@ 0x40
 800652a:	d107      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652c:	f107 0314 	add.w	r3, r7, #20
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff f81f 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	637b      	str	r3, [r7, #52]	@ 0x34
 800653a:	e045      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800653c:	4b2a      	ldr	r3, [pc, #168]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006548:	d10a      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	2b80      	cmp	r3, #128	@ 0x80
 800654e:	d107      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006550:	f107 0308 	add.w	r3, r7, #8
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff f977 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	637b      	str	r3, [r7, #52]	@ 0x34
 800655e:	e033      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006560:	4b21      	ldr	r3, [pc, #132]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b02      	cmp	r3, #2
 800656a:	d10c      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800656c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006570:	d109      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006572:	4b1d      	ldr	r3, [pc, #116]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	08db      	lsrs	r3, r3, #3
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	4a1b      	ldr	r2, [pc, #108]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800657e:	fa22 f303 	lsr.w	r3, r2, r3
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
 8006584:	e020      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006586:	4b18      	ldr	r3, [pc, #96]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800658e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006592:	d106      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800659a:	d102      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800659c:	4b14      	ldr	r3, [pc, #80]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800659e:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a0:	e012      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80065a2:	4b11      	ldr	r3, [pc, #68]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80065a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d107      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80065b6:	d103      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80065b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065be:	e003      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065c4:	f001 bdf5 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065c8:	f001 bdf3 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80065cc:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80065ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065d2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80065d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065de:	f7fc fe5b 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 80065e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80065e4:	f001 bde5 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065e8:	44020c00 	.word	0x44020c00
 80065ec:	03d09000 	.word	0x03d09000
 80065f0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80065f4:	4ba0      	ldr	r3, [pc, #640]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006600:	d10b      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006608:	d107      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800660a:	f107 0314 	add.w	r3, r7, #20
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe ffb0 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
 8006618:	e047      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800661a:	4b97      	ldr	r3, [pc, #604]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006626:	d10b      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662e:	d107      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006630:	f107 0308 	add.w	r3, r7, #8
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff f907 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	637b      	str	r3, [r7, #52]	@ 0x34
 800663e:	e034      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006640:	4b8d      	ldr	r3, [pc, #564]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d10d      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006652:	d109      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006654:	4b88      	ldr	r3, [pc, #544]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	08db      	lsrs	r3, r3, #3
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	4a87      	ldr	r2, [pc, #540]	@ (800687c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
 8006666:	e020      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006668:	4b83      	ldr	r3, [pc, #524]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006674:	d106      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800667c:	d102      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800667e:	4b80      	ldr	r3, [pc, #512]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
 8006682:	e012      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006684:	4b7c      	ldr	r3, [pc, #496]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d107      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006698:	d103      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800669a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800669e:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066a6:	f001 bd84 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066aa:	f001 bd82 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80066ae:	4b72      	ldr	r3, [pc, #456]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80066b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fc fdea 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 80066c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80066c6:	f001 bd74 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80066ca:	4b6b      	ldr	r3, [pc, #428]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066d6:	d10b      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066de:	d107      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe ff45 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ee:	e047      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80066f0:	4b61      	ldr	r3, [pc, #388]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066fc:	d10b      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006704:	d107      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006706:	f107 0308 	add.w	r3, r7, #8
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff f89c 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
 8006714:	e034      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006716:	4b58      	ldr	r3, [pc, #352]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b02      	cmp	r3, #2
 8006720:	d10d      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006728:	d109      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800672a:	4b53      	ldr	r3, [pc, #332]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	08db      	lsrs	r3, r3, #3
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	4a51      	ldr	r2, [pc, #324]	@ (800687c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006736:	fa22 f303 	lsr.w	r3, r2, r3
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
 800673c:	e020      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800673e:	4b4e      	ldr	r3, [pc, #312]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800674a:	d106      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006752:	d102      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006754:	4b4a      	ldr	r3, [pc, #296]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006756:	637b      	str	r3, [r7, #52]	@ 0x34
 8006758:	e012      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800675a:	4b47      	ldr	r3, [pc, #284]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800675c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d107      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800676e:	d103      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
 8006776:	e003      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800677c:	f001 bd19 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006780:	f001 bd17 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006784:	4b3c      	ldr	r3, [pc, #240]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006786:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800678a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800678e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006796:	f7fc fd7f 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 800679a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800679c:	f001 bd09 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80067a0:	4b35      	ldr	r3, [pc, #212]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067ac:	d10b      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067b4:	d107      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067b6:	f107 0314 	add.w	r3, r7, #20
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe feda 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c4:	e047      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80067c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d2:	d10b      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067da:	d107      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067dc:	f107 0308 	add.w	r3, r7, #8
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff f831 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ea:	e034      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80067ec:	4b22      	ldr	r3, [pc, #136]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d10d      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80067fe:	d109      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006800:	4b1d      	ldr	r3, [pc, #116]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	08db      	lsrs	r3, r3, #3
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	4a1c      	ldr	r2, [pc, #112]	@ (800687c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800680c:	fa22 f303 	lsr.w	r3, r2, r3
 8006810:	637b      	str	r3, [r7, #52]	@ 0x34
 8006812:	e020      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006814:	4b18      	ldr	r3, [pc, #96]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800681c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006820:	d106      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006828:	d102      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800682a:	4b15      	ldr	r3, [pc, #84]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800682c:	637b      	str	r3, [r7, #52]	@ 0x34
 800682e:	e012      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006830:	4b11      	ldr	r3, [pc, #68]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b02      	cmp	r3, #2
 800683c:	d107      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006844:	d103      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8006846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800684a:	637b      	str	r3, [r7, #52]	@ 0x34
 800684c:	e003      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006852:	f001 bcae 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006856:	f001 bcac 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800685a:	4b07      	ldr	r3, [pc, #28]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800685c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006860:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8006864:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800686c:	f7fc fd14 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006870:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8006872:	f001 bc9e 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006876:	bf00      	nop
 8006878:	44020c00 	.word	0x44020c00
 800687c:	03d09000 	.word	0x03d09000
 8006880:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006884:	4ba0      	ldr	r3, [pc, #640]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800688c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006890:	d10b      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006898:	d107      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800689a:	f107 0314 	add.w	r3, r7, #20
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe fe68 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a8:	e047      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80068aa:	4b97      	ldr	r3, [pc, #604]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b6:	d10b      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80068be:	d107      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068c0:	f107 0308 	add.w	r3, r7, #8
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe ffbf 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ce:	e034      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80068d0:	4b8d      	ldr	r3, [pc, #564]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d10d      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80068e2:	d109      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068e4:	4b88      	ldr	r3, [pc, #544]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	08db      	lsrs	r3, r3, #3
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	4a87      	ldr	r2, [pc, #540]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f6:	e020      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80068f8:	4b83      	ldr	r3, [pc, #524]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006904:	d106      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690c:	d102      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800690e:	4b80      	ldr	r3, [pc, #512]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006910:	637b      	str	r3, [r7, #52]	@ 0x34
 8006912:	e012      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006914:	4b7c      	ldr	r3, [pc, #496]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b02      	cmp	r3, #2
 8006920:	d107      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006928:	d103      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800692a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800692e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006930:	e003      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006936:	f001 bc3c 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800693a:	f001 bc3a 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800693e:	4b72      	ldr	r3, [pc, #456]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006944:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006948:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006950:	f7fc fca2 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006954:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8006956:	f001 bc2c 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800695a:	4b6b      	ldr	r3, [pc, #428]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006962:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006966:	d10b      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800696e:	d107      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006970:	f107 0314 	add.w	r3, r7, #20
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fdfd 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
 800697e:	e047      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006980:	4b61      	ldr	r3, [pc, #388]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800698c:	d10b      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006994:	d107      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006996:	f107 0308 	add.w	r3, r7, #8
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe ff54 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a4:	e034      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80069a6:	4b58      	ldr	r3, [pc, #352]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d10d      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069b8:	d109      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069ba:	4b53      	ldr	r3, [pc, #332]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	4a51      	ldr	r2, [pc, #324]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80069c6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80069cc:	e020      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80069ce:	4b4e      	ldr	r3, [pc, #312]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069da:	d106      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069e2:	d102      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80069e4:	4b4a      	ldr	r3, [pc, #296]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80069e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e8:	e012      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80069ea:	4b47      	ldr	r3, [pc, #284]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80069ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d107      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80069fe:	d103      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8006a00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a06:	e003      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a0c:	f001 bbd1 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a10:	f001 bbcf 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006a14:	4b3c      	ldr	r3, [pc, #240]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006a16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a1a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006a1e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d104      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a26:	f7fc fc37 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006a2a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a2c:	f001 bbc1 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006a30:	4b35      	ldr	r3, [pc, #212]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a3c:	d10b      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a44:	d107      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a46:	f107 0314 	add.w	r3, r7, #20
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe fd92 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a54:	e047      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8006a56:	4b2c      	ldr	r3, [pc, #176]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a62:	d10b      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a6a:	d107      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a6c:	f107 0308 	add.w	r3, r7, #8
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe fee9 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7a:	e034      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006a7c:	4b22      	ldr	r3, [pc, #136]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d10d      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a8e:	d109      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a90:	4b1d      	ldr	r3, [pc, #116]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	08db      	lsrs	r3, r3, #3
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa2:	e020      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006aa4:	4b18      	ldr	r3, [pc, #96]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d106      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8006aba:	4b15      	ldr	r3, [pc, #84]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006abe:	e012      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8006ac0:	4b11      	ldr	r3, [pc, #68]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d107      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006ad4:	d103      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8006ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8006adc:	e003      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ae2:	f001 bb66 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ae6:	f001 bb64 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8006aea:	4b07      	ldr	r3, [pc, #28]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006af0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8006af4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10b      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006afc:	f7fc fbcc 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006b00:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b02:	f001 bb56 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b06:	bf00      	nop
 8006b08:	44020c00 	.word	0x44020c00
 8006b0c:	03d09000 	.word	0x03d09000
 8006b10:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006b14:	4ba1      	ldr	r3, [pc, #644]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b20:	d10b      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b28:	d107      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b2a:	f107 0314 	add.w	r3, r7, #20
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe fd20 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b38:	e047      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006b3a:	4b98      	ldr	r3, [pc, #608]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b46:	d10b      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b50:	f107 0308 	add.w	r3, r7, #8
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe fe77 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b5e:	e034      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006b60:	4b8e      	ldr	r3, [pc, #568]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d10d      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006b72:	d109      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b74:	4b89      	ldr	r3, [pc, #548]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	08db      	lsrs	r3, r3, #3
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	4a88      	ldr	r2, [pc, #544]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006b80:	fa22 f303 	lsr.w	r3, r2, r3
 8006b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b86:	e020      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006b88:	4b84      	ldr	r3, [pc, #528]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b94:	d106      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b9c:	d102      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006b9e:	4b81      	ldr	r3, [pc, #516]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba2:	e012      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006ba4:	4b7d      	ldr	r3, [pc, #500]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006bb8:	d103      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8006bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc0:	e003      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bc6:	f001 baf4 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bca:	f001 baf2 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006bce:	4b73      	ldr	r3, [pc, #460]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006bd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7fc fb5a 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006be4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8006be6:	f001 bae4 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8006bea:	4b6c      	ldr	r3, [pc, #432]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf6:	d10a      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d107      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfe:	f107 0314 	add.w	r3, r7, #20
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fcb6 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0c:	e043      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006c0e:	4b63      	ldr	r3, [pc, #396]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c1a:	d10a      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d107      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c22:	f107 0308 	add.w	r3, r7, #8
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fe0e 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c30:	e031      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006c32:	4b5a      	ldr	r3, [pc, #360]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d10c      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d109      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c44:	4b55      	ldr	r3, [pc, #340]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	08db      	lsrs	r3, r3, #3
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	4a54      	ldr	r2, [pc, #336]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
 8006c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c56:	e01e      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006c58:	4b50      	ldr	r3, [pc, #320]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c64:	d105      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d102      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c70:	e011      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006c72:	4b4a      	ldr	r3, [pc, #296]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d106      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	d103      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8c:	e003      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c92:	f001 ba8e 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c96:	f001 ba8c 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006c9a:	4b40      	ldr	r3, [pc, #256]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ca0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ca4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cac:	f7fc faf4 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006cb0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006cb2:	f001 ba7e 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006cb6:	4b39      	ldr	r3, [pc, #228]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cc2:	d10a      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d107      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cca:	f107 0314 	add.w	r3, r7, #20
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fc50 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd8:	e043      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006cda:	4b30      	ldr	r3, [pc, #192]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ce2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ce6:	d10a      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d107      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cee:	f107 0308 	add.w	r3, r7, #8
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fda8 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfc:	e031      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006cfe:	4b27      	ldr	r3, [pc, #156]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d10c      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	2b30      	cmp	r3, #48	@ 0x30
 8006d0e:	d109      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d10:	4b22      	ldr	r3, [pc, #136]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	08db      	lsrs	r3, r3, #3
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	4a21      	ldr	r2, [pc, #132]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d22:	e01e      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006d24:	4b1d      	ldr	r3, [pc, #116]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d30:	d105      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	2b40      	cmp	r3, #64	@ 0x40
 8006d36:	d102      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006d38:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3c:	e011      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006d3e:	4b17      	ldr	r3, [pc, #92]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d106      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	2b50      	cmp	r3, #80	@ 0x50
 8006d50:	d103      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d58:	e003      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d5e:	f001 ba28 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d62:	f001 ba26 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006d66:	4b0d      	ldr	r3, [pc, #52]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d6c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006d70:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006d78:	f7fc faba 	bl	80032f0 <HAL_RCC_GetPCLK3Freq>
 8006d7c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d7e:	f001 ba18 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d88:	d10e      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d8a:	f107 0314 	add.w	r3, r7, #20
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fbf0 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d98:	f001 ba0b 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d9c:	44020c00 	.word	0x44020c00
 8006da0:	03d09000 	.word	0x03d09000
 8006da4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dae:	d108      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db0:	f107 0308 	add.w	r3, r7, #8
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fd47 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dbe:	f001 b9f8 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006dc2:	4ba4      	ldr	r3, [pc, #656]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d10d      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dd4:	d109      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dd6:	4b9f      	ldr	r3, [pc, #636]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	08db      	lsrs	r3, r3, #3
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	4a9d      	ldr	r2, [pc, #628]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006de2:	fa22 f303 	lsr.w	r3, r2, r3
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de8:	e020      	b.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006dea:	4b9a      	ldr	r3, [pc, #616]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df6:	d106      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dfe:	d102      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006e00:	4b96      	ldr	r3, [pc, #600]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e04:	e012      	b.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006e06:	4b93      	ldr	r3, [pc, #588]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d107      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e1a:	d103      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006e1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e22:	e003      	b.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e28:	f001 b9c3 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e2c:	f001 b9c1 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006e30:	4b88      	ldr	r3, [pc, #544]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006e42:	f7fc fa0d 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8006e46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006e48:	f001 b9b3 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d104      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e52:	f7fc f8d9 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8006e56:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e58:	f001 b9ab 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d108      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e62:	f107 0314 	add.w	r3, r7, #20
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fb84 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e70:	f001 b99f 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006e74:	4b77      	ldr	r3, [pc, #476]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e80:	d105      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d102      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006e88:	4b75      	ldr	r3, [pc, #468]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8c:	e023      	b.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006e8e:	4b71      	ldr	r3, [pc, #452]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d10c      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d109      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	4a6b      	ldr	r2, [pc, #428]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb2:	e010      	b.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006eb4:	4b67      	ldr	r3, [pc, #412]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec0:	d105      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	2b05      	cmp	r3, #5
 8006ec6:	d102      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006ec8:	4b64      	ldr	r3, [pc, #400]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ecc:	e003      	b.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ed2:	f001 b96e 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ed6:	f001 b96c 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006eda:	4b5e      	ldr	r3, [pc, #376]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d106      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d103      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f00:	e012      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006f02:	4b54      	ldr	r3, [pc, #336]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f10:	d106      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d103      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006f18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1e:	e003      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006f24:	f001 b945 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f28:	f001 b943 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006f2c:	4b49      	ldr	r3, [pc, #292]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006f2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f36:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f3e:	f7fc f9ab 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006f42:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f44:	f001 b935 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f4e:	d108      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f50:	f107 0308 	add.w	r3, r7, #8
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe fc77 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f5e:	f001 b928 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006f62:	4b3c      	ldr	r3, [pc, #240]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d10d      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f74:	d109      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f76:	4b37      	ldr	r3, [pc, #220]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	08db      	lsrs	r3, r3, #3
 8006f7c:	f003 0303 	and.w	r3, r3, #3
 8006f80:	4a35      	ldr	r2, [pc, #212]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006f82:	fa22 f303 	lsr.w	r3, r2, r3
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f88:	e011      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006f8a:	4b32      	ldr	r3, [pc, #200]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f96:	d106      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f9e:	d102      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa4:	e003      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006faa:	f001 b902 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006fae:	f001 b900 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006fb2:	4b28      	ldr	r3, [pc, #160]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006fb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fb8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006fbc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fc4:	f7fc f968 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8006fc8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fca:	f001 b8f2 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fd4:	d108      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd6:	f107 0308 	add.w	r3, r7, #8
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fc34 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fe4:	f001 b8e5 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d10d      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ffa:	d109      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ffc:	4b15      	ldr	r3, [pc, #84]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	08db      	lsrs	r3, r3, #3
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	4a14      	ldr	r2, [pc, #80]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007008:	fa22 f303 	lsr.w	r3, r2, r3
 800700c:	637b      	str	r3, [r7, #52]	@ 0x34
 800700e:	e011      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007010:	4b10      	ldr	r3, [pc, #64]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800701c:	d106      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007024:	d102      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007028:	637b      	str	r3, [r7, #52]	@ 0x34
 800702a:	e003      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007030:	f001 b8bf 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007034:	f001 b8bd 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007038:	4b06      	ldr	r3, [pc, #24]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800703a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800703e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007042:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10c      	bne.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800704a:	f7fc f951 	bl	80032f0 <HAL_RCC_GetPCLK3Freq>
 800704e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007050:	f001 b8af 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007054:	44020c00 	.word	0x44020c00
 8007058:	03d09000 	.word	0x03d09000
 800705c:	003d0900 	.word	0x003d0900
 8007060:	02faf080 	.word	0x02faf080
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800706a:	d108      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800706c:	f107 0308 	add.w	r3, r7, #8
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe fbe9 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800707a:	f001 b89a 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800707e:	4b9f      	ldr	r3, [pc, #636]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b02      	cmp	r3, #2
 8007088:	d10d      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007090:	d109      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007092:	4b9a      	ldr	r3, [pc, #616]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	08db      	lsrs	r3, r3, #3
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	4a98      	ldr	r2, [pc, #608]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800709e:	fa22 f303 	lsr.w	r3, r2, r3
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a4:	e011      	b.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80070a6:	4b95      	ldr	r3, [pc, #596]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070b2:	d106      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070ba:	d102      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80070bc:	4b91      	ldr	r3, [pc, #580]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80070be:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c0:	e003      	b.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070c6:	f001 b874 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80070ca:	f001 b872 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80070ce:	4b8b      	ldr	r3, [pc, #556]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80070d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070d4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80070d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80070e0:	f7fc f906 	bl	80032f0 <HAL_RCC_GetPCLK3Freq>
 80070e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80070e6:	f001 b864 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070f0:	d108      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f2:	f107 0308 	add.w	r3, r7, #8
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fba6 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007100:	f001 b857 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007104:	4b7d      	ldr	r3, [pc, #500]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b02      	cmp	r3, #2
 800710e:	d10d      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8007110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007112:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007116:	d109      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007118:	4b78      	ldr	r3, [pc, #480]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	4a77      	ldr	r2, [pc, #476]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	637b      	str	r3, [r7, #52]	@ 0x34
 800712a:	e011      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800712c:	4b73      	ldr	r3, [pc, #460]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007138:	d106      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007140:	d102      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8007142:	4b70      	ldr	r3, [pc, #448]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
 8007146:	e003      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800714c:	f001 b831 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007150:	f001 b82f 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007154:	4b69      	ldr	r3, [pc, #420]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007156:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800715a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800715e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007166:	f7fc f897 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 800716a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800716c:	f001 b821 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007176:	d108      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007178:	f107 0308 	add.w	r3, r7, #8
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fb63 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007186:	f001 b814 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800718a:	4b5c      	ldr	r3, [pc, #368]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b02      	cmp	r3, #2
 8007194:	d10e      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800719c:	d10a      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800719e:	4b57      	ldr	r3, [pc, #348]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	08db      	lsrs	r3, r3, #3
 80071a4:	f003 0303 	and.w	r3, r3, #3
 80071a8:	4a55      	ldr	r2, [pc, #340]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80071aa:	fa22 f303 	lsr.w	r3, r2, r3
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071b0:	f000 bfff 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071b8:	f000 bffb 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80071bc:	4b4f      	ldr	r3, [pc, #316]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80071be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80071c2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80071ce:	d056      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80071d6:	f200 808b 	bhi.w	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071e0:	d03e      	beq.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071e8:	f200 8082 	bhi.w	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f2:	d027      	beq.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071fa:	d879      	bhi.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007202:	d017      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800720a:	d871      	bhi.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800720c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007218:	d004      	beq.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800721a:	e069      	b.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800721c:	f7fc f868 	bl	80032f0 <HAL_RCC_GetPCLK3Freq>
 8007220:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007222:	e068      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007224:	f107 0314 	add.w	r3, r7, #20
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe f9a3 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007232:	e060      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007234:	f107 0308 	add.w	r3, r7, #8
 8007238:	4618      	mov	r0, r3
 800723a:	f7fe fb05 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007242:	e058      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007244:	4b2d      	ldr	r3, [pc, #180]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b02      	cmp	r3, #2
 8007250:	d103      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007258:	e04d      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800725e:	e04a      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007260:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800726a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800726e:	d103      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007270:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007274:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007276:	e03e      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800727c:	e03b      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800727e:	4b1f      	ldr	r3, [pc, #124]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007284:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007288:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800728a:	4b1c      	ldr	r3, [pc, #112]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b02      	cmp	r3, #2
 8007294:	d10c      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d109      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800729c:	4b17      	ldr	r3, [pc, #92]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	08db      	lsrs	r3, r3, #3
 80072a2:	f003 0303 	and.w	r3, r3, #3
 80072a6:	4a16      	ldr	r2, [pc, #88]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ae:	e01e      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072b0:	4b12      	ldr	r3, [pc, #72]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072bc:	d106      	bne.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80072be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c4:	d102      	bne.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80072c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ca:	e010      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072cc:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072d8:	d106      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80072da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072e0:	d102      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072e2:	4b09      	ldr	r3, [pc, #36]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80072e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e6:	e002      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80072ec:	e003      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80072ee:	e002      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072f4:	bf00      	nop
          }
        }
        break;
 80072f6:	f000 bf5c 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072fa:	bf00      	nop
 80072fc:	44020c00 	.word	0x44020c00
 8007300:	03d09000 	.word	0x03d09000
 8007304:	003d0900 	.word	0x003d0900
 8007308:	02faf080 	.word	0x02faf080

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800730c:	4b9e      	ldr	r3, [pc, #632]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800730e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007312:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007316:	633b      	str	r3, [r7, #48]	@ 0x30
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800731e:	d056      	beq.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007326:	f200 808b 	bhi.w	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007330:	d03e      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007338:	f200 8082 	bhi.w	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800733c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007342:	d027      	beq.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800734a:	d879      	bhi.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007352:	d017      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800735a:	d871      	bhi.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735e:	2b00      	cmp	r3, #0
 8007360:	d004      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007368:	d004      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800736a:	e069      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800736c:	f7fb ff94 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8007370:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007372:	e068      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007374:	f107 0314 	add.w	r3, r7, #20
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe f8fb 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007382:	e060      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007384:	f107 0308 	add.w	r3, r7, #8
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe fa5d 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007392:	e058      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007394:	4b7c      	ldr	r3, [pc, #496]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d103      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80073a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073a8:	e04d      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073ae:	e04a      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80073b0:	4b75      	ldr	r3, [pc, #468]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073be:	d103      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80073c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073c4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073c6:	e03e      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073cc:	e03b      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073ce:	4b6e      	ldr	r3, [pc, #440]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073d4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073da:	4b6b      	ldr	r3, [pc, #428]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d10c      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d109      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073ec:	4b66      	ldr	r3, [pc, #408]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	08db      	lsrs	r3, r3, #3
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	4a65      	ldr	r2, [pc, #404]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
 80073fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fe:	e01e      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007400:	4b61      	ldr	r3, [pc, #388]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800740c:	d106      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800740e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007414:	d102      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007416:	4b5e      	ldr	r3, [pc, #376]	@ (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007418:	637b      	str	r3, [r7, #52]	@ 0x34
 800741a:	e010      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800741c:	4b5a      	ldr	r3, [pc, #360]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007428:	d106      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800742a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007430:	d102      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007432:	4b58      	ldr	r3, [pc, #352]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007434:	637b      	str	r3, [r7, #52]	@ 0x34
 8007436:	e002      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800743c:	e003      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800743e:	e002      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007444:	bf00      	nop
          }
        }
        break;
 8007446:	f000 beb4 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800744a:	4b4f      	ldr	r3, [pc, #316]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800744c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007450:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007454:	633b      	str	r3, [r7, #48]	@ 0x30
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800745c:	d056      	beq.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007464:	f200 808b 	bhi.w	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800746e:	d03e      	beq.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007476:	f200 8082 	bhi.w	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007480:	d027      	beq.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007488:	d879      	bhi.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007490:	d017      	beq.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007498:	d871      	bhi.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	2b00      	cmp	r3, #0
 800749e:	d004      	beq.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a6:	d004      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80074a8:	e069      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80074aa:	f7fb ff21 	bl	80032f0 <HAL_RCC_GetPCLK3Freq>
 80074ae:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80074b0:	e068      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b2:	f107 0314 	add.w	r3, r7, #20
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe f85c 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074c0:	e060      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c2:	f107 0308 	add.w	r3, r7, #8
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe f9be 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074d0:	e058      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80074d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d103      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80074e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074e6:	e04d      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074ec:	e04a      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80074ee:	4b26      	ldr	r3, [pc, #152]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80074f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074fc:	d103      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80074fe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007502:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007504:	e03e      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800750a:	e03b      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800750c:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800750e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007512:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007516:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007518:	4b1b      	ldr	r3, [pc, #108]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b02      	cmp	r3, #2
 8007522:	d10c      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d109      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800752a:	4b17      	ldr	r3, [pc, #92]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	08db      	lsrs	r3, r3, #3
 8007530:	f003 0303 	and.w	r3, r3, #3
 8007534:	4a15      	ldr	r2, [pc, #84]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007536:	fa22 f303 	lsr.w	r3, r2, r3
 800753a:	637b      	str	r3, [r7, #52]	@ 0x34
 800753c:	e01e      	b.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800753e:	4b12      	ldr	r3, [pc, #72]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800754a:	d106      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800754c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007552:	d102      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007554:	4b0e      	ldr	r3, [pc, #56]	@ (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007556:	637b      	str	r3, [r7, #52]	@ 0x34
 8007558:	e010      	b.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800755a:	4b0b      	ldr	r3, [pc, #44]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007562:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007566:	d106      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800756e:	d102      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007570:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007572:	637b      	str	r3, [r7, #52]	@ 0x34
 8007574:	e002      	b.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800757a:	e003      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800757c:	e002      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007582:	bf00      	nop
          }
        }
        break;
 8007584:	f000 be15 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007588:	44020c00 	.word	0x44020c00
 800758c:	03d09000 	.word	0x03d09000
 8007590:	003d0900 	.word	0x003d0900
 8007594:	02faf080 	.word	0x02faf080
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007598:	4b9e      	ldr	r3, [pc, #632]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800759a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800759e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80075a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80075aa:	d056      	beq.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80075b2:	f200 808b 	bhi.w	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075bc:	d03e      	beq.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075c4:	f200 8082 	bhi.w	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075ce:	d027      	beq.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075d6:	d879      	bhi.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075de:	d017      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075e6:	d871      	bhi.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075f4:	d004      	beq.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80075f6:	e069      	b.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80075f8:	f7fb fe7a 	bl	80032f0 <HAL_RCC_GetPCLK3Freq>
 80075fc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80075fe:	e068      	b.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007600:	f107 0314 	add.w	r3, r7, #20
 8007604:	4618      	mov	r0, r3
 8007606:	f7fd ffb5 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800760e:	e060      	b.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007610:	f107 0308 	add.w	r3, r7, #8
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe f917 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800761e:	e058      	b.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007620:	4b7c      	ldr	r3, [pc, #496]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b02      	cmp	r3, #2
 800762c:	d103      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800762e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007632:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007634:	e04d      	b.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800763a:	e04a      	b.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800763c:	4b75      	ldr	r3, [pc, #468]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800763e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800764a:	d103      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800764c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007650:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007652:	e03e      	b.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007658:	e03b      	b.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800765a:	4b6e      	ldr	r3, [pc, #440]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800765c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007660:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007664:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007666:	4b6b      	ldr	r3, [pc, #428]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b02      	cmp	r3, #2
 8007670:	d10c      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8007672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d109      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007678:	4b66      	ldr	r3, [pc, #408]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	08db      	lsrs	r3, r3, #3
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	4a65      	ldr	r2, [pc, #404]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007684:	fa22 f303 	lsr.w	r3, r2, r3
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
 800768a:	e01e      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800768c:	4b61      	ldr	r3, [pc, #388]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007698:	d106      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800769a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076a0:	d102      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80076a2:	4b5e      	ldr	r3, [pc, #376]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80076a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a6:	e010      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076b4:	d106      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80076b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076bc:	d102      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076be:	4b58      	ldr	r3, [pc, #352]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80076c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c2:	e002      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80076c8:	e003      	b.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80076ca:	e002      	b.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076d0:	bf00      	nop
          }
        }
        break;
 80076d2:	f000 bd6e 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80076d6:	4b4f      	ldr	r3, [pc, #316]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80076d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80076dc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80076e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80076e8:	d056      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80076f0:	f200 808b 	bhi.w	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076fa:	d03e      	beq.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007702:	f200 8082 	bhi.w	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800770c:	d027      	beq.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007714:	d879      	bhi.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007718:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800771c:	d017      	beq.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007724:	d871      	bhi.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	2b00      	cmp	r3, #0
 800772a:	d004      	beq.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800772c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007732:	d004      	beq.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007734:	e069      	b.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007736:	f7fb fddb 	bl	80032f0 <HAL_RCC_GetPCLK3Freq>
 800773a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800773c:	e068      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800773e:	f107 0314 	add.w	r3, r7, #20
 8007742:	4618      	mov	r0, r3
 8007744:	f7fd ff16 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800774c:	e060      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800774e:	f107 0308 	add.w	r3, r7, #8
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe f878 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800775c:	e058      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800775e:	4b2d      	ldr	r3, [pc, #180]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b02      	cmp	r3, #2
 800776a:	d103      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800776c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007770:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007772:	e04d      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007778:	e04a      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800777a:	4b26      	ldr	r3, [pc, #152]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800777c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007784:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007788:	d103      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800778a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800778e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007790:	e03e      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007796:	e03b      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007798:	4b1e      	ldr	r3, [pc, #120]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800779a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800779e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80077a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d10c      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80077b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077b6:	4b17      	ldr	r3, [pc, #92]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	08db      	lsrs	r3, r3, #3
 80077bc:	f003 0303 	and.w	r3, r3, #3
 80077c0:	4a15      	ldr	r2, [pc, #84]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80077c2:	fa22 f303 	lsr.w	r3, r2, r3
 80077c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c8:	e01e      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077ca:	4b12      	ldr	r3, [pc, #72]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d6:	d106      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80077d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077de:	d102      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077e0:	4b0e      	ldr	r3, [pc, #56]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80077e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e4:	e010      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077f2:	d106      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80077f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077fa:	d102      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077fc:	4b08      	ldr	r3, [pc, #32]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80077fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007800:	e002      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007806:	e003      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8007808:	e002      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800780e:	bf00      	nop
          }
        }
        break;
 8007810:	f000 bccf 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007814:	44020c00 	.word	0x44020c00
 8007818:	03d09000 	.word	0x03d09000
 800781c:	003d0900 	.word	0x003d0900
 8007820:	02faf080 	.word	0x02faf080
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007824:	4b9e      	ldr	r3, [pc, #632]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007826:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800782a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800782e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007836:	d056      	beq.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800783e:	f200 808b 	bhi.w	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007848:	d03e      	beq.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007850:	f200 8082 	bhi.w	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800785a:	d027      	beq.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007862:	d879      	bhi.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800786a:	d017      	beq.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007872:	d871      	bhi.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007880:	d004      	beq.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8007882:	e069      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007884:	f7fb fd34 	bl	80032f0 <HAL_RCC_GetPCLK3Freq>
 8007888:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800788a:	e068      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788c:	f107 0314 	add.w	r3, r7, #20
 8007890:	4618      	mov	r0, r3
 8007892:	f7fd fe6f 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800789a:	e060      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800789c:	f107 0308 	add.w	r3, r7, #8
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fd ffd1 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078aa:	e058      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80078ac:	4b7c      	ldr	r3, [pc, #496]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d103      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80078ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80078c0:	e04d      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078c6:	e04a      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80078c8:	4b75      	ldr	r3, [pc, #468]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d6:	d103      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80078d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80078de:	e03e      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078e4:	e03b      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078e6:	4b6e      	ldr	r3, [pc, #440]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078f2:	4b6b      	ldr	r3, [pc, #428]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d10c      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80078fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d109      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007904:	4b66      	ldr	r3, [pc, #408]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	08db      	lsrs	r3, r3, #3
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	4a65      	ldr	r2, [pc, #404]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007910:	fa22 f303 	lsr.w	r3, r2, r3
 8007914:	637b      	str	r3, [r7, #52]	@ 0x34
 8007916:	e01e      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007918:	4b61      	ldr	r3, [pc, #388]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007924:	d106      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8007926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800792c:	d102      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800792e:	4b5e      	ldr	r3, [pc, #376]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
 8007932:	e010      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007934:	4b5a      	ldr	r3, [pc, #360]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007940:	d106      	bne.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8007942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007948:	d102      	bne.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800794a:	4b58      	ldr	r3, [pc, #352]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800794c:	637b      	str	r3, [r7, #52]	@ 0x34
 800794e:	e002      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007954:	e003      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8007956:	e002      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800795c:	bf00      	nop
          }
        }
        break;
 800795e:	f000 bc28 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007962:	4b4f      	ldr	r3, [pc, #316]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800796c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800796e:	4b4c      	ldr	r3, [pc, #304]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800797a:	d106      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	2b00      	cmp	r3, #0
 8007980:	d103      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8007982:	4b4a      	ldr	r3, [pc, #296]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007984:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007986:	f000 bc14 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007990:	d108      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007992:	f107 0320 	add.w	r3, r7, #32
 8007996:	4618      	mov	r0, r3
 8007998:	f7fd fc82 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079a0:	f000 bc07 	b.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079aa:	d107      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ac:	f107 0314 	add.w	r3, r7, #20
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fd fddf 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079ba:	e3fa      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079c0:	e3f7      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80079c2:	4b37      	ldr	r3, [pc, #220]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80079c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d861      	bhi.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80079d4:	a201      	add	r2, pc, #4	@ (adr r2, 80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	080079f1 	.word	0x080079f1
 80079e0:	08007a01 	.word	0x08007a01
 80079e4:	08007a11 	.word	0x08007a11
 80079e8:	08007a21 	.word	0x08007a21
 80079ec:	08007a27 	.word	0x08007a27
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079f0:	f107 0320 	add.w	r3, r7, #32
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fd fc53 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079fe:	e04e      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a00:	f107 0314 	add.w	r3, r7, #20
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fd fdb5 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a0e:	e046      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a10:	f107 0308 	add.w	r3, r7, #8
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fd ff17 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a1e:	e03e      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a20:	4b23      	ldr	r3, [pc, #140]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8007a22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a24:	e03b      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a26:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a2c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a30:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a32:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d10c      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8007a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a44:	4b16      	ldr	r3, [pc, #88]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	08db      	lsrs	r3, r3, #3
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	4a15      	ldr	r2, [pc, #84]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007a50:	fa22 f303 	lsr.w	r3, r2, r3
 8007a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a56:	e01e      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a58:	4b11      	ldr	r3, [pc, #68]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a64:	d106      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8007a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a6c:	d102      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a72:	e010      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a74:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a80:	d106      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a88:	d102      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a8a:	4b08      	ldr	r3, [pc, #32]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a8e:	e002      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a94:	e003      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8007a96:	e002      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a9c:	bf00      	nop
          }
        }
        break;
 8007a9e:	e388      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007aa0:	44020c00 	.word	0x44020c00
 8007aa4:	03d09000 	.word	0x03d09000
 8007aa8:	003d0900 	.word	0x003d0900
 8007aac:	02faf080 	.word	0x02faf080
 8007ab0:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007ab4:	4ba9      	ldr	r3, [pc, #676]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007abe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	f200 809a 	bhi.w	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8007ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8007aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ace:	bf00      	nop
 8007ad0:	08007b55 	.word	0x08007b55
 8007ad4:	08007bfd 	.word	0x08007bfd
 8007ad8:	08007bfd 	.word	0x08007bfd
 8007adc:	08007bfd 	.word	0x08007bfd
 8007ae0:	08007bfd 	.word	0x08007bfd
 8007ae4:	08007bfd 	.word	0x08007bfd
 8007ae8:	08007bfd 	.word	0x08007bfd
 8007aec:	08007bfd 	.word	0x08007bfd
 8007af0:	08007b65 	.word	0x08007b65
 8007af4:	08007bfd 	.word	0x08007bfd
 8007af8:	08007bfd 	.word	0x08007bfd
 8007afc:	08007bfd 	.word	0x08007bfd
 8007b00:	08007bfd 	.word	0x08007bfd
 8007b04:	08007bfd 	.word	0x08007bfd
 8007b08:	08007bfd 	.word	0x08007bfd
 8007b0c:	08007bfd 	.word	0x08007bfd
 8007b10:	08007b75 	.word	0x08007b75
 8007b14:	08007bfd 	.word	0x08007bfd
 8007b18:	08007bfd 	.word	0x08007bfd
 8007b1c:	08007bfd 	.word	0x08007bfd
 8007b20:	08007bfd 	.word	0x08007bfd
 8007b24:	08007bfd 	.word	0x08007bfd
 8007b28:	08007bfd 	.word	0x08007bfd
 8007b2c:	08007bfd 	.word	0x08007bfd
 8007b30:	08007b85 	.word	0x08007b85
 8007b34:	08007bfd 	.word	0x08007bfd
 8007b38:	08007bfd 	.word	0x08007bfd
 8007b3c:	08007bfd 	.word	0x08007bfd
 8007b40:	08007bfd 	.word	0x08007bfd
 8007b44:	08007bfd 	.word	0x08007bfd
 8007b48:	08007bfd 	.word	0x08007bfd
 8007b4c:	08007bfd 	.word	0x08007bfd
 8007b50:	08007b8b 	.word	0x08007b8b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b54:	f107 0320 	add.w	r3, r7, #32
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fd fba1 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b62:	e04e      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b64:	f107 0314 	add.w	r3, r7, #20
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fd fd03 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b72:	e046      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b74:	f107 0308 	add.w	r3, r7, #8
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fd fe65 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b82:	e03e      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007b84:	4b76      	ldr	r3, [pc, #472]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007b86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b88:	e03b      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b8a:	4b74      	ldr	r3, [pc, #464]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b90:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007b94:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b96:	4b71      	ldr	r3, [pc, #452]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d10c      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8007ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d109      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	08db      	lsrs	r3, r3, #3
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	4a6c      	ldr	r2, [pc, #432]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bba:	e01e      	b.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bbc:	4b67      	ldr	r3, [pc, #412]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bc8:	d106      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8007bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd0:	d102      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007bd2:	4b65      	ldr	r3, [pc, #404]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd6:	e010      	b.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bd8:	4b60      	ldr	r3, [pc, #384]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007be4:	d106      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8007be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bec:	d102      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007bee:	4b5f      	ldr	r3, [pc, #380]	@ (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bf2:	e002      	b.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007bf8:	e003      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8007bfa:	e002      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c00:	bf00      	nop
          }
        }
        break;
 8007c02:	e2d6      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007c04:	4b55      	ldr	r3, [pc, #340]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c0a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c16:	d031      	beq.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c1e:	d866      	bhi.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c24:	d027      	beq.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c2a:	d860      	bhi.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2e:	2b80      	cmp	r3, #128	@ 0x80
 8007c30:	d019      	beq.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	2b80      	cmp	r3, #128	@ 0x80
 8007c36:	d85a      	bhi.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	2b40      	cmp	r3, #64	@ 0x40
 8007c42:	d008      	beq.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007c44:	e053      	b.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c46:	f107 0320 	add.w	r3, r7, #32
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fd fb28 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c54:	e04e      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c56:	f107 0314 	add.w	r3, r7, #20
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fd fc8a 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c64:	e046      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c66:	f107 0308 	add.w	r3, r7, #8
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fd fdec 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c74:	e03e      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007c76:	4b3a      	ldr	r3, [pc, #232]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007c78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c7a:	e03b      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c7c:	4b37      	ldr	r3, [pc, #220]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c82:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007c86:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c88:	4b34      	ldr	r3, [pc, #208]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d10c      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d109      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c9a:	4b30      	ldr	r3, [pc, #192]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	08db      	lsrs	r3, r3, #3
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8007caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cac:	e01e      	b.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cae:	4b2b      	ldr	r3, [pc, #172]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cba:	d106      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cc2:	d102      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007cc4:	4b28      	ldr	r3, [pc, #160]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc8:	e010      	b.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cca:	4b24      	ldr	r3, [pc, #144]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8007cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cde:	d102      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ce0:	4b22      	ldr	r3, [pc, #136]	@ (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce4:	e002      	b.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007cea:	e003      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007cec:	e002      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cf2:	bf00      	nop
          }
        }
        break;
 8007cf4:	e25d      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007cf6:	4b19      	ldr	r3, [pc, #100]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cfc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007d00:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d103      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007d08:	f7fb fadc 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8007d0c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007d0e:	e250      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007d10:	4b12      	ldr	r3, [pc, #72]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d1c:	d10b      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d24:	d107      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d26:	f107 0314 	add.w	r3, r7, #20
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fd fc22 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d34:	e04f      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007d36:	4b09      	ldr	r3, [pc, #36]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d42:	d115      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d4a:	d111      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d4c:	f107 0308 	add.w	r3, r7, #8
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fd fd79 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d5a:	e03c      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007d5c:	44020c00 	.word	0x44020c00
 8007d60:	00bb8000 	.word	0x00bb8000
 8007d64:	03d09000 	.word	0x03d09000
 8007d68:	003d0900 	.word	0x003d0900
 8007d6c:	02faf080 	.word	0x02faf080
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007d70:	4b94      	ldr	r3, [pc, #592]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d10d      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007d82:	d109      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d84:	4b8f      	ldr	r3, [pc, #572]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	08db      	lsrs	r3, r3, #3
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	4a8e      	ldr	r2, [pc, #568]	@ (8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007d90:	fa22 f303 	lsr.w	r3, r2, r3
 8007d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d96:	e01e      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007d98:	4b8a      	ldr	r3, [pc, #552]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da4:	d106      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dac:	d102      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007dae:	4b87      	ldr	r3, [pc, #540]	@ (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db2:	e010      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007db4:	4b83      	ldr	r3, [pc, #524]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dc0:	d106      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007dc8:	d102      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007dca:	4b81      	ldr	r3, [pc, #516]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dce:	e002      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dd4:	e1ed      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007dd6:	e1ec      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007dd8:	4b7a      	ldr	r3, [pc, #488]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dde:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007de2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007dea:	f7fb fa81 	bl	80032f0 <HAL_RCC_GetPCLK3Freq>
 8007dee:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007df0:	e1df      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007df2:	4b74      	ldr	r3, [pc, #464]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dfe:	d10b      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e06:	d107      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e08:	f107 0314 	add.w	r3, r7, #20
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fd fbb1 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e16:	e045      	b.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007e18:	4b6a      	ldr	r3, [pc, #424]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e24:	d10b      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e2c:	d107      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e2e:	f107 0308 	add.w	r3, r7, #8
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd fd08 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3c:	e032      	b.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007e3e:	4b61      	ldr	r3, [pc, #388]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d10d      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e50:	d109      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e52:	4b5c      	ldr	r3, [pc, #368]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	08db      	lsrs	r3, r3, #3
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e64:	e01e      	b.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007e66:	4b57      	ldr	r3, [pc, #348]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e72:	d106      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e7a:	d102      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007e7c:	4b53      	ldr	r3, [pc, #332]	@ (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e80:	e010      	b.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007e82:	4b50      	ldr	r3, [pc, #320]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e8e:	d106      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e92:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007e96:	d102      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007e98:	4b4d      	ldr	r3, [pc, #308]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e9c:	e002      	b.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ea2:	e186      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ea4:	e185      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007ea6:	4b47      	ldr	r3, [pc, #284]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007eac:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007eb0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d103      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007eb8:	f7fb fa04 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8007ebc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007ebe:	e178      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007ec0:	4b40      	ldr	r3, [pc, #256]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ecc:	d10b      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ed4:	d107      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed6:	f107 0314 	add.w	r3, r7, #20
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fd fb4a 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ee4:	e045      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007ee6:	4b37      	ldr	r3, [pc, #220]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ef2:	d10b      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007efa:	d107      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007efc:	f107 0308 	add.w	r3, r7, #8
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fd fca1 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f0a:	e032      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d10d      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007f1e:	d109      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f20:	4b28      	ldr	r3, [pc, #160]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	08db      	lsrs	r3, r3, #3
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	4a27      	ldr	r2, [pc, #156]	@ (8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f32:	e01e      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007f34:	4b23      	ldr	r3, [pc, #140]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f40:	d106      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f48:	d102      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007f4a:	4b20      	ldr	r3, [pc, #128]	@ (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4e:	e010      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007f50:	4b1c      	ldr	r3, [pc, #112]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f5c:	d106      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007f64:	d102      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007f66:	4b1a      	ldr	r3, [pc, #104]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f6a:	e002      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f70:	e11f      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f72:	e11e      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007f74:	4b13      	ldr	r3, [pc, #76]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007f76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d85f      	bhi.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007f86:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8c:	08007f9d 	.word	0x08007f9d
 8007f90:	08007fa5 	.word	0x08007fa5
 8007f94:	08007fb5 	.word	0x08007fb5
 8007f98:	08007fd5 	.word	0x08007fd5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007f9c:	f7fb f960 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8007fa0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007fa2:	e053      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fa4:	f107 0320 	add.w	r3, r7, #32
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fd f979 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fb2:	e04b      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb4:	f107 0314 	add.w	r3, r7, #20
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd fadb 	bl	8005574 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fc2:	e043      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007fc4:	44020c00 	.word	0x44020c00
 8007fc8:	03d09000 	.word	0x03d09000
 8007fcc:	003d0900 	.word	0x003d0900
 8007fd0:	02faf080 	.word	0x02faf080
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fd4:	4b79      	ldr	r3, [pc, #484]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fda:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007fde:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fe0:	4b76      	ldr	r3, [pc, #472]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d10c      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d109      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ff2:	4b72      	ldr	r3, [pc, #456]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	08db      	lsrs	r3, r3, #3
 8007ff8:	f003 0303 	and.w	r3, r3, #3
 8007ffc:	4a70      	ldr	r2, [pc, #448]	@ (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8008002:	637b      	str	r3, [r7, #52]	@ 0x34
 8008004:	e01e      	b.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008006:	4b6d      	ldr	r3, [pc, #436]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800800e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008012:	d106      	bne.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800801a:	d102      	bne.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800801c:	4b69      	ldr	r3, [pc, #420]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008020:	e010      	b.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008022:	4b66      	ldr	r3, [pc, #408]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800802a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800802e:	d106      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008032:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008036:	d102      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008038:	4b63      	ldr	r3, [pc, #396]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800803a:	637b      	str	r3, [r7, #52]	@ 0x34
 800803c:	e002      	b.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008042:	e003      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008044:	e002      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800804a:	bf00      	nop
          }
        }
        break;
 800804c:	e0b1      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800804e:	4b5b      	ldr	r3, [pc, #364]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008054:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008058:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800805a:	4b58      	ldr	r3, [pc, #352]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800805c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b02      	cmp	r3, #2
 8008066:	d106      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	2b00      	cmp	r3, #0
 800806c:	d103      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800806e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
 8008074:	e01f      	b.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008076:	4b51      	ldr	r3, [pc, #324]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800807c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008084:	d106      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	2b40      	cmp	r3, #64	@ 0x40
 800808a:	d103      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800808c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008090:	637b      	str	r3, [r7, #52]	@ 0x34
 8008092:	e010      	b.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008094:	4b49      	ldr	r3, [pc, #292]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800809c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080a0:	d106      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	2b80      	cmp	r3, #128	@ 0x80
 80080a6:	d103      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 80080a8:	f248 0312 	movw	r3, #32786	@ 0x8012
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ae:	e002      	b.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80080b4:	e07d      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080b6:	e07c      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80080b8:	4b40      	ldr	r3, [pc, #256]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80080ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80080c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80080c4:	4b3d      	ldr	r3, [pc, #244]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d0:	d105      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d102      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80080d8:	4b3c      	ldr	r3, [pc, #240]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80080da:	637b      	str	r3, [r7, #52]	@ 0x34
 80080dc:	e031      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80080de:	4b37      	ldr	r3, [pc, #220]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ea:	d10a      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	2b10      	cmp	r3, #16
 80080f0:	d107      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f2:	f107 0320 	add.w	r3, r7, #32
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fd f8d2 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008100:	e01f      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008102:	4b2e      	ldr	r3, [pc, #184]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b02      	cmp	r3, #2
 800810e:	d106      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	2b20      	cmp	r3, #32
 8008114:	d103      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8008116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800811a:	637b      	str	r3, [r7, #52]	@ 0x34
 800811c:	e011      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800811e:	4b27      	ldr	r3, [pc, #156]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800812c:	d106      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	2b30      	cmp	r3, #48	@ 0x30
 8008132:	d103      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8008134:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008138:	637b      	str	r3, [r7, #52]	@ 0x34
 800813a:	e002      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008140:	e037      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008142:	e036      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008144:	4b1d      	ldr	r3, [pc, #116]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008146:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800814a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800814e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008152:	2b10      	cmp	r3, #16
 8008154:	d107      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008156:	f107 0320 	add.w	r3, r7, #32
 800815a:	4618      	mov	r0, r3
 800815c:	f7fd f8a0 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008164:	e025      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008166:	4b15      	ldr	r3, [pc, #84]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800816e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008172:	d10a      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008176:	2b20      	cmp	r3, #32
 8008178:	d107      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	4618      	mov	r0, r3
 8008180:	f7fd fb62 	bl	8005848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
 8008188:	e00f      	b.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800818a:	4b0c      	ldr	r3, [pc, #48]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008196:	d105      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819a:	2b30      	cmp	r3, #48	@ 0x30
 800819c:	d102      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800819e:	4b0b      	ldr	r3, [pc, #44]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80081a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a2:	e002      	b.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80081a8:	e003      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081aa:	e002      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081b0:	bf00      	nop
    }
  }

  return (frequency);
 80081b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	373c      	adds	r7, #60	@ 0x3c
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd90      	pop	{r4, r7, pc}
 80081bc:	44020c00 	.word	0x44020c00
 80081c0:	03d09000 	.word	0x03d09000
 80081c4:	003d0900 	.word	0x003d0900
 80081c8:	02faf080 	.word	0x02faf080
 80081cc:	02dc6c00 	.word	0x02dc6c00

080081d0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80081d8:	4b48      	ldr	r3, [pc, #288]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a47      	ldr	r2, [pc, #284]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 80081de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081e4:	f7f9 f8de 	bl	80013a4 <HAL_GetTick>
 80081e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081ea:	e008      	b.n	80081fe <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081ec:	f7f9 f8da 	bl	80013a4 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d901      	bls.n	80081fe <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e07a      	b.n	80082f4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081fe:	4b3f      	ldr	r3, [pc, #252]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1f0      	bne.n	80081ec <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800820a:	4b3c      	ldr	r3, [pc, #240]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 800820c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6811      	ldr	r1, [r2, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6852      	ldr	r2, [r2, #4]
 800821e:	0212      	lsls	r2, r2, #8
 8008220:	430a      	orrs	r2, r1
 8008222:	4936      	ldr	r1, [pc, #216]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 8008224:	4313      	orrs	r3, r2
 8008226:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	3b01      	subs	r3, #1
 800822e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	3b01      	subs	r3, #1
 8008238:	025b      	lsls	r3, r3, #9
 800823a:	b29b      	uxth	r3, r3
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	3b01      	subs	r3, #1
 8008244:	041b      	lsls	r3, r3, #16
 8008246:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	3b01      	subs	r3, #1
 8008252:	061b      	lsls	r3, r3, #24
 8008254:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008258:	4928      	ldr	r1, [pc, #160]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 800825a:	4313      	orrs	r3, r2
 800825c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800825e:	4b27      	ldr	r3, [pc, #156]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	f023 020c 	bic.w	r2, r3, #12
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	4924      	ldr	r1, [pc, #144]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 800826c:	4313      	orrs	r3, r2
 800826e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008270:	4b22      	ldr	r3, [pc, #136]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 8008272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008274:	f023 0220 	bic.w	r2, r3, #32
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	491f      	ldr	r1, [pc, #124]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 800827e:	4313      	orrs	r3, r2
 8008280:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008282:	4b1e      	ldr	r3, [pc, #120]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 8008284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828a:	491c      	ldr	r1, [pc, #112]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 800828c:	4313      	orrs	r3, r2
 800828e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008290:	4b1a      	ldr	r3, [pc, #104]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 8008292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008294:	4a19      	ldr	r2, [pc, #100]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 8008296:	f023 0310 	bic.w	r3, r3, #16
 800829a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800829c:	4b17      	ldr	r3, [pc, #92]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 800829e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082a4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6a12      	ldr	r2, [r2, #32]
 80082ac:	00d2      	lsls	r2, r2, #3
 80082ae:	4913      	ldr	r1, [pc, #76]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80082b4:	4b11      	ldr	r3, [pc, #68]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	4a10      	ldr	r2, [pc, #64]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 80082ba:	f043 0310 	orr.w	r3, r3, #16
 80082be:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80082c0:	4b0e      	ldr	r3, [pc, #56]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a0d      	ldr	r2, [pc, #52]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 80082c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082cc:	f7f9 f86a 	bl	80013a4 <HAL_GetTick>
 80082d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082d2:	e008      	b.n	80082e6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082d4:	f7f9 f866 	bl	80013a4 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d901      	bls.n	80082e6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e006      	b.n	80082f4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082e6:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <RCCEx_PLL2_Config+0x12c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f0      	beq.n	80082d4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80082f2:	2300      	movs	r3, #0

}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	44020c00 	.word	0x44020c00

08008300 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008308:	4b48      	ldr	r3, [pc, #288]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a47      	ldr	r2, [pc, #284]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 800830e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008312:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008314:	f7f9 f846 	bl	80013a4 <HAL_GetTick>
 8008318:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800831a:	e008      	b.n	800832e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800831c:	f7f9 f842 	bl	80013a4 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	2b02      	cmp	r3, #2
 8008328:	d901      	bls.n	800832e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e07a      	b.n	8008424 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800832e:	4b3f      	ldr	r3, [pc, #252]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1f0      	bne.n	800831c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800833a:	4b3c      	ldr	r3, [pc, #240]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 800833c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008342:	f023 0303 	bic.w	r3, r3, #3
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6811      	ldr	r1, [r2, #0]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	6852      	ldr	r2, [r2, #4]
 800834e:	0212      	lsls	r2, r2, #8
 8008350:	430a      	orrs	r2, r1
 8008352:	4936      	ldr	r1, [pc, #216]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 8008354:	4313      	orrs	r3, r2
 8008356:	630b      	str	r3, [r1, #48]	@ 0x30
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	3b01      	subs	r3, #1
 800835e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	3b01      	subs	r3, #1
 8008368:	025b      	lsls	r3, r3, #9
 800836a:	b29b      	uxth	r3, r3
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	3b01      	subs	r3, #1
 8008374:	041b      	lsls	r3, r3, #16
 8008376:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	3b01      	subs	r3, #1
 8008382:	061b      	lsls	r3, r3, #24
 8008384:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008388:	4928      	ldr	r1, [pc, #160]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 800838a:	4313      	orrs	r3, r2
 800838c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800838e:	4b27      	ldr	r3, [pc, #156]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 8008390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008392:	f023 020c 	bic.w	r2, r3, #12
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	4924      	ldr	r1, [pc, #144]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 800839c:	4313      	orrs	r3, r2
 800839e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80083a0:	4b22      	ldr	r3, [pc, #136]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a4:	f023 0220 	bic.w	r2, r3, #32
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	491f      	ldr	r1, [pc, #124]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80083b2:	4b1e      	ldr	r3, [pc, #120]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	491c      	ldr	r1, [pc, #112]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80083c0:	4b1a      	ldr	r3, [pc, #104]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c4:	4a19      	ldr	r2, [pc, #100]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083c6:	f023 0310 	bic.w	r3, r3, #16
 80083ca:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80083cc:	4b17      	ldr	r3, [pc, #92]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083d4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6a12      	ldr	r2, [r2, #32]
 80083dc:	00d2      	lsls	r2, r2, #3
 80083de:	4913      	ldr	r1, [pc, #76]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80083e4:	4b11      	ldr	r3, [pc, #68]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e8:	4a10      	ldr	r2, [pc, #64]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083ea:	f043 0310 	orr.w	r3, r3, #16
 80083ee:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80083f0:	4b0e      	ldr	r3, [pc, #56]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a0d      	ldr	r2, [pc, #52]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 80083f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80083fc:	f7f8 ffd2 	bl	80013a4 <HAL_GetTick>
 8008400:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008402:	e008      	b.n	8008416 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008404:	f7f8 ffce 	bl	80013a4 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e006      	b.n	8008424 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008416:	4b05      	ldr	r3, [pc, #20]	@ (800842c <RCCEx_PLL3_Config+0x12c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f0      	beq.n	8008404 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	44020c00 	.word	0x44020c00

08008430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e049      	b.n	80084d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7f8 fde4 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f000 fce4 	bl	8008e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d001      	beq.n	80084f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e07c      	b.n	80085f2 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0201 	orr.w	r2, r2, #1
 800850e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a3a      	ldr	r2, [pc, #232]	@ (8008600 <HAL_TIM_Base_Start_IT+0x120>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d04a      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a39      	ldr	r2, [pc, #228]	@ (8008604 <HAL_TIM_Base_Start_IT+0x124>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d045      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800852c:	d040      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008536:	d03b      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a32      	ldr	r2, [pc, #200]	@ (8008608 <HAL_TIM_Base_Start_IT+0x128>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d036      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a31      	ldr	r2, [pc, #196]	@ (800860c <HAL_TIM_Base_Start_IT+0x12c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d031      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a2f      	ldr	r2, [pc, #188]	@ (8008610 <HAL_TIM_Base_Start_IT+0x130>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d02c      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a2e      	ldr	r2, [pc, #184]	@ (8008614 <HAL_TIM_Base_Start_IT+0x134>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d027      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a2c      	ldr	r2, [pc, #176]	@ (8008618 <HAL_TIM_Base_Start_IT+0x138>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d022      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a2b      	ldr	r2, [pc, #172]	@ (800861c <HAL_TIM_Base_Start_IT+0x13c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d01d      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a29      	ldr	r2, [pc, #164]	@ (8008620 <HAL_TIM_Base_Start_IT+0x140>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d018      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a28      	ldr	r2, [pc, #160]	@ (8008624 <HAL_TIM_Base_Start_IT+0x144>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d013      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a26      	ldr	r2, [pc, #152]	@ (8008628 <HAL_TIM_Base_Start_IT+0x148>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00e      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a25      	ldr	r2, [pc, #148]	@ (800862c <HAL_TIM_Base_Start_IT+0x14c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d009      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a23      	ldr	r2, [pc, #140]	@ (8008630 <HAL_TIM_Base_Start_IT+0x150>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d004      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0xd0>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a22      	ldr	r2, [pc, #136]	@ (8008634 <HAL_TIM_Base_Start_IT+0x154>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d115      	bne.n	80085dc <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	4b20      	ldr	r3, [pc, #128]	@ (8008638 <HAL_TIM_Base_Start_IT+0x158>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b06      	cmp	r3, #6
 80085c0:	d015      	beq.n	80085ee <HAL_TIM_Base_Start_IT+0x10e>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c8:	d011      	beq.n	80085ee <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f042 0201 	orr.w	r2, r2, #1
 80085d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085da:	e008      	b.n	80085ee <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0201 	orr.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	e000      	b.n	80085f0 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40012c00 	.word	0x40012c00
 8008604:	50012c00 	.word	0x50012c00
 8008608:	40000400 	.word	0x40000400
 800860c:	50000400 	.word	0x50000400
 8008610:	40000800 	.word	0x40000800
 8008614:	50000800 	.word	0x50000800
 8008618:	40000c00 	.word	0x40000c00
 800861c:	50000c00 	.word	0x50000c00
 8008620:	40013400 	.word	0x40013400
 8008624:	50013400 	.word	0x50013400
 8008628:	40001800 	.word	0x40001800
 800862c:	50001800 	.word	0x50001800
 8008630:	40014000 	.word	0x40014000
 8008634:	50014000 	.word	0x50014000
 8008638:	00010007 	.word	0x00010007

0800863c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e049      	b.n	80086e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d106      	bne.n	8008668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7f8 fcbe 	bl	8000fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	4619      	mov	r1, r3
 800867a:	4610      	mov	r0, r2
 800867c:	f000 fbde 	bl	8008e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d020      	beq.n	800874e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d01b      	beq.n	800874e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f06f 0202 	mvn.w	r2, #2
 800871e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	f003 0303 	and.w	r3, r3, #3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fb63 	bl	8008e00 <HAL_TIM_IC_CaptureCallback>
 800873a:	e005      	b.n	8008748 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fb55 	bl	8008dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fb66 	bl	8008e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d020      	beq.n	800879a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	d01b      	beq.n	800879a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f06f 0204 	mvn.w	r2, #4
 800876a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fb3d 	bl	8008e00 <HAL_TIM_IC_CaptureCallback>
 8008786:	e005      	b.n	8008794 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb2f 	bl	8008dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fb40 	bl	8008e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f003 0308 	and.w	r3, r3, #8
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d020      	beq.n	80087e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f003 0308 	and.w	r3, r3, #8
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d01b      	beq.n	80087e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f06f 0208 	mvn.w	r2, #8
 80087b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2204      	movs	r2, #4
 80087bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fb17 	bl	8008e00 <HAL_TIM_IC_CaptureCallback>
 80087d2:	e005      	b.n	80087e0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fb09 	bl	8008dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fb1a 	bl	8008e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f003 0310 	and.w	r3, r3, #16
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d020      	beq.n	8008832 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f003 0310 	and.w	r3, r3, #16
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d01b      	beq.n	8008832 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f06f 0210 	mvn.w	r2, #16
 8008802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2208      	movs	r2, #8
 8008808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 faf1 	bl	8008e00 <HAL_TIM_IC_CaptureCallback>
 800881e:	e005      	b.n	800882c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fae3 	bl	8008dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 faf4 	bl	8008e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00c      	beq.n	8008856 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d007      	beq.n	8008856 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f06f 0201 	mvn.w	r2, #1
 800884e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7f8 f9c5 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00c      	beq.n	8008884 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800887c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 f952 	bl	8009b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00c      	beq.n	80088a8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008894:	2b00      	cmp	r3, #0
 8008896:	d007      	beq.n	80088a8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80088a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 f94a 	bl	8009b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00c      	beq.n	80088cc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 faae 	bl	8008e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00c      	beq.n	80088f0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d007      	beq.n	80088f0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f06f 0220 	mvn.w	r2, #32
 80088e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 f912 	bl	8009b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00c      	beq.n	8008914 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d007      	beq.n	8008914 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800890c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 f91e 	bl	8009b50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00c      	beq.n	8008938 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d007      	beq.n	8008938 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 f916 	bl	8009b64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00c      	beq.n	800895c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d007      	beq.n	800895c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f90e 	bl	8009b78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00c      	beq.n	8008980 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d007      	beq.n	8008980 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 f906 	bl	8009b8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008980:	bf00      	nop
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d101      	bne.n	80089a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089a2:	2302      	movs	r3, #2
 80089a4:	e0ff      	b.n	8008ba6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b14      	cmp	r3, #20
 80089b2:	f200 80f0 	bhi.w	8008b96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089b6:	a201      	add	r2, pc, #4	@ (adr r2, 80089bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	08008a11 	.word	0x08008a11
 80089c0:	08008b97 	.word	0x08008b97
 80089c4:	08008b97 	.word	0x08008b97
 80089c8:	08008b97 	.word	0x08008b97
 80089cc:	08008a51 	.word	0x08008a51
 80089d0:	08008b97 	.word	0x08008b97
 80089d4:	08008b97 	.word	0x08008b97
 80089d8:	08008b97 	.word	0x08008b97
 80089dc:	08008a93 	.word	0x08008a93
 80089e0:	08008b97 	.word	0x08008b97
 80089e4:	08008b97 	.word	0x08008b97
 80089e8:	08008b97 	.word	0x08008b97
 80089ec:	08008ad3 	.word	0x08008ad3
 80089f0:	08008b97 	.word	0x08008b97
 80089f4:	08008b97 	.word	0x08008b97
 80089f8:	08008b97 	.word	0x08008b97
 80089fc:	08008b15 	.word	0x08008b15
 8008a00:	08008b97 	.word	0x08008b97
 8008a04:	08008b97 	.word	0x08008b97
 8008a08:	08008b97 	.word	0x08008b97
 8008a0c:	08008b55 	.word	0x08008b55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68b9      	ldr	r1, [r7, #8]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fb3a 	bl	8009090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0208 	orr.w	r2, r2, #8
 8008a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	699a      	ldr	r2, [r3, #24]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0204 	bic.w	r2, r2, #4
 8008a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6999      	ldr	r1, [r3, #24]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	691a      	ldr	r2, [r3, #16]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	619a      	str	r2, [r3, #24]
      break;
 8008a4e:	e0a5      	b.n	8008b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fbdc 	bl	8009214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	699a      	ldr	r2, [r3, #24]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6999      	ldr	r1, [r3, #24]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	021a      	lsls	r2, r3, #8
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	619a      	str	r2, [r3, #24]
      break;
 8008a90:	e084      	b.n	8008b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fc6b 	bl	8009374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69da      	ldr	r2, [r3, #28]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f042 0208 	orr.w	r2, r2, #8
 8008aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69da      	ldr	r2, [r3, #28]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0204 	bic.w	r2, r2, #4
 8008abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69d9      	ldr	r1, [r3, #28]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	691a      	ldr	r2, [r3, #16]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	61da      	str	r2, [r3, #28]
      break;
 8008ad0:	e064      	b.n	8008b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fcf9 	bl	80094d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69da      	ldr	r2, [r3, #28]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69da      	ldr	r2, [r3, #28]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69d9      	ldr	r1, [r3, #28]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	021a      	lsls	r2, r3, #8
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	61da      	str	r2, [r3, #28]
      break;
 8008b12:	e043      	b.n	8008b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 fd88 	bl	8009630 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0208 	orr.w	r2, r2, #8
 8008b2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 0204 	bic.w	r2, r2, #4
 8008b3e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	691a      	ldr	r2, [r3, #16]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b52:	e023      	b.n	8008b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fdea 	bl	8009734 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	021a      	lsls	r2, r3, #8
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b94:	e002      	b.n	8008b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	75fb      	strb	r3, [r7, #23]
      break;
 8008b9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop

08008bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d101      	bne.n	8008bcc <HAL_TIM_ConfigClockSource+0x1c>
 8008bc8:	2302      	movs	r3, #2
 8008bca:	e0fe      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x21a>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008bea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c08:	f000 80c9 	beq.w	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c10:	f200 80ce 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008c14:	4a6f      	ldr	r2, [pc, #444]	@ (8008dd4 <HAL_TIM_ConfigClockSource+0x224>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	f000 80c1 	beq.w	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008c1c:	4a6d      	ldr	r2, [pc, #436]	@ (8008dd4 <HAL_TIM_ConfigClockSource+0x224>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	f200 80c6 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008c24:	4a6c      	ldr	r2, [pc, #432]	@ (8008dd8 <HAL_TIM_ConfigClockSource+0x228>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	f000 80b9 	beq.w	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8008dd8 <HAL_TIM_ConfigClockSource+0x228>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	f200 80be 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008c34:	4a69      	ldr	r2, [pc, #420]	@ (8008ddc <HAL_TIM_ConfigClockSource+0x22c>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	f000 80b1 	beq.w	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008c3c:	4a67      	ldr	r2, [pc, #412]	@ (8008ddc <HAL_TIM_ConfigClockSource+0x22c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	f200 80b6 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008c44:	4a66      	ldr	r2, [pc, #408]	@ (8008de0 <HAL_TIM_ConfigClockSource+0x230>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	f000 80a9 	beq.w	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008c4c:	4a64      	ldr	r2, [pc, #400]	@ (8008de0 <HAL_TIM_ConfigClockSource+0x230>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	f200 80ae 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008c54:	4a63      	ldr	r2, [pc, #396]	@ (8008de4 <HAL_TIM_ConfigClockSource+0x234>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	f000 80a1 	beq.w	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008c5c:	4a61      	ldr	r2, [pc, #388]	@ (8008de4 <HAL_TIM_ConfigClockSource+0x234>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	f200 80a6 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008c64:	4a60      	ldr	r2, [pc, #384]	@ (8008de8 <HAL_TIM_ConfigClockSource+0x238>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	f000 8099 	beq.w	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8008de8 <HAL_TIM_ConfigClockSource+0x238>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f200 809e 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008c74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c78:	f000 8091 	beq.w	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008c7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c80:	f200 8096 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008c84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c88:	f000 8089 	beq.w	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008c8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c90:	f200 808e 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c98:	d03e      	beq.n	8008d18 <HAL_TIM_ConfigClockSource+0x168>
 8008c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c9e:	f200 8087 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ca6:	f000 8086 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x206>
 8008caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cae:	d87f      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008cb0:	2b70      	cmp	r3, #112	@ 0x70
 8008cb2:	d01a      	beq.n	8008cea <HAL_TIM_ConfigClockSource+0x13a>
 8008cb4:	2b70      	cmp	r3, #112	@ 0x70
 8008cb6:	d87b      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008cb8:	2b60      	cmp	r3, #96	@ 0x60
 8008cba:	d050      	beq.n	8008d5e <HAL_TIM_ConfigClockSource+0x1ae>
 8008cbc:	2b60      	cmp	r3, #96	@ 0x60
 8008cbe:	d877      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008cc0:	2b50      	cmp	r3, #80	@ 0x50
 8008cc2:	d03c      	beq.n	8008d3e <HAL_TIM_ConfigClockSource+0x18e>
 8008cc4:	2b50      	cmp	r3, #80	@ 0x50
 8008cc6:	d873      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008cc8:	2b40      	cmp	r3, #64	@ 0x40
 8008cca:	d058      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x1ce>
 8008ccc:	2b40      	cmp	r3, #64	@ 0x40
 8008cce:	d86f      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008cd0:	2b30      	cmp	r3, #48	@ 0x30
 8008cd2:	d064      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008cd4:	2b30      	cmp	r3, #48	@ 0x30
 8008cd6:	d86b      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008cd8:	2b20      	cmp	r3, #32
 8008cda:	d060      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008cdc:	2b20      	cmp	r3, #32
 8008cde:	d867      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x200>
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d05c      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008ce4:	2b10      	cmp	r3, #16
 8008ce6:	d05a      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x1ee>
 8008ce8:	e062      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cfa:	f000 fe1b 	bl	8009934 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	609a      	str	r2, [r3, #8]
      break;
 8008d16:	e04f      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d28:	f000 fe04 	bl	8009934 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689a      	ldr	r2, [r3, #8]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d3a:	609a      	str	r2, [r3, #8]
      break;
 8008d3c:	e03c      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f000 fd76 	bl	800983c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2150      	movs	r1, #80	@ 0x50
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fdcf 	bl	80098fa <TIM_ITRx_SetConfig>
      break;
 8008d5c:	e02c      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f000 fd95 	bl	800989a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2160      	movs	r1, #96	@ 0x60
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fdbf 	bl	80098fa <TIM_ITRx_SetConfig>
      break;
 8008d7c:	e01c      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f000 fd56 	bl	800983c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2140      	movs	r1, #64	@ 0x40
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fdaf 	bl	80098fa <TIM_ITRx_SetConfig>
      break;
 8008d9c:	e00c      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f000 fda6 	bl	80098fa <TIM_ITRx_SetConfig>
      break;
 8008dae:	e003      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
      break;
 8008db4:	e000      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8008db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	00100070 	.word	0x00100070
 8008dd8:	00100060 	.word	0x00100060
 8008ddc:	00100050 	.word	0x00100050
 8008de0:	00100040 	.word	0x00100040
 8008de4:	00100030 	.word	0x00100030
 8008de8:	00100020 	.word	0x00100020

08008dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a7a      	ldr	r2, [pc, #488]	@ (8009038 <TIM_Base_SetConfig+0x1fc>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d02b      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a79      	ldr	r2, [pc, #484]	@ (800903c <TIM_Base_SetConfig+0x200>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d027      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e62:	d023      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e6a:	d01f      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a74      	ldr	r2, [pc, #464]	@ (8009040 <TIM_Base_SetConfig+0x204>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d01b      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a73      	ldr	r2, [pc, #460]	@ (8009044 <TIM_Base_SetConfig+0x208>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d017      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a72      	ldr	r2, [pc, #456]	@ (8009048 <TIM_Base_SetConfig+0x20c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d013      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a71      	ldr	r2, [pc, #452]	@ (800904c <TIM_Base_SetConfig+0x210>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00f      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a70      	ldr	r2, [pc, #448]	@ (8009050 <TIM_Base_SetConfig+0x214>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00b      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a6f      	ldr	r2, [pc, #444]	@ (8009054 <TIM_Base_SetConfig+0x218>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d007      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8009058 <TIM_Base_SetConfig+0x21c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d003      	beq.n	8008eac <TIM_Base_SetConfig+0x70>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a6d      	ldr	r2, [pc, #436]	@ (800905c <TIM_Base_SetConfig+0x220>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d108      	bne.n	8008ebe <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a5d      	ldr	r2, [pc, #372]	@ (8009038 <TIM_Base_SetConfig+0x1fc>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d05b      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a5c      	ldr	r2, [pc, #368]	@ (800903c <TIM_Base_SetConfig+0x200>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d057      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed4:	d053      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008edc:	d04f      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a57      	ldr	r2, [pc, #348]	@ (8009040 <TIM_Base_SetConfig+0x204>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d04b      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a56      	ldr	r2, [pc, #344]	@ (8009044 <TIM_Base_SetConfig+0x208>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d047      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a55      	ldr	r2, [pc, #340]	@ (8009048 <TIM_Base_SetConfig+0x20c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d043      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a54      	ldr	r2, [pc, #336]	@ (800904c <TIM_Base_SetConfig+0x210>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d03f      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a53      	ldr	r2, [pc, #332]	@ (8009050 <TIM_Base_SetConfig+0x214>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d03b      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a52      	ldr	r2, [pc, #328]	@ (8009054 <TIM_Base_SetConfig+0x218>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d037      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a51      	ldr	r2, [pc, #324]	@ (8009058 <TIM_Base_SetConfig+0x21c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d033      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a50      	ldr	r2, [pc, #320]	@ (800905c <TIM_Base_SetConfig+0x220>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d02f      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a4f      	ldr	r2, [pc, #316]	@ (8009060 <TIM_Base_SetConfig+0x224>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d02b      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a4e      	ldr	r2, [pc, #312]	@ (8009064 <TIM_Base_SetConfig+0x228>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d027      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a4d      	ldr	r2, [pc, #308]	@ (8009068 <TIM_Base_SetConfig+0x22c>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d023      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a4c      	ldr	r2, [pc, #304]	@ (800906c <TIM_Base_SetConfig+0x230>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d01f      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a4b      	ldr	r2, [pc, #300]	@ (8009070 <TIM_Base_SetConfig+0x234>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d01b      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a4a      	ldr	r2, [pc, #296]	@ (8009074 <TIM_Base_SetConfig+0x238>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d017      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a49      	ldr	r2, [pc, #292]	@ (8009078 <TIM_Base_SetConfig+0x23c>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d013      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a48      	ldr	r2, [pc, #288]	@ (800907c <TIM_Base_SetConfig+0x240>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00f      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a47      	ldr	r2, [pc, #284]	@ (8009080 <TIM_Base_SetConfig+0x244>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00b      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a46      	ldr	r2, [pc, #280]	@ (8009084 <TIM_Base_SetConfig+0x248>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d007      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a45      	ldr	r2, [pc, #276]	@ (8009088 <TIM_Base_SetConfig+0x24c>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d003      	beq.n	8008f7e <TIM_Base_SetConfig+0x142>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a44      	ldr	r2, [pc, #272]	@ (800908c <TIM_Base_SetConfig+0x250>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d108      	bne.n	8008f90 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	689a      	ldr	r2, [r3, #8]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a20      	ldr	r2, [pc, #128]	@ (8009038 <TIM_Base_SetConfig+0x1fc>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d023      	beq.n	8009004 <TIM_Base_SetConfig+0x1c8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800903c <TIM_Base_SetConfig+0x200>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d01f      	beq.n	8009004 <TIM_Base_SetConfig+0x1c8>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a24      	ldr	r2, [pc, #144]	@ (8009058 <TIM_Base_SetConfig+0x21c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d01b      	beq.n	8009004 <TIM_Base_SetConfig+0x1c8>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a23      	ldr	r2, [pc, #140]	@ (800905c <TIM_Base_SetConfig+0x220>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d017      	beq.n	8009004 <TIM_Base_SetConfig+0x1c8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a28      	ldr	r2, [pc, #160]	@ (8009078 <TIM_Base_SetConfig+0x23c>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d013      	beq.n	8009004 <TIM_Base_SetConfig+0x1c8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a27      	ldr	r2, [pc, #156]	@ (800907c <TIM_Base_SetConfig+0x240>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00f      	beq.n	8009004 <TIM_Base_SetConfig+0x1c8>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a26      	ldr	r2, [pc, #152]	@ (8009080 <TIM_Base_SetConfig+0x244>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d00b      	beq.n	8009004 <TIM_Base_SetConfig+0x1c8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a25      	ldr	r2, [pc, #148]	@ (8009084 <TIM_Base_SetConfig+0x248>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d007      	beq.n	8009004 <TIM_Base_SetConfig+0x1c8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a24      	ldr	r2, [pc, #144]	@ (8009088 <TIM_Base_SetConfig+0x24c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d003      	beq.n	8009004 <TIM_Base_SetConfig+0x1c8>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a23      	ldr	r2, [pc, #140]	@ (800908c <TIM_Base_SetConfig+0x250>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d103      	bne.n	800900c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	691a      	ldr	r2, [r3, #16]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b01      	cmp	r3, #1
 800901c:	d105      	bne.n	800902a <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f023 0201 	bic.w	r2, r3, #1
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	611a      	str	r2, [r3, #16]
  }
}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	40012c00 	.word	0x40012c00
 800903c:	50012c00 	.word	0x50012c00
 8009040:	40000400 	.word	0x40000400
 8009044:	50000400 	.word	0x50000400
 8009048:	40000800 	.word	0x40000800
 800904c:	50000800 	.word	0x50000800
 8009050:	40000c00 	.word	0x40000c00
 8009054:	50000c00 	.word	0x50000c00
 8009058:	40013400 	.word	0x40013400
 800905c:	50013400 	.word	0x50013400
 8009060:	40001800 	.word	0x40001800
 8009064:	50001800 	.word	0x50001800
 8009068:	40001c00 	.word	0x40001c00
 800906c:	50001c00 	.word	0x50001c00
 8009070:	40002000 	.word	0x40002000
 8009074:	50002000 	.word	0x50002000
 8009078:	40014000 	.word	0x40014000
 800907c:	50014000 	.word	0x50014000
 8009080:	40014400 	.word	0x40014400
 8009084:	50014400 	.word	0x50014400
 8009088:	40014800 	.word	0x40014800
 800908c:	50014800 	.word	0x50014800

08009090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009090:	b480      	push	{r7}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	f023 0201 	bic.w	r2, r3, #1
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 0303 	bic.w	r3, r3, #3
 80090ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f023 0302 	bic.w	r3, r3, #2
 80090dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a40      	ldr	r2, [pc, #256]	@ (80091ec <TIM_OC1_SetConfig+0x15c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d023      	beq.n	8009138 <TIM_OC1_SetConfig+0xa8>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a3f      	ldr	r2, [pc, #252]	@ (80091f0 <TIM_OC1_SetConfig+0x160>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d01f      	beq.n	8009138 <TIM_OC1_SetConfig+0xa8>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a3e      	ldr	r2, [pc, #248]	@ (80091f4 <TIM_OC1_SetConfig+0x164>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d01b      	beq.n	8009138 <TIM_OC1_SetConfig+0xa8>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a3d      	ldr	r2, [pc, #244]	@ (80091f8 <TIM_OC1_SetConfig+0x168>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d017      	beq.n	8009138 <TIM_OC1_SetConfig+0xa8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a3c      	ldr	r2, [pc, #240]	@ (80091fc <TIM_OC1_SetConfig+0x16c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d013      	beq.n	8009138 <TIM_OC1_SetConfig+0xa8>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a3b      	ldr	r2, [pc, #236]	@ (8009200 <TIM_OC1_SetConfig+0x170>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00f      	beq.n	8009138 <TIM_OC1_SetConfig+0xa8>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a3a      	ldr	r2, [pc, #232]	@ (8009204 <TIM_OC1_SetConfig+0x174>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00b      	beq.n	8009138 <TIM_OC1_SetConfig+0xa8>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a39      	ldr	r2, [pc, #228]	@ (8009208 <TIM_OC1_SetConfig+0x178>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d007      	beq.n	8009138 <TIM_OC1_SetConfig+0xa8>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a38      	ldr	r2, [pc, #224]	@ (800920c <TIM_OC1_SetConfig+0x17c>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d003      	beq.n	8009138 <TIM_OC1_SetConfig+0xa8>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a37      	ldr	r2, [pc, #220]	@ (8009210 <TIM_OC1_SetConfig+0x180>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d10c      	bne.n	8009152 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f023 0308 	bic.w	r3, r3, #8
 800913e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	4313      	orrs	r3, r2
 8009148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f023 0304 	bic.w	r3, r3, #4
 8009150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a25      	ldr	r2, [pc, #148]	@ (80091ec <TIM_OC1_SetConfig+0x15c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d023      	beq.n	80091a2 <TIM_OC1_SetConfig+0x112>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a24      	ldr	r2, [pc, #144]	@ (80091f0 <TIM_OC1_SetConfig+0x160>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d01f      	beq.n	80091a2 <TIM_OC1_SetConfig+0x112>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a23      	ldr	r2, [pc, #140]	@ (80091f4 <TIM_OC1_SetConfig+0x164>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d01b      	beq.n	80091a2 <TIM_OC1_SetConfig+0x112>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a22      	ldr	r2, [pc, #136]	@ (80091f8 <TIM_OC1_SetConfig+0x168>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d017      	beq.n	80091a2 <TIM_OC1_SetConfig+0x112>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a21      	ldr	r2, [pc, #132]	@ (80091fc <TIM_OC1_SetConfig+0x16c>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d013      	beq.n	80091a2 <TIM_OC1_SetConfig+0x112>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a20      	ldr	r2, [pc, #128]	@ (8009200 <TIM_OC1_SetConfig+0x170>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d00f      	beq.n	80091a2 <TIM_OC1_SetConfig+0x112>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a1f      	ldr	r2, [pc, #124]	@ (8009204 <TIM_OC1_SetConfig+0x174>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d00b      	beq.n	80091a2 <TIM_OC1_SetConfig+0x112>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a1e      	ldr	r2, [pc, #120]	@ (8009208 <TIM_OC1_SetConfig+0x178>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d007      	beq.n	80091a2 <TIM_OC1_SetConfig+0x112>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a1d      	ldr	r2, [pc, #116]	@ (800920c <TIM_OC1_SetConfig+0x17c>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d003      	beq.n	80091a2 <TIM_OC1_SetConfig+0x112>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a1c      	ldr	r2, [pc, #112]	@ (8009210 <TIM_OC1_SetConfig+0x180>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d111      	bne.n	80091c6 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	621a      	str	r2, [r3, #32]
}
 80091e0:	bf00      	nop
 80091e2:	371c      	adds	r7, #28
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	40012c00 	.word	0x40012c00
 80091f0:	50012c00 	.word	0x50012c00
 80091f4:	40013400 	.word	0x40013400
 80091f8:	50013400 	.word	0x50013400
 80091fc:	40014000 	.word	0x40014000
 8009200:	50014000 	.word	0x50014000
 8009204:	40014400 	.word	0x40014400
 8009208:	50014400 	.word	0x50014400
 800920c:	40014800 	.word	0x40014800
 8009210:	50014800 	.word	0x50014800

08009214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	f023 0210 	bic.w	r2, r3, #16
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800924e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	021b      	lsls	r3, r3, #8
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	4313      	orrs	r3, r2
 800925a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f023 0320 	bic.w	r3, r3, #32
 8009262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	4313      	orrs	r3, r2
 800926e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a36      	ldr	r2, [pc, #216]	@ (800934c <TIM_OC2_SetConfig+0x138>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00b      	beq.n	8009290 <TIM_OC2_SetConfig+0x7c>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a35      	ldr	r2, [pc, #212]	@ (8009350 <TIM_OC2_SetConfig+0x13c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d007      	beq.n	8009290 <TIM_OC2_SetConfig+0x7c>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a34      	ldr	r2, [pc, #208]	@ (8009354 <TIM_OC2_SetConfig+0x140>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d003      	beq.n	8009290 <TIM_OC2_SetConfig+0x7c>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a33      	ldr	r2, [pc, #204]	@ (8009358 <TIM_OC2_SetConfig+0x144>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d10d      	bne.n	80092ac <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a27      	ldr	r2, [pc, #156]	@ (800934c <TIM_OC2_SetConfig+0x138>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d023      	beq.n	80092fc <TIM_OC2_SetConfig+0xe8>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a26      	ldr	r2, [pc, #152]	@ (8009350 <TIM_OC2_SetConfig+0x13c>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d01f      	beq.n	80092fc <TIM_OC2_SetConfig+0xe8>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a25      	ldr	r2, [pc, #148]	@ (8009354 <TIM_OC2_SetConfig+0x140>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d01b      	beq.n	80092fc <TIM_OC2_SetConfig+0xe8>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a24      	ldr	r2, [pc, #144]	@ (8009358 <TIM_OC2_SetConfig+0x144>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d017      	beq.n	80092fc <TIM_OC2_SetConfig+0xe8>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a23      	ldr	r2, [pc, #140]	@ (800935c <TIM_OC2_SetConfig+0x148>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d013      	beq.n	80092fc <TIM_OC2_SetConfig+0xe8>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a22      	ldr	r2, [pc, #136]	@ (8009360 <TIM_OC2_SetConfig+0x14c>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00f      	beq.n	80092fc <TIM_OC2_SetConfig+0xe8>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a21      	ldr	r2, [pc, #132]	@ (8009364 <TIM_OC2_SetConfig+0x150>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00b      	beq.n	80092fc <TIM_OC2_SetConfig+0xe8>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a20      	ldr	r2, [pc, #128]	@ (8009368 <TIM_OC2_SetConfig+0x154>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d007      	beq.n	80092fc <TIM_OC2_SetConfig+0xe8>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a1f      	ldr	r2, [pc, #124]	@ (800936c <TIM_OC2_SetConfig+0x158>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d003      	beq.n	80092fc <TIM_OC2_SetConfig+0xe8>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009370 <TIM_OC2_SetConfig+0x15c>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d113      	bne.n	8009324 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800930a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	4313      	orrs	r3, r2
 8009322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	621a      	str	r2, [r3, #32]
}
 800933e:	bf00      	nop
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	40012c00 	.word	0x40012c00
 8009350:	50012c00 	.word	0x50012c00
 8009354:	40013400 	.word	0x40013400
 8009358:	50013400 	.word	0x50013400
 800935c:	40014000 	.word	0x40014000
 8009360:	50014000 	.word	0x50014000
 8009364:	40014400 	.word	0x40014400
 8009368:	50014400 	.word	0x50014400
 800936c:	40014800 	.word	0x40014800
 8009370:	50014800 	.word	0x50014800

08009374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 0303 	bic.w	r3, r3, #3
 80093ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	021b      	lsls	r3, r3, #8
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a35      	ldr	r2, [pc, #212]	@ (80094a8 <TIM_OC3_SetConfig+0x134>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00b      	beq.n	80093ee <TIM_OC3_SetConfig+0x7a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a34      	ldr	r2, [pc, #208]	@ (80094ac <TIM_OC3_SetConfig+0x138>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d007      	beq.n	80093ee <TIM_OC3_SetConfig+0x7a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a33      	ldr	r2, [pc, #204]	@ (80094b0 <TIM_OC3_SetConfig+0x13c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d003      	beq.n	80093ee <TIM_OC3_SetConfig+0x7a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a32      	ldr	r2, [pc, #200]	@ (80094b4 <TIM_OC3_SetConfig+0x140>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d10d      	bne.n	800940a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	4313      	orrs	r3, r2
 8009400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a26      	ldr	r2, [pc, #152]	@ (80094a8 <TIM_OC3_SetConfig+0x134>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d023      	beq.n	800945a <TIM_OC3_SetConfig+0xe6>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a25      	ldr	r2, [pc, #148]	@ (80094ac <TIM_OC3_SetConfig+0x138>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d01f      	beq.n	800945a <TIM_OC3_SetConfig+0xe6>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a24      	ldr	r2, [pc, #144]	@ (80094b0 <TIM_OC3_SetConfig+0x13c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d01b      	beq.n	800945a <TIM_OC3_SetConfig+0xe6>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a23      	ldr	r2, [pc, #140]	@ (80094b4 <TIM_OC3_SetConfig+0x140>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d017      	beq.n	800945a <TIM_OC3_SetConfig+0xe6>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a22      	ldr	r2, [pc, #136]	@ (80094b8 <TIM_OC3_SetConfig+0x144>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d013      	beq.n	800945a <TIM_OC3_SetConfig+0xe6>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a21      	ldr	r2, [pc, #132]	@ (80094bc <TIM_OC3_SetConfig+0x148>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00f      	beq.n	800945a <TIM_OC3_SetConfig+0xe6>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a20      	ldr	r2, [pc, #128]	@ (80094c0 <TIM_OC3_SetConfig+0x14c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00b      	beq.n	800945a <TIM_OC3_SetConfig+0xe6>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a1f      	ldr	r2, [pc, #124]	@ (80094c4 <TIM_OC3_SetConfig+0x150>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d007      	beq.n	800945a <TIM_OC3_SetConfig+0xe6>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a1e      	ldr	r2, [pc, #120]	@ (80094c8 <TIM_OC3_SetConfig+0x154>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d003      	beq.n	800945a <TIM_OC3_SetConfig+0xe6>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a1d      	ldr	r2, [pc, #116]	@ (80094cc <TIM_OC3_SetConfig+0x158>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d113      	bne.n	8009482 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	4313      	orrs	r3, r2
 8009474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	621a      	str	r2, [r3, #32]
}
 800949c:	bf00      	nop
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	40012c00 	.word	0x40012c00
 80094ac:	50012c00 	.word	0x50012c00
 80094b0:	40013400 	.word	0x40013400
 80094b4:	50013400 	.word	0x50013400
 80094b8:	40014000 	.word	0x40014000
 80094bc:	50014000 	.word	0x50014000
 80094c0:	40014400 	.word	0x40014400
 80094c4:	50014400 	.word	0x50014400
 80094c8:	40014800 	.word	0x40014800
 80094cc:	50014800 	.word	0x50014800

080094d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800950a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	021b      	lsls	r3, r3, #8
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	4313      	orrs	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800951e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	031b      	lsls	r3, r3, #12
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a36      	ldr	r2, [pc, #216]	@ (8009608 <TIM_OC4_SetConfig+0x138>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00b      	beq.n	800954c <TIM_OC4_SetConfig+0x7c>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a35      	ldr	r2, [pc, #212]	@ (800960c <TIM_OC4_SetConfig+0x13c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d007      	beq.n	800954c <TIM_OC4_SetConfig+0x7c>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a34      	ldr	r2, [pc, #208]	@ (8009610 <TIM_OC4_SetConfig+0x140>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d003      	beq.n	800954c <TIM_OC4_SetConfig+0x7c>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a33      	ldr	r2, [pc, #204]	@ (8009614 <TIM_OC4_SetConfig+0x144>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d10d      	bne.n	8009568 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	031b      	lsls	r3, r3, #12
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009566:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a27      	ldr	r2, [pc, #156]	@ (8009608 <TIM_OC4_SetConfig+0x138>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d023      	beq.n	80095b8 <TIM_OC4_SetConfig+0xe8>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a26      	ldr	r2, [pc, #152]	@ (800960c <TIM_OC4_SetConfig+0x13c>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d01f      	beq.n	80095b8 <TIM_OC4_SetConfig+0xe8>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a25      	ldr	r2, [pc, #148]	@ (8009610 <TIM_OC4_SetConfig+0x140>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d01b      	beq.n	80095b8 <TIM_OC4_SetConfig+0xe8>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a24      	ldr	r2, [pc, #144]	@ (8009614 <TIM_OC4_SetConfig+0x144>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d017      	beq.n	80095b8 <TIM_OC4_SetConfig+0xe8>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a23      	ldr	r2, [pc, #140]	@ (8009618 <TIM_OC4_SetConfig+0x148>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d013      	beq.n	80095b8 <TIM_OC4_SetConfig+0xe8>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a22      	ldr	r2, [pc, #136]	@ (800961c <TIM_OC4_SetConfig+0x14c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00f      	beq.n	80095b8 <TIM_OC4_SetConfig+0xe8>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a21      	ldr	r2, [pc, #132]	@ (8009620 <TIM_OC4_SetConfig+0x150>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00b      	beq.n	80095b8 <TIM_OC4_SetConfig+0xe8>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a20      	ldr	r2, [pc, #128]	@ (8009624 <TIM_OC4_SetConfig+0x154>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d007      	beq.n	80095b8 <TIM_OC4_SetConfig+0xe8>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009628 <TIM_OC4_SetConfig+0x158>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d003      	beq.n	80095b8 <TIM_OC4_SetConfig+0xe8>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a1e      	ldr	r2, [pc, #120]	@ (800962c <TIM_OC4_SetConfig+0x15c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d113      	bne.n	80095e0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	019b      	lsls	r3, r3, #6
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	019b      	lsls	r3, r3, #6
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	621a      	str	r2, [r3, #32]
}
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	40012c00 	.word	0x40012c00
 800960c:	50012c00 	.word	0x50012c00
 8009610:	40013400 	.word	0x40013400
 8009614:	50013400 	.word	0x50013400
 8009618:	40014000 	.word	0x40014000
 800961c:	50014000 	.word	0x50014000
 8009620:	40014400 	.word	0x40014400
 8009624:	50014400 	.word	0x50014400
 8009628:	40014800 	.word	0x40014800
 800962c:	50014800 	.word	0x50014800

08009630 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800965e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009674:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	041b      	lsls	r3, r3, #16
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	4313      	orrs	r3, r2
 8009680:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a21      	ldr	r2, [pc, #132]	@ (800970c <TIM_OC5_SetConfig+0xdc>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d023      	beq.n	80096d2 <TIM_OC5_SetConfig+0xa2>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a20      	ldr	r2, [pc, #128]	@ (8009710 <TIM_OC5_SetConfig+0xe0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d01f      	beq.n	80096d2 <TIM_OC5_SetConfig+0xa2>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a1f      	ldr	r2, [pc, #124]	@ (8009714 <TIM_OC5_SetConfig+0xe4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d01b      	beq.n	80096d2 <TIM_OC5_SetConfig+0xa2>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a1e      	ldr	r2, [pc, #120]	@ (8009718 <TIM_OC5_SetConfig+0xe8>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d017      	beq.n	80096d2 <TIM_OC5_SetConfig+0xa2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a1d      	ldr	r2, [pc, #116]	@ (800971c <TIM_OC5_SetConfig+0xec>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d013      	beq.n	80096d2 <TIM_OC5_SetConfig+0xa2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009720 <TIM_OC5_SetConfig+0xf0>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00f      	beq.n	80096d2 <TIM_OC5_SetConfig+0xa2>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009724 <TIM_OC5_SetConfig+0xf4>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d00b      	beq.n	80096d2 <TIM_OC5_SetConfig+0xa2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009728 <TIM_OC5_SetConfig+0xf8>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d007      	beq.n	80096d2 <TIM_OC5_SetConfig+0xa2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a19      	ldr	r2, [pc, #100]	@ (800972c <TIM_OC5_SetConfig+0xfc>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d003      	beq.n	80096d2 <TIM_OC5_SetConfig+0xa2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a18      	ldr	r2, [pc, #96]	@ (8009730 <TIM_OC5_SetConfig+0x100>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d109      	bne.n	80096e6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	021b      	lsls	r3, r3, #8
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	621a      	str	r2, [r3, #32]
}
 8009700:	bf00      	nop
 8009702:	371c      	adds	r7, #28
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	40012c00 	.word	0x40012c00
 8009710:	50012c00 	.word	0x50012c00
 8009714:	40013400 	.word	0x40013400
 8009718:	50013400 	.word	0x50013400
 800971c:	40014000 	.word	0x40014000
 8009720:	50014000 	.word	0x50014000
 8009724:	40014400 	.word	0x40014400
 8009728:	50014400 	.word	0x50014400
 800972c:	40014800 	.word	0x40014800
 8009730:	50014800 	.word	0x50014800

08009734 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800975a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	4313      	orrs	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800977a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	051b      	lsls	r3, r3, #20
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a22      	ldr	r2, [pc, #136]	@ (8009814 <TIM_OC6_SetConfig+0xe0>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d023      	beq.n	80097d8 <TIM_OC6_SetConfig+0xa4>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a21      	ldr	r2, [pc, #132]	@ (8009818 <TIM_OC6_SetConfig+0xe4>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d01f      	beq.n	80097d8 <TIM_OC6_SetConfig+0xa4>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a20      	ldr	r2, [pc, #128]	@ (800981c <TIM_OC6_SetConfig+0xe8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d01b      	beq.n	80097d8 <TIM_OC6_SetConfig+0xa4>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009820 <TIM_OC6_SetConfig+0xec>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d017      	beq.n	80097d8 <TIM_OC6_SetConfig+0xa4>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009824 <TIM_OC6_SetConfig+0xf0>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d013      	beq.n	80097d8 <TIM_OC6_SetConfig+0xa4>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009828 <TIM_OC6_SetConfig+0xf4>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00f      	beq.n	80097d8 <TIM_OC6_SetConfig+0xa4>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a1c      	ldr	r2, [pc, #112]	@ (800982c <TIM_OC6_SetConfig+0xf8>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00b      	beq.n	80097d8 <TIM_OC6_SetConfig+0xa4>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a1b      	ldr	r2, [pc, #108]	@ (8009830 <TIM_OC6_SetConfig+0xfc>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d007      	beq.n	80097d8 <TIM_OC6_SetConfig+0xa4>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009834 <TIM_OC6_SetConfig+0x100>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d003      	beq.n	80097d8 <TIM_OC6_SetConfig+0xa4>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a19      	ldr	r2, [pc, #100]	@ (8009838 <TIM_OC6_SetConfig+0x104>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d109      	bne.n	80097ec <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	029b      	lsls	r3, r3, #10
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	621a      	str	r2, [r3, #32]
}
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	40012c00 	.word	0x40012c00
 8009818:	50012c00 	.word	0x50012c00
 800981c:	40013400 	.word	0x40013400
 8009820:	50013400 	.word	0x50013400
 8009824:	40014000 	.word	0x40014000
 8009828:	50014000 	.word	0x50014000
 800982c:	40014400 	.word	0x40014400
 8009830:	50014400 	.word	0x50014400
 8009834:	40014800 	.word	0x40014800
 8009838:	50014800 	.word	0x50014800

0800983c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	f023 0201 	bic.w	r2, r3, #1
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	4313      	orrs	r3, r2
 8009870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f023 030a 	bic.w	r3, r3, #10
 8009878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4313      	orrs	r3, r2
 8009880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	621a      	str	r2, [r3, #32]
}
 800988e:	bf00      	nop
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800989a:	b480      	push	{r7}
 800989c:	b087      	sub	sp, #28
 800989e:	af00      	add	r7, sp, #0
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	60b9      	str	r1, [r7, #8]
 80098a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	f023 0210 	bic.w	r2, r3, #16
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	031b      	lsls	r3, r3, #12
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80098d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	011b      	lsls	r3, r3, #4
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	4313      	orrs	r3, r2
 80098e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	621a      	str	r2, [r3, #32]
}
 80098ee:	bf00      	nop
 80098f0:	371c      	adds	r7, #28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b085      	sub	sp, #20
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4313      	orrs	r3, r2
 800991c:	f043 0307 	orr.w	r3, r3, #7
 8009920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	609a      	str	r2, [r3, #8]
}
 8009928:	bf00      	nop
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800994e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	021a      	lsls	r2, r3, #8
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	431a      	orrs	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4313      	orrs	r3, r2
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	4313      	orrs	r3, r2
 8009960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	609a      	str	r2, [r3, #8]
}
 8009968:	bf00      	nop
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009984:	2b01      	cmp	r3, #1
 8009986:	d101      	bne.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009988:	2302      	movs	r3, #2
 800998a:	e0a1      	b.n	8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a4a      	ldr	r2, [pc, #296]	@ (8009adc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d00e      	beq.n	80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a49      	ldr	r2, [pc, #292]	@ (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d009      	beq.n	80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a47      	ldr	r2, [pc, #284]	@ (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d004      	beq.n	80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a46      	ldr	r2, [pc, #280]	@ (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d108      	bne.n	80099e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80099da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80099ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a34      	ldr	r2, [pc, #208]	@ (8009adc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d04a      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a33      	ldr	r2, [pc, #204]	@ (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d045      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a20:	d040      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a2a:	d03b      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a2e      	ldr	r2, [pc, #184]	@ (8009aec <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d036      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d031      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a2b      	ldr	r2, [pc, #172]	@ (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d02c      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8009af8 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d027      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a28      	ldr	r2, [pc, #160]	@ (8009afc <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d022      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a27      	ldr	r2, [pc, #156]	@ (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d01d      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d018      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a1c      	ldr	r2, [pc, #112]	@ (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d013      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a20      	ldr	r2, [pc, #128]	@ (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00e      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8009b08 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d009      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a1d      	ldr	r2, [pc, #116]	@ (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d004      	beq.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d10c      	bne.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	40012c00 	.word	0x40012c00
 8009ae0:	50012c00 	.word	0x50012c00
 8009ae4:	40013400 	.word	0x40013400
 8009ae8:	50013400 	.word	0x50013400
 8009aec:	40000400 	.word	0x40000400
 8009af0:	50000400 	.word	0x50000400
 8009af4:	40000800 	.word	0x40000800
 8009af8:	50000800 	.word	0x50000800
 8009afc:	40000c00 	.word	0x40000c00
 8009b00:	50000c00 	.word	0x50000c00
 8009b04:	40001800 	.word	0x40001800
 8009b08:	50001800 	.word	0x50001800
 8009b0c:	40014000 	.word	0x40014000
 8009b10:	50014000 	.word	0x50014000

08009b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e042      	b.n	8009c38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d106      	bne.n	8009bca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7f7 fafb 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2224      	movs	r2, #36	@ 0x24
 8009bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0201 	bic.w	r2, r2, #1
 8009be0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d002      	beq.n	8009bf0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fa16 	bl	800a01c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f825 	bl	8009c40 <UART_SetConfig>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d101      	bne.n	8009c00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e01b      	b.n	8009c38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689a      	ldr	r2, [r3, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0201 	orr.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fa95 	bl	800a160 <UART_CheckIdleState>
 8009c36:	4603      	mov	r3, r0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c44:	b094      	sub	sp, #80	@ 0x50
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	4b78      	ldr	r3, [pc, #480]	@ (8009e38 <UART_SetConfig+0x1f8>)
 8009c56:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	431a      	orrs	r2, r3
 8009c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	431a      	orrs	r2, r3
 8009c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4971      	ldr	r1, [pc, #452]	@ (8009e3c <UART_SetConfig+0x1fc>)
 8009c78:	4019      	ands	r1, r3
 8009c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	68d9      	ldr	r1, [r3, #12]
 8009c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	ea40 0301 	orr.w	r3, r0, r1
 8009c9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	4b64      	ldr	r3, [pc, #400]	@ (8009e38 <UART_SetConfig+0x1f8>)
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d009      	beq.n	8009cc0 <UART_SetConfig+0x80>
 8009cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	4b63      	ldr	r3, [pc, #396]	@ (8009e40 <UART_SetConfig+0x200>)
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d004      	beq.n	8009cc0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb8:	6a1a      	ldr	r2, [r3, #32]
 8009cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009cca:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cd4:	430b      	orrs	r3, r1
 8009cd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cde:	f023 000f 	bic.w	r0, r3, #15
 8009ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	ea40 0301 	orr.w	r3, r0, r1
 8009cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	4b53      	ldr	r3, [pc, #332]	@ (8009e44 <UART_SetConfig+0x204>)
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d102      	bne.n	8009d00 <UART_SetConfig+0xc0>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cfe:	e066      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	4b50      	ldr	r3, [pc, #320]	@ (8009e48 <UART_SetConfig+0x208>)
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d102      	bne.n	8009d10 <UART_SetConfig+0xd0>
 8009d0a:	2302      	movs	r3, #2
 8009d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d0e:	e05e      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	4b4d      	ldr	r3, [pc, #308]	@ (8009e4c <UART_SetConfig+0x20c>)
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d102      	bne.n	8009d20 <UART_SetConfig+0xe0>
 8009d1a:	2304      	movs	r3, #4
 8009d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d1e:	e056      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	4b4a      	ldr	r3, [pc, #296]	@ (8009e50 <UART_SetConfig+0x210>)
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d102      	bne.n	8009d30 <UART_SetConfig+0xf0>
 8009d2a:	2308      	movs	r3, #8
 8009d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d2e:	e04e      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	4b47      	ldr	r3, [pc, #284]	@ (8009e54 <UART_SetConfig+0x214>)
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d102      	bne.n	8009d40 <UART_SetConfig+0x100>
 8009d3a:	2310      	movs	r3, #16
 8009d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d3e:	e046      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	4b44      	ldr	r3, [pc, #272]	@ (8009e58 <UART_SetConfig+0x218>)
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d102      	bne.n	8009d50 <UART_SetConfig+0x110>
 8009d4a:	2320      	movs	r3, #32
 8009d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d4e:	e03e      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	4b41      	ldr	r3, [pc, #260]	@ (8009e5c <UART_SetConfig+0x21c>)
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d102      	bne.n	8009d60 <UART_SetConfig+0x120>
 8009d5a:	2340      	movs	r3, #64	@ 0x40
 8009d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d5e:	e036      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4b3e      	ldr	r3, [pc, #248]	@ (8009e60 <UART_SetConfig+0x220>)
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d102      	bne.n	8009d70 <UART_SetConfig+0x130>
 8009d6a:	2380      	movs	r3, #128	@ 0x80
 8009d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d6e:	e02e      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	4b3b      	ldr	r3, [pc, #236]	@ (8009e64 <UART_SetConfig+0x224>)
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d103      	bne.n	8009d82 <UART_SetConfig+0x142>
 8009d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d80:	e025      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	4b38      	ldr	r3, [pc, #224]	@ (8009e68 <UART_SetConfig+0x228>)
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d103      	bne.n	8009d94 <UART_SetConfig+0x154>
 8009d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d92:	e01c      	b.n	8009dce <UART_SetConfig+0x18e>
 8009d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	4b34      	ldr	r3, [pc, #208]	@ (8009e6c <UART_SetConfig+0x22c>)
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d103      	bne.n	8009da6 <UART_SetConfig+0x166>
 8009d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009da4:	e013      	b.n	8009dce <UART_SetConfig+0x18e>
 8009da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	4b31      	ldr	r3, [pc, #196]	@ (8009e70 <UART_SetConfig+0x230>)
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d103      	bne.n	8009db8 <UART_SetConfig+0x178>
 8009db0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009db6:	e00a      	b.n	8009dce <UART_SetConfig+0x18e>
 8009db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8009e38 <UART_SetConfig+0x1f8>)
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d103      	bne.n	8009dca <UART_SetConfig+0x18a>
 8009dc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dc8:	e001      	b.n	8009dce <UART_SetConfig+0x18e>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b19      	ldr	r3, [pc, #100]	@ (8009e38 <UART_SetConfig+0x1f8>)
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d005      	beq.n	8009de4 <UART_SetConfig+0x1a4>
 8009dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	4b18      	ldr	r3, [pc, #96]	@ (8009e40 <UART_SetConfig+0x200>)
 8009dde:	429a      	cmp	r2, r3
 8009de0:	f040 8094 	bne.w	8009f0c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009de6:	2200      	movs	r2, #0
 8009de8:	623b      	str	r3, [r7, #32]
 8009dea:	627a      	str	r2, [r7, #36]	@ 0x24
 8009dec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009df0:	f7fb fe94 	bl	8005b1c <HAL_RCCEx_GetPeriphCLKFreq>
 8009df4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80f7 	beq.w	8009fec <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e02:	4a1c      	ldr	r2, [pc, #112]	@ (8009e74 <UART_SetConfig+0x234>)
 8009e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e10:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	4613      	mov	r3, r2
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	4413      	add	r3, r2
 8009e1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d305      	bcc.n	8009e2e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d924      	bls.n	8009e78 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009e34:	e069      	b.n	8009f0a <UART_SetConfig+0x2ca>
 8009e36:	bf00      	nop
 8009e38:	44002400 	.word	0x44002400
 8009e3c:	cfff69f3 	.word	0xcfff69f3
 8009e40:	54002400 	.word	0x54002400
 8009e44:	40013800 	.word	0x40013800
 8009e48:	40004400 	.word	0x40004400
 8009e4c:	40004800 	.word	0x40004800
 8009e50:	40004c00 	.word	0x40004c00
 8009e54:	40005000 	.word	0x40005000
 8009e58:	40006400 	.word	0x40006400
 8009e5c:	40007800 	.word	0x40007800
 8009e60:	40007c00 	.word	0x40007c00
 8009e64:	40008000 	.word	0x40008000
 8009e68:	40006800 	.word	0x40006800
 8009e6c:	40006c00 	.word	0x40006c00
 8009e70:	40008400 	.word	0x40008400
 8009e74:	0800ca08 	.word	0x0800ca08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	61bb      	str	r3, [r7, #24]
 8009e7e:	61fa      	str	r2, [r7, #28]
 8009e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e84:	4a64      	ldr	r2, [pc, #400]	@ (800a018 <UART_SetConfig+0x3d8>)
 8009e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	613b      	str	r3, [r7, #16]
 8009e90:	617a      	str	r2, [r7, #20]
 8009e92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009e9a:	f7f6 f9f9 	bl	8000290 <__aeabi_uldivmod>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f04f 0200 	mov.w	r2, #0
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	020b      	lsls	r3, r1, #8
 8009eb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009eb4:	0202      	lsls	r2, r0, #8
 8009eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eb8:	6849      	ldr	r1, [r1, #4]
 8009eba:	0849      	lsrs	r1, r1, #1
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	eb12 0804 	adds.w	r8, r2, r4
 8009ec6:	eb43 0905 	adc.w	r9, r3, r5
 8009eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	60bb      	str	r3, [r7, #8]
 8009ed2:	60fa      	str	r2, [r7, #12]
 8009ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 f9d8 	bl	8000290 <__aeabi_uldivmod>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009eee:	d308      	bcc.n	8009f02 <UART_SetConfig+0x2c2>
 8009ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ef6:	d204      	bcs.n	8009f02 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8009ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009efe:	60da      	str	r2, [r3, #12]
 8009f00:	e003      	b.n	8009f0a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009f08:	e070      	b.n	8009fec <UART_SetConfig+0x3ac>
 8009f0a:	e06f      	b.n	8009fec <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f14:	d13c      	bne.n	8009f90 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f18:	2200      	movs	r2, #0
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	607a      	str	r2, [r7, #4]
 8009f1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f22:	f7fb fdfb 	bl	8005b1c <HAL_RCCEx_GetPeriphCLKFreq>
 8009f26:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d05e      	beq.n	8009fec <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f32:	4a39      	ldr	r2, [pc, #228]	@ (800a018 <UART_SetConfig+0x3d8>)
 8009f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f40:	005a      	lsls	r2, r3, #1
 8009f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	441a      	add	r2, r3
 8009f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f56:	2b0f      	cmp	r3, #15
 8009f58:	d916      	bls.n	8009f88 <UART_SetConfig+0x348>
 8009f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f60:	d212      	bcs.n	8009f88 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	f023 030f 	bic.w	r3, r3, #15
 8009f6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f6e:	085b      	lsrs	r3, r3, #1
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009f84:	60da      	str	r2, [r3, #12]
 8009f86:	e031      	b.n	8009fec <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009f8e:	e02d      	b.n	8009fec <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009f90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f92:	2200      	movs	r2, #0
 8009f94:	469a      	mov	sl, r3
 8009f96:	4693      	mov	fp, r2
 8009f98:	4650      	mov	r0, sl
 8009f9a:	4659      	mov	r1, fp
 8009f9c:	f7fb fdbe 	bl	8005b1c <HAL_RCCEx_GetPeriphCLKFreq>
 8009fa0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d021      	beq.n	8009fec <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fac:	4a1a      	ldr	r2, [pc, #104]	@ (800a018 <UART_SetConfig+0x3d8>)
 8009fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	085b      	lsrs	r3, r3, #1
 8009fc0:	441a      	add	r2, r3
 8009fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fce:	2b0f      	cmp	r3, #15
 8009fd0:	d909      	bls.n	8009fe6 <UART_SetConfig+0x3a6>
 8009fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fd8:	d205      	bcs.n	8009fe6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	60da      	str	r2, [r3, #12]
 8009fe4:	e002      	b.n	8009fec <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffe:	2200      	movs	r2, #0
 800a000:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a004:	2200      	movs	r2, #0
 800a006:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a008:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3750      	adds	r7, #80	@ 0x50
 800a010:	46bd      	mov	sp, r7
 800a012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a016:	bf00      	nop
 800a018:	0800ca08 	.word	0x0800ca08

0800a01c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00a      	beq.n	800a046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06c:	f003 0302 	and.w	r3, r3, #2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00a      	beq.n	800a08a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00a      	beq.n	800a0ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b0:	f003 0310 	and.w	r3, r3, #16
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00a      	beq.n	800a0ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01a      	beq.n	800a132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a11a:	d10a      	bne.n	800a132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00a      	beq.n	800a154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	605a      	str	r2, [r3, #4]
  }
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b098      	sub	sp, #96	@ 0x60
 800a164:	af02      	add	r7, sp, #8
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a170:	f7f7 f918 	bl	80013a4 <HAL_GetTick>
 800a174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0308 	and.w	r3, r3, #8
 800a180:	2b08      	cmp	r3, #8
 800a182:	d12f      	bne.n	800a1e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a18c:	2200      	movs	r2, #0
 800a18e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f88e 	bl	800a2b4 <UART_WaitOnFlagUntilTimeout>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d022      	beq.n	800a1e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a6:	e853 3f00 	ldrex	r3, [r3]
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e6      	bne.n	800a19e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e063      	b.n	800a2ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d149      	bne.n	800a286 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f857 	bl	800a2b4 <UART_WaitOnFlagUntilTimeout>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d03c      	beq.n	800a286 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a214:	e853 3f00 	ldrex	r3, [r3]
 800a218:	623b      	str	r3, [r7, #32]
   return(result);
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a22a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a22c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e6      	bne.n	800a20c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3308      	adds	r3, #8
 800a244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f023 0301 	bic.w	r3, r3, #1
 800a254:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3308      	adds	r3, #8
 800a25c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a25e:	61fa      	str	r2, [r7, #28]
 800a260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	69b9      	ldr	r1, [r7, #24]
 800a264:	69fa      	ldr	r2, [r7, #28]
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	617b      	str	r3, [r7, #20]
   return(result);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e5      	bne.n	800a23e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2220      	movs	r2, #32
 800a276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e012      	b.n	800a2ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2220      	movs	r2, #32
 800a28a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3758      	adds	r7, #88	@ 0x58
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	603b      	str	r3, [r7, #0]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c4:	e04f      	b.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2cc:	d04b      	beq.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2ce:	f7f7 f869 	bl	80013a4 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d302      	bcc.n	800a2e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e04e      	b.n	800a386 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0304 	and.w	r3, r3, #4
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d037      	beq.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2b80      	cmp	r3, #128	@ 0x80
 800a2fa:	d034      	beq.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b40      	cmp	r3, #64	@ 0x40
 800a300:	d031      	beq.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	f003 0308 	and.w	r3, r3, #8
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d110      	bne.n	800a332 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2208      	movs	r2, #8
 800a316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f838 	bl	800a38e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2208      	movs	r2, #8
 800a322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e029      	b.n	800a386 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	69db      	ldr	r3, [r3, #28]
 800a338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a33c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a340:	d111      	bne.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a34a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 f81e 	bl	800a38e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2220      	movs	r2, #32
 800a356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e00f      	b.n	800a386 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	69da      	ldr	r2, [r3, #28]
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	4013      	ands	r3, r2
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	429a      	cmp	r2, r3
 800a374:	bf0c      	ite	eq
 800a376:	2301      	moveq	r3, #1
 800a378:	2300      	movne	r3, #0
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	461a      	mov	r2, r3
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	429a      	cmp	r2, r3
 800a382:	d0a0      	beq.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a38e:	b480      	push	{r7}
 800a390:	b095      	sub	sp, #84	@ 0x54
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e6      	bne.n	800a396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	e853 3f00 	ldrex	r3, [r3]
 800a3d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3de:	f023 0301 	bic.w	r3, r3, #1
 800a3e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f4:	e841 2300 	strex	r3, r2, [r1]
 800a3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1e3      	bne.n	800a3c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a404:	2b01      	cmp	r3, #1
 800a406:	d118      	bne.n	800a43a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	60bb      	str	r3, [r7, #8]
   return(result);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f023 0310 	bic.w	r3, r3, #16
 800a41c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a426:	61bb      	str	r3, [r7, #24]
 800a428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6979      	ldr	r1, [r7, #20]
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	613b      	str	r3, [r7, #16]
   return(result);
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e6      	bne.n	800a408 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2220      	movs	r2, #32
 800a43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a44e:	bf00      	nop
 800a450:	3754      	adds	r7, #84	@ 0x54
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b085      	sub	sp, #20
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d101      	bne.n	800a470 <HAL_UARTEx_DisableFifoMode+0x16>
 800a46c:	2302      	movs	r3, #2
 800a46e:	e027      	b.n	800a4c0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2224      	movs	r2, #36	@ 0x24
 800a47c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f022 0201 	bic.w	r2, r2, #1
 800a496:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a49e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d101      	bne.n	800a4e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e02d      	b.n	800a540 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2224      	movs	r2, #36	@ 0x24
 800a4f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f022 0201 	bic.w	r2, r2, #1
 800a50a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	430a      	orrs	r2, r1
 800a51e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f84f 	bl	800a5c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d101      	bne.n	800a560 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a55c:	2302      	movs	r3, #2
 800a55e:	e02d      	b.n	800a5bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2224      	movs	r2, #36	@ 0x24
 800a56c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 0201 	bic.w	r2, r2, #1
 800a586:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f811 	bl	800a5c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d108      	bne.n	800a5e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5e4:	e031      	b.n	800a64a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5e6:	2308      	movs	r3, #8
 800a5e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	0e5b      	lsrs	r3, r3, #25
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	f003 0307 	and.w	r3, r3, #7
 800a5fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	0f5b      	lsrs	r3, r3, #29
 800a606:	b2db      	uxtb	r3, r3
 800a608:	f003 0307 	and.w	r3, r3, #7
 800a60c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a60e:	7bbb      	ldrb	r3, [r7, #14]
 800a610:	7b3a      	ldrb	r2, [r7, #12]
 800a612:	4911      	ldr	r1, [pc, #68]	@ (800a658 <UARTEx_SetNbDataToProcess+0x94>)
 800a614:	5c8a      	ldrb	r2, [r1, r2]
 800a616:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a61a:	7b3a      	ldrb	r2, [r7, #12]
 800a61c:	490f      	ldr	r1, [pc, #60]	@ (800a65c <UARTEx_SetNbDataToProcess+0x98>)
 800a61e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a620:	fb93 f3f2 	sdiv	r3, r3, r2
 800a624:	b29a      	uxth	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	7b7a      	ldrb	r2, [r7, #13]
 800a630:	4909      	ldr	r1, [pc, #36]	@ (800a658 <UARTEx_SetNbDataToProcess+0x94>)
 800a632:	5c8a      	ldrb	r2, [r1, r2]
 800a634:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a638:	7b7a      	ldrb	r2, [r7, #13]
 800a63a:	4908      	ldr	r1, [pc, #32]	@ (800a65c <UARTEx_SetNbDataToProcess+0x98>)
 800a63c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a63e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a642:	b29a      	uxth	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a64a:	bf00      	nop
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	0800ca20 	.word	0x0800ca20
 800a65c:	0800ca28 	.word	0x0800ca28

0800a660 <__NVIC_SetPriority>:
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	6039      	str	r1, [r7, #0]
 800a66a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a66c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a670:	2b00      	cmp	r3, #0
 800a672:	db0a      	blt.n	800a68a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	490c      	ldr	r1, [pc, #48]	@ (800a6ac <__NVIC_SetPriority+0x4c>)
 800a67a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a67e:	0112      	lsls	r2, r2, #4
 800a680:	b2d2      	uxtb	r2, r2
 800a682:	440b      	add	r3, r1
 800a684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a688:	e00a      	b.n	800a6a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	4908      	ldr	r1, [pc, #32]	@ (800a6b0 <__NVIC_SetPriority+0x50>)
 800a690:	88fb      	ldrh	r3, [r7, #6]
 800a692:	f003 030f 	and.w	r3, r3, #15
 800a696:	3b04      	subs	r3, #4
 800a698:	0112      	lsls	r2, r2, #4
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	440b      	add	r3, r1
 800a69e:	761a      	strb	r2, [r3, #24]
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	e000e100 	.word	0xe000e100
 800a6b0:	e000ed00 	.word	0xe000ed00

0800a6b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800a6b8:	4b05      	ldr	r3, [pc, #20]	@ (800a6d0 <SysTick_Handler+0x1c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a6bc:	f001 fba6 	bl	800be0c <xTaskGetSchedulerState>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d001      	beq.n	800a6ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a6c6:	f001 ff51 	bl	800c56c <xPortSysTickHandler>
  }
}
 800a6ca:	bf00      	nop
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	e000e010 	.word	0xe000e010

0800a6d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800a6d8:	2100      	movs	r1, #0
 800a6da:	f06f 0004 	mvn.w	r0, #4
 800a6de:	f7ff ffbf 	bl	800a660 <__NVIC_SetPriority>
#endif
}
 800a6e2:	bf00      	nop
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b086      	sub	sp, #24
 800a6ea:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6f0:	f3ef 8305 	mrs	r3, IPSR
 800a6f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6f6:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	617b      	str	r3, [r7, #20]
 800a700:	e013      	b.n	800a72a <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800a702:	f001 fb83 	bl	800be0c <xTaskGetSchedulerState>
 800a706:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d00d      	beq.n	800a72a <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a70e:	f3ef 8310 	mrs	r3, PRIMASK
 800a712:	60bb      	str	r3, [r7, #8]
  return(result);
 800a714:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800a716:	2b00      	cmp	r3, #0
 800a718:	d105      	bne.n	800a726 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a71a:	f3ef 8311 	mrs	r3, BASEPRI
 800a71e:	607b      	str	r3, [r7, #4]
  return(result);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800a726:	2301      	movs	r3, #1
 800a728:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800a72a:	697b      	ldr	r3, [r7, #20]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800a73a:	f7ff ffd4 	bl	800a6e6 <IRQ_Context>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <osKernelInitialize+0x18>
    stat = osErrorISR;
 800a744:	f06f 0305 	mvn.w	r3, #5
 800a748:	607b      	str	r3, [r7, #4]
 800a74a:	e012      	b.n	800a772 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800a74c:	f001 fb5e 	bl	800be0c <xTaskGetSchedulerState>
 800a750:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d109      	bne.n	800a76c <osKernelInitialize+0x38>
 800a758:	4b08      	ldr	r3, [pc, #32]	@ (800a77c <osKernelInitialize+0x48>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d105      	bne.n	800a76c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a760:	4b06      	ldr	r3, [pc, #24]	@ (800a77c <osKernelInitialize+0x48>)
 800a762:	2201      	movs	r2, #1
 800a764:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a766:	2300      	movs	r3, #0
 800a768:	607b      	str	r3, [r7, #4]
 800a76a:	e002      	b.n	800a772 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800a76c:	f04f 33ff 	mov.w	r3, #4294967295
 800a770:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800a772:	687b      	ldr	r3, [r7, #4]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	200003b4 	.word	0x200003b4

0800a780 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800a786:	f7ff ffae 	bl	800a6e6 <IRQ_Context>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <osKernelStart+0x18>
    stat = osErrorISR;
 800a790:	f06f 0305 	mvn.w	r3, #5
 800a794:	607b      	str	r3, [r7, #4]
 800a796:	e016      	b.n	800a7c6 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800a798:	f001 fb38 	bl	800be0c <xTaskGetSchedulerState>
 800a79c:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d10d      	bne.n	800a7c0 <osKernelStart+0x40>
 800a7a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d0 <osKernelStart+0x50>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d109      	bne.n	800a7c0 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a7ac:	f7ff ff92 	bl	800a6d4 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800a7b0:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <osKernelStart+0x50>)
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a7b6:	f000 fdf7 	bl	800b3a8 <vTaskStartScheduler>
      stat = osOK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	607b      	str	r3, [r7, #4]
 800a7be:	e002      	b.n	800a7c6 <osKernelStart+0x46>
    } else {
      stat = osError;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c4:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800a7c6:	687b      	ldr	r3, [r7, #4]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	200003b4 	.word	0x200003b4

0800a7d4 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	@ 0x38
 800a7d8:	af04      	add	r7, sp, #16
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800a7e4:	f7ff ff7f 	bl	800a6e6 <IRQ_Context>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d17e      	bne.n	800a8ec <osThreadNew+0x118>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d07b      	beq.n	800a8ec <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800a7f4:	2380      	movs	r3, #128	@ 0x80
 800a7f6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a7f8:	2318      	movs	r3, #24
 800a7fa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a800:	f04f 33ff 	mov.w	r3, #4294967295
 800a804:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d045      	beq.n	800a898 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <osThreadNew+0x46>
        name = attr->name;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d008      	beq.n	800a840 <osThreadNew+0x6c>
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	2b38      	cmp	r3, #56	@ 0x38
 800a832:	d805      	bhi.n	800a840 <osThreadNew+0x6c>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800a840:	2300      	movs	r3, #0
 800a842:	e054      	b.n	800a8ee <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d003      	beq.n	800a854 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	089b      	lsrs	r3, r3, #2
 800a852:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00e      	beq.n	800a87a <osThreadNew+0xa6>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	2b5b      	cmp	r3, #91	@ 0x5b
 800a862:	d90a      	bls.n	800a87a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d006      	beq.n	800a87a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800a874:	2301      	movs	r3, #1
 800a876:	61bb      	str	r3, [r7, #24]
 800a878:	e010      	b.n	800a89c <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10c      	bne.n	800a89c <osThreadNew+0xc8>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d108      	bne.n	800a89c <osThreadNew+0xc8>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d104      	bne.n	800a89c <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	61bb      	str	r3, [r7, #24]
 800a896:	e001      	b.n	800a89c <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d110      	bne.n	800a8c4 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8aa:	9202      	str	r2, [sp, #8]
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	6a3a      	ldr	r2, [r7, #32]
 800a8b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 fba5 	bl	800b008 <xTaskCreateStatic>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	e013      	b.n	800a8ec <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d110      	bne.n	800a8ec <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	f107 0314 	add.w	r3, r7, #20
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 fbe0 	bl	800b0a2 <xTaskCreate>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d001      	beq.n	800a8ec <osThreadNew+0x118>
            hTask = NULL;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800a8ec:	697b      	ldr	r3, [r7, #20]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3728      	adds	r7, #40	@ 0x28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800a8fe:	f7ff fef2 	bl	800a6e6 <IRQ_Context>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <osDelay+0x1a>
    stat = osErrorISR;
 800a908:	f06f 0305 	mvn.w	r3, #5
 800a90c:	60fb      	str	r3, [r7, #12]
 800a90e:	e007      	b.n	800a920 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800a910:	2300      	movs	r3, #0
 800a912:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <osDelay+0x2a>
      vTaskDelay(ticks);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fd1e 	bl	800b35c <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800a920:	68fb      	ldr	r3, [r7, #12]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	4a07      	ldr	r2, [pc, #28]	@ (800a958 <vApplicationGetIdleTaskMemory+0x2c>)
 800a93c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	4a06      	ldr	r2, [pc, #24]	@ (800a95c <vApplicationGetIdleTaskMemory+0x30>)
 800a942:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2280      	movs	r2, #128	@ 0x80
 800a948:	601a      	str	r2, [r3, #0]
}
 800a94a:	bf00      	nop
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	200003b8 	.word	0x200003b8
 800a95c:	20000414 	.word	0x20000414

0800a960 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4a07      	ldr	r2, [pc, #28]	@ (800a98c <vApplicationGetTimerTaskMemory+0x2c>)
 800a970:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	4a06      	ldr	r2, [pc, #24]	@ (800a990 <vApplicationGetTimerTaskMemory+0x30>)
 800a976:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2280      	movs	r2, #128	@ 0x80
 800a97c:	601a      	str	r2, [r3, #0]
}
 800a97e:	bf00      	nop
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	20000614 	.word	0x20000614
 800a990:	20000670 	.word	0x20000670

0800a994 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f103 0208 	add.w	r2, r3, #8
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f103 0208 	add.w	r2, r3, #8
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f103 0208 	add.w	r2, r3, #8
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9e2:	bf00      	nop
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b085      	sub	sp, #20
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa04:	d103      	bne.n	800aa0e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	e00c      	b.n	800aa28 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3308      	adds	r3, #8
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	e002      	b.n	800aa1c <vListInsert+0x2e>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d2f6      	bcs.n	800aa16 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	601a      	str	r2, [r3, #0]
}
 800aa54:	bf00      	nop
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	6892      	ldr	r2, [r2, #8]
 800aa76:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	6852      	ldr	r2, [r2, #4]
 800aa80:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d103      	bne.n	800aa94 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689a      	ldr	r2, [r3, #8]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	1e5a      	subs	r2, r3, #1
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800aabe:	2301      	movs	r3, #1
 800aac0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d103      	bne.n	800aad4 <xQueueGenericReset+0x20>
 800aacc:	f001 fe64 	bl	800c798 <ulSetInterruptMask>
 800aad0:	bf00      	nop
 800aad2:	e7fd      	b.n	800aad0 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d057      	beq.n	800ab8a <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d053      	beq.n	800ab8a <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaea:	2100      	movs	r1, #0
 800aaec:	fba3 2302 	umull	r2, r3, r3, r2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d000      	beq.n	800aaf6 <xQueueGenericReset+0x42>
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d146      	bne.n	800ab8a <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800aafc:	f001 fd0a 	bl	800c514 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab08:	68b9      	ldr	r1, [r7, #8]
 800ab0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab0c:	fb01 f303 	mul.w	r3, r1, r3
 800ab10:	441a      	add	r2, r3
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	68b9      	ldr	r1, [r7, #8]
 800ab30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab32:	fb01 f303 	mul.w	r3, r1, r3
 800ab36:	441a      	add	r2, r3
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	22ff      	movs	r2, #255	@ 0xff
 800ab40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	22ff      	movs	r2, #255	@ 0xff
 800ab48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10e      	bne.n	800ab70 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d014      	beq.n	800ab84 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	3310      	adds	r3, #16
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 ff4a 	bl	800b9f8 <xTaskRemoveFromEventList>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00c      	beq.n	800ab84 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ab6a:	f001 fcc1 	bl	800c4f0 <vPortYield>
 800ab6e:	e009      	b.n	800ab84 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	3310      	adds	r3, #16
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7ff ff0d 	bl	800a994 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	3324      	adds	r3, #36	@ 0x24
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7ff ff08 	bl	800a994 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800ab84:	f001 fcd8 	bl	800c538 <vPortExitCritical>
 800ab88:	e001      	b.n	800ab8e <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d103      	bne.n	800ab9c <xQueueGenericReset+0xe8>
 800ab94:	f001 fe00 	bl	800c798 <ulSetInterruptMask>
 800ab98:	bf00      	nop
 800ab9a:	e7fd      	b.n	800ab98 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b088      	sub	sp, #32
 800abaa:	af02      	add	r7, sp, #8
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800abb4:	2300      	movs	r3, #0
 800abb6:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d103      	bne.n	800abc6 <xQueueGenericCreateStatic+0x20>
 800abbe:	f001 fdeb 	bl	800c798 <ulSetInterruptMask>
 800abc2:	bf00      	nop
 800abc4:	e7fd      	b.n	800abc2 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d029      	beq.n	800ac20 <xQueueGenericCreateStatic+0x7a>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d026      	beq.n	800ac20 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d020      	beq.n	800ac20 <xQueueGenericCreateStatic+0x7a>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d11a      	bne.n	800ac20 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800abea:	2350      	movs	r3, #80	@ 0x50
 800abec:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	2b50      	cmp	r3, #80	@ 0x50
 800abf2:	d003      	beq.n	800abfc <xQueueGenericCreateStatic+0x56>
 800abf4:	f001 fdd0 	bl	800c798 <ulSetInterruptMask>
 800abf8:	bf00      	nop
 800abfa:	e7fd      	b.n	800abf8 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800abfc:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	4613      	mov	r3, r2
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	68b9      	ldr	r1, [r7, #8]
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f80d 	bl	800ac38 <prvInitialiseNewQueue>
 800ac1e:	e006      	b.n	800ac2e <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d103      	bne.n	800ac2e <xQueueGenericCreateStatic+0x88>
 800ac26:	f001 fdb7 	bl	800c798 <ulSetInterruptMask>
 800ac2a:	bf00      	nop
 800ac2c:	e7fd      	b.n	800ac2a <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800ac2e:	697b      	ldr	r3, [r7, #20]
    }
 800ac30:	4618      	mov	r0, r3
 800ac32:	3718      	adds	r7, #24
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d103      	bne.n	800ac54 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	e002      	b.n	800ac5a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac66:	2101      	movs	r1, #1
 800ac68:	69b8      	ldr	r0, [r7, #24]
 800ac6a:	f7ff ff23 	bl	800aab4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	78fa      	ldrb	r2, [r7, #3]
 800ac72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800ac76:	bf00      	nop
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b08a      	sub	sp, #40	@ 0x28
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d103      	bne.n	800aca0 <xQueueReceive+0x22>
 800ac98:	f001 fd7e 	bl	800c798 <ulSetInterruptMask>
 800ac9c:	bf00      	nop
 800ac9e:	e7fd      	b.n	800ac9c <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d103      	bne.n	800acae <xQueueReceive+0x30>
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d101      	bne.n	800acb2 <xQueueReceive+0x34>
 800acae:	2301      	movs	r3, #1
 800acb0:	e000      	b.n	800acb4 <xQueueReceive+0x36>
 800acb2:	2300      	movs	r3, #0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d103      	bne.n	800acc0 <xQueueReceive+0x42>
 800acb8:	f001 fd6e 	bl	800c798 <ulSetInterruptMask>
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acc0:	f001 f8a4 	bl	800be0c <xTaskGetSchedulerState>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d102      	bne.n	800acd0 <xQueueReceive+0x52>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <xQueueReceive+0x56>
 800acd0:	2301      	movs	r3, #1
 800acd2:	e000      	b.n	800acd6 <xQueueReceive+0x58>
 800acd4:	2300      	movs	r3, #0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d103      	bne.n	800ace2 <xQueueReceive+0x64>
 800acda:	f001 fd5d 	bl	800c798 <ulSetInterruptMask>
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ace2:	f001 fc17 	bl	800c514 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acea:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d019      	beq.n	800ad26 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acf2:	68b9      	ldr	r1, [r7, #8]
 800acf4:	6a38      	ldr	r0, [r7, #32]
 800acf6:	f000 f87e 	bl	800adf6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	1e5a      	subs	r2, r3, #1
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d009      	beq.n	800ad1e <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	3310      	adds	r3, #16
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fe72 	bl	800b9f8 <xTaskRemoveFromEventList>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ad1a:	f001 fbe9 	bl	800c4f0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800ad1e:	f001 fc0b 	bl	800c538 <vPortExitCritical>
                return pdPASS;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e063      	b.n	800adee <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d103      	bne.n	800ad34 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800ad2c:	f001 fc04 	bl	800c538 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800ad30:	2300      	movs	r3, #0
 800ad32:	e05c      	b.n	800adee <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d106      	bne.n	800ad48 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800ad3a:	f107 0314 	add.w	r3, r7, #20
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 ff28 	bl	800bb94 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800ad44:	2301      	movs	r3, #1
 800ad46:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ad48:	f001 fbf6 	bl	800c538 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800ad4c:	f000 fb88 	bl	800b460 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800ad50:	f001 fbe0 	bl	800c514 <vPortEnterCritical>
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad5a:	b25b      	sxtb	r3, r3
 800ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad60:	d103      	bne.n	800ad6a <xQueueReceive+0xec>
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad70:	b25b      	sxtb	r3, r3
 800ad72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad76:	d103      	bne.n	800ad80 <xQueueReceive+0x102>
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad80:	f001 fbda 	bl	800c538 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad84:	1d3a      	adds	r2, r7, #4
 800ad86:	f107 0314 	add.w	r3, r7, #20
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 ff17 	bl	800bbc0 <xTaskCheckForTimeOut>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d11d      	bne.n	800add4 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad98:	6a38      	ldr	r0, [r7, #32]
 800ad9a:	f000 f8a4 	bl	800aee6 <prvIsQueueEmpty>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d011      	beq.n	800adc8 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	3324      	adds	r3, #36	@ 0x24
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	4611      	mov	r1, r2
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fdc7 	bl	800b940 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800adb2:	6a38      	ldr	r0, [r7, #32]
 800adb4:	f000 f845 	bl	800ae42 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800adb8:	f000 fb60 	bl	800b47c <xTaskResumeAll>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d18f      	bne.n	800ace2 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800adc2:	f001 fb95 	bl	800c4f0 <vPortYield>
 800adc6:	e78c      	b.n	800ace2 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800adc8:	6a38      	ldr	r0, [r7, #32]
 800adca:	f000 f83a 	bl	800ae42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800adce:	f000 fb55 	bl	800b47c <xTaskResumeAll>
 800add2:	e786      	b.n	800ace2 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800add4:	6a38      	ldr	r0, [r7, #32]
 800add6:	f000 f834 	bl	800ae42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800adda:	f000 fb4f 	bl	800b47c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adde:	6a38      	ldr	r0, [r7, #32]
 800ade0:	f000 f881 	bl	800aee6 <prvIsQueueEmpty>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f43f af7b 	beq.w	800ace2 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800adec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3728      	adds	r7, #40	@ 0x28
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d018      	beq.n	800ae3a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68da      	ldr	r2, [r3, #12]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae10:	441a      	add	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d303      	bcc.n	800ae2a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	68d9      	ldr	r1, [r3, #12]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae32:	461a      	mov	r2, r3
 800ae34:	6838      	ldr	r0, [r7, #0]
 800ae36:	f001 fd9d 	bl	800c974 <memcpy>
    }
}
 800ae3a:	bf00      	nop
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b084      	sub	sp, #16
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800ae4a:	f001 fb63 	bl	800c514 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae54:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae56:	e011      	b.n	800ae7c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d012      	beq.n	800ae86 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3324      	adds	r3, #36	@ 0x24
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 fdc7 	bl	800b9f8 <xTaskRemoveFromEventList>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800ae70:	f000 fefe 	bl	800bc70 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	3b01      	subs	r3, #1
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	dce9      	bgt.n	800ae58 <prvUnlockQueue+0x16>
 800ae84:	e000      	b.n	800ae88 <prvUnlockQueue+0x46>
                    break;
 800ae86:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	22ff      	movs	r2, #255	@ 0xff
 800ae8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800ae90:	f001 fb52 	bl	800c538 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800ae94:	f001 fb3e 	bl	800c514 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae9e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800aea0:	e011      	b.n	800aec6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d012      	beq.n	800aed0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	3310      	adds	r3, #16
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f000 fda2 	bl	800b9f8 <xTaskRemoveFromEventList>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800aeba:	f000 fed9 	bl	800bc70 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800aec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dce9      	bgt.n	800aea2 <prvUnlockQueue+0x60>
 800aece:	e000      	b.n	800aed2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800aed0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	22ff      	movs	r2, #255	@ 0xff
 800aed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800aeda:	f001 fb2d 	bl	800c538 <vPortExitCritical>
}
 800aede:	bf00      	nop
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800aeee:	f001 fb11 	bl	800c514 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d102      	bne.n	800af00 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800aefa:	2301      	movs	r3, #1
 800aefc:	60fb      	str	r3, [r7, #12]
 800aefe:	e001      	b.n	800af04 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800af04:	f001 fb18 	bl	800c538 <vPortExitCritical>

    return xReturn;
 800af08:	68fb      	ldr	r3, [r7, #12]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800af1e:	2300      	movs	r3, #0
 800af20:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d103      	bne.n	800af30 <vQueueAddToRegistry+0x1c>
 800af28:	f001 fc36 	bl	800c798 <ulSetInterruptMask>
 800af2c:	bf00      	nop
 800af2e:	e7fd      	b.n	800af2c <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d024      	beq.n	800af80 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af36:	2300      	movs	r3, #0
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	e01e      	b.n	800af7a <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800af3c:	4a17      	ldr	r2, [pc, #92]	@ (800af9c <vQueueAddToRegistry+0x88>)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	00db      	lsls	r3, r3, #3
 800af42:	4413      	add	r3, r2
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d105      	bne.n	800af58 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	4a12      	ldr	r2, [pc, #72]	@ (800af9c <vQueueAddToRegistry+0x88>)
 800af52:	4413      	add	r3, r2
 800af54:	60bb      	str	r3, [r7, #8]
                    break;
 800af56:	e013      	b.n	800af80 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10a      	bne.n	800af74 <vQueueAddToRegistry+0x60>
 800af5e:	4a0f      	ldr	r2, [pc, #60]	@ (800af9c <vQueueAddToRegistry+0x88>)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d104      	bne.n	800af74 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	00db      	lsls	r3, r3, #3
 800af6e:	4a0b      	ldr	r2, [pc, #44]	@ (800af9c <vQueueAddToRegistry+0x88>)
 800af70:	4413      	add	r3, r2
 800af72:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3301      	adds	r3, #1
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b07      	cmp	r3, #7
 800af7e:	d9dd      	bls.n	800af3c <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d005      	beq.n	800af92 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20000870 	.word	0x20000870

0800afa0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800afb0:	f001 fab0 	bl	800c514 <vPortEnterCritical>
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afba:	b25b      	sxtb	r3, r3
 800afbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc0:	d103      	bne.n	800afca <vQueueWaitForMessageRestricted+0x2a>
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afd0:	b25b      	sxtb	r3, r3
 800afd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd6:	d103      	bne.n	800afe0 <vQueueWaitForMessageRestricted+0x40>
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afe0:	f001 faaa 	bl	800c538 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d106      	bne.n	800affa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	3324      	adds	r3, #36	@ 0x24
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	68b9      	ldr	r1, [r7, #8]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 fcc1 	bl	800b97c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800affa:	6978      	ldr	r0, [r7, #20]
 800affc:	f7ff ff21 	bl	800ae42 <prvUnlockQueue>
    }
 800b000:	bf00      	nop
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08c      	sub	sp, #48	@ 0x30
 800b00c:	af04      	add	r7, sp, #16
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
 800b014:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800b016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d103      	bne.n	800b024 <xTaskCreateStatic+0x1c>
 800b01c:	f001 fbbc 	bl	800c798 <ulSetInterruptMask>
 800b020:	bf00      	nop
 800b022:	e7fd      	b.n	800b020 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800b024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b026:	2b00      	cmp	r3, #0
 800b028:	d103      	bne.n	800b032 <xTaskCreateStatic+0x2a>
 800b02a:	f001 fbb5 	bl	800c798 <ulSetInterruptMask>
 800b02e:	bf00      	nop
 800b030:	e7fd      	b.n	800b02e <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800b032:	235c      	movs	r3, #92	@ 0x5c
 800b034:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2b5c      	cmp	r3, #92	@ 0x5c
 800b03a:	d003      	beq.n	800b044 <xTaskCreateStatic+0x3c>
 800b03c:	f001 fbac 	bl	800c798 <ulSetInterruptMask>
 800b040:	bf00      	nop
 800b042:	e7fd      	b.n	800b040 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b044:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d023      	beq.n	800b094 <xTaskCreateStatic+0x8c>
 800b04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d020      	beq.n	800b094 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b054:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b056:	225c      	movs	r2, #92	@ 0x5c
 800b058:	2100      	movs	r1, #0
 800b05a:	69f8      	ldr	r0, [r7, #28]
 800b05c:	f001 fc5d 	bl	800c91a <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b064:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2202      	movs	r2, #2
 800b06a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b06e:	2300      	movs	r3, #0
 800b070:	9303      	str	r3, [sp, #12]
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	9302      	str	r3, [sp, #8]
 800b076:	f107 0318 	add.w	r3, r7, #24
 800b07a:	9301      	str	r3, [sp, #4]
 800b07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	68b9      	ldr	r1, [r7, #8]
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 f855 	bl	800b136 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b08c:	69f8      	ldr	r0, [r7, #28]
 800b08e:	f000 f8d5 	bl	800b23c <prvAddNewTaskToReadyList>
 800b092:	e001      	b.n	800b098 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800b094:	2300      	movs	r3, #0
 800b096:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b098:	69bb      	ldr	r3, [r7, #24]
    }
 800b09a:	4618      	mov	r0, r3
 800b09c:	3720      	adds	r7, #32
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b08c      	sub	sp, #48	@ 0x30
 800b0a6:	af04      	add	r7, sp, #16
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	603b      	str	r3, [r7, #0]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0b2:	88fb      	ldrh	r3, [r7, #6]
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 fbce 	bl	800c858 <pvPortMalloc>
 800b0bc:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d013      	beq.n	800b0ec <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0c4:	205c      	movs	r0, #92	@ 0x5c
 800b0c6:	f001 fbc7 	bl	800c858 <pvPortMalloc>
 800b0ca:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d008      	beq.n	800b0e4 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b0d2:	225c      	movs	r2, #92	@ 0x5c
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	69f8      	ldr	r0, [r7, #28]
 800b0d8:	f001 fc1f 	bl	800c91a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0e2:	e005      	b.n	800b0f0 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800b0e4:	6978      	ldr	r0, [r7, #20]
 800b0e6:	f001 fc09 	bl	800c8fc <vPortFree>
 800b0ea:	e001      	b.n	800b0f0 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d017      	beq.n	800b126 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0fe:	88fa      	ldrh	r2, [r7, #6]
 800b100:	2300      	movs	r3, #0
 800b102:	9303      	str	r3, [sp, #12]
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	9302      	str	r3, [sp, #8]
 800b108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	68b9      	ldr	r1, [r7, #8]
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f000 f80e 	bl	800b136 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b11a:	69f8      	ldr	r0, [r7, #28]
 800b11c:	f000 f88e 	bl	800b23c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800b120:	2301      	movs	r3, #1
 800b122:	61bb      	str	r3, [r7, #24]
 800b124:	e002      	b.n	800b12c <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b126:	f04f 33ff 	mov.w	r3, #4294967295
 800b12a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b12c:	69bb      	ldr	r3, [r7, #24]
    }
 800b12e:	4618      	mov	r0, r3
 800b130:	3720      	adds	r7, #32
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b086      	sub	sp, #24
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	607a      	str	r2, [r7, #4]
 800b142:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b146:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	461a      	mov	r2, r3
 800b14e:	21a5      	movs	r1, #165	@ 0xa5
 800b150:	f001 fbe3 	bl	800c91a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b156:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b15e:	3b01      	subs	r3, #1
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	f023 0307 	bic.w	r3, r3, #7
 800b16c:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f003 0307 	and.w	r3, r3, #7
 800b174:	2b00      	cmp	r3, #0
 800b176:	d003      	beq.n	800b180 <prvInitialiseNewTask+0x4a>
 800b178:	f001 fb0e 	bl	800c798 <ulSetInterruptMask>
 800b17c:	bf00      	nop
 800b17e:	e7fd      	b.n	800b17c <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d01e      	beq.n	800b1c4 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b186:	2300      	movs	r3, #0
 800b188:	617b      	str	r3, [r7, #20]
 800b18a:	e012      	b.n	800b1b2 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	4413      	add	r3, r2
 800b192:	7819      	ldrb	r1, [r3, #0]
 800b194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	4413      	add	r3, r2
 800b19a:	3334      	adds	r3, #52	@ 0x34
 800b19c:	460a      	mov	r2, r1
 800b19e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d006      	beq.n	800b1ba <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	617b      	str	r3, [r7, #20]
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	2b0f      	cmp	r3, #15
 800b1b6:	d9e9      	bls.n	800b18c <prvInitialiseNewTask+0x56>
 800b1b8:	e000      	b.n	800b1bc <prvInitialiseNewTask+0x86>
            {
                break;
 800b1ba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	2b37      	cmp	r3, #55	@ 0x37
 800b1c8:	d903      	bls.n	800b1d2 <prvInitialiseNewTask+0x9c>
 800b1ca:	f001 fae5 	bl	800c798 <ulSetInterruptMask>
 800b1ce:	bf00      	nop
 800b1d0:	e7fd      	b.n	800b1ce <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	2b37      	cmp	r3, #55	@ 0x37
 800b1d6:	d901      	bls.n	800b1dc <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1d8:	2337      	movs	r3, #55	@ 0x37
 800b1da:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1de:	6a3a      	ldr	r2, [r7, #32]
 800b1e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800b1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e4:	6a3a      	ldr	r2, [r7, #32]
 800b1e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fbf1 	bl	800a9d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f4:	3318      	adds	r3, #24
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff fbec 	bl	800a9d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b200:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b210:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b214:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	6938      	ldr	r0, [r7, #16]
 800b21c:	f001 f9d8 	bl	800c5d0 <pxPortInitialiseStack>
 800b220:	4602      	mov	r2, r0
 800b222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b224:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800b226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b230:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b232:	bf00      	nop
 800b234:	3718      	adds	r7, #24
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800b244:	f001 f966 	bl	800c514 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800b248:	4b3e      	ldr	r3, [pc, #248]	@ (800b344 <prvAddNewTaskToReadyList+0x108>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3301      	adds	r3, #1
 800b24e:	4a3d      	ldr	r2, [pc, #244]	@ (800b344 <prvAddNewTaskToReadyList+0x108>)
 800b250:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800b252:	4b3d      	ldr	r3, [pc, #244]	@ (800b348 <prvAddNewTaskToReadyList+0x10c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d109      	bne.n	800b26e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800b25a:	4a3b      	ldr	r2, [pc, #236]	@ (800b348 <prvAddNewTaskToReadyList+0x10c>)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b260:	4b38      	ldr	r3, [pc, #224]	@ (800b344 <prvAddNewTaskToReadyList+0x108>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d110      	bne.n	800b28a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800b268:	f000 fd1e 	bl	800bca8 <prvInitialiseTaskLists>
 800b26c:	e00d      	b.n	800b28a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800b26e:	4b37      	ldr	r3, [pc, #220]	@ (800b34c <prvAddNewTaskToReadyList+0x110>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d109      	bne.n	800b28a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b276:	4b34      	ldr	r3, [pc, #208]	@ (800b348 <prvAddNewTaskToReadyList+0x10c>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b280:	429a      	cmp	r2, r3
 800b282:	d802      	bhi.n	800b28a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800b284:	4a30      	ldr	r2, [pc, #192]	@ (800b348 <prvAddNewTaskToReadyList+0x10c>)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800b28a:	4b31      	ldr	r3, [pc, #196]	@ (800b350 <prvAddNewTaskToReadyList+0x114>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3301      	adds	r3, #1
 800b290:	4a2f      	ldr	r2, [pc, #188]	@ (800b350 <prvAddNewTaskToReadyList+0x114>)
 800b292:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b294:	4b2e      	ldr	r3, [pc, #184]	@ (800b350 <prvAddNewTaskToReadyList+0x114>)
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2a0:	4b2c      	ldr	r3, [pc, #176]	@ (800b354 <prvAddNewTaskToReadyList+0x118>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d903      	bls.n	800b2b0 <prvAddNewTaskToReadyList+0x74>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ac:	4a29      	ldr	r2, [pc, #164]	@ (800b354 <prvAddNewTaskToReadyList+0x118>)
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b4:	4928      	ldr	r1, [pc, #160]	@ (800b358 <prvAddNewTaskToReadyList+0x11c>)
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4413      	add	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	440b      	add	r3, r1
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	609a      	str	r2, [r3, #8]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	689a      	ldr	r2, [r3, #8]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	60da      	str	r2, [r3, #12]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	3204      	adds	r2, #4
 800b2dc:	605a      	str	r2, [r3, #4]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	1d1a      	adds	r2, r3, #4
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	609a      	str	r2, [r3, #8]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4a19      	ldr	r2, [pc, #100]	@ (800b358 <prvAddNewTaskToReadyList+0x11c>)
 800b2f4:	441a      	add	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	615a      	str	r2, [r3, #20]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2fe:	4916      	ldr	r1, [pc, #88]	@ (800b358 <prvAddNewTaskToReadyList+0x11c>)
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	440b      	add	r3, r1
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	1c59      	adds	r1, r3, #1
 800b30e:	4812      	ldr	r0, [pc, #72]	@ (800b358 <prvAddNewTaskToReadyList+0x11c>)
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4403      	add	r3, r0
 800b31a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800b31c:	f001 f90c 	bl	800c538 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800b320:	4b0a      	ldr	r3, [pc, #40]	@ (800b34c <prvAddNewTaskToReadyList+0x110>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d008      	beq.n	800b33a <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b328:	4b07      	ldr	r3, [pc, #28]	@ (800b348 <prvAddNewTaskToReadyList+0x10c>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b332:	429a      	cmp	r2, r3
 800b334:	d201      	bcs.n	800b33a <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800b336:	f001 f8db 	bl	800c4f0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b33a:	bf00      	nop
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20000d84 	.word	0x20000d84
 800b348:	200008b0 	.word	0x200008b0
 800b34c:	20000d90 	.word	0x20000d90
 800b350:	20000da0 	.word	0x20000da0
 800b354:	20000d8c 	.word	0x20000d8c
 800b358:	200008b4 	.word	0x200008b4

0800b35c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800b364:	2300      	movs	r3, #0
 800b366:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d010      	beq.n	800b390 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800b36e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <vTaskDelay+0x48>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <vTaskDelay+0x22>
 800b376:	f001 fa0f 	bl	800c798 <ulSetInterruptMask>
 800b37a:	bf00      	nop
 800b37c:	e7fd      	b.n	800b37a <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800b37e:	f000 f86f 	bl	800b460 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b382:	2100      	movs	r1, #0
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fd5f 	bl	800be48 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800b38a:	f000 f877 	bl	800b47c <xTaskResumeAll>
 800b38e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800b396:	f001 f8ab 	bl	800c4f0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000dac 	.word	0x20000dac

0800b3a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3b6:	463a      	mov	r2, r7
 800b3b8:	1d39      	adds	r1, r7, #4
 800b3ba:	f107 0308 	add.w	r3, r7, #8
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff fab4 	bl	800a92c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	9202      	str	r2, [sp, #8]
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	460a      	mov	r2, r1
 800b3d6:	491b      	ldr	r1, [pc, #108]	@ (800b444 <vTaskStartScheduler+0x9c>)
 800b3d8:	481b      	ldr	r0, [pc, #108]	@ (800b448 <vTaskStartScheduler+0xa0>)
 800b3da:	f7ff fe15 	bl	800b008 <xTaskCreateStatic>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	4a1a      	ldr	r2, [pc, #104]	@ (800b44c <vTaskStartScheduler+0xa4>)
 800b3e2:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800b3e4:	4b19      	ldr	r3, [pc, #100]	@ (800b44c <vTaskStartScheduler+0xa4>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	e001      	b.n	800b3f6 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d102      	bne.n	800b402 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800b3fc:	f000 fd92 	bl	800bf24 <xTimerCreateTimerTask>
 800b400:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2b01      	cmp	r3, #1
 800b406:	d10e      	bne.n	800b426 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800b408:	f001 f9c6 	bl	800c798 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800b40c:	4b10      	ldr	r3, [pc, #64]	@ (800b450 <vTaskStartScheduler+0xa8>)
 800b40e:	f04f 32ff 	mov.w	r2, #4294967295
 800b412:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800b414:	4b0f      	ldr	r3, [pc, #60]	@ (800b454 <vTaskStartScheduler+0xac>)
 800b416:	2201      	movs	r2, #1
 800b418:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b41a:	4b0f      	ldr	r3, [pc, #60]	@ (800b458 <vTaskStartScheduler+0xb0>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800b420:	f001 f960 	bl	800c6e4 <xPortStartScheduler>
 800b424:	e007      	b.n	800b436 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42c:	d103      	bne.n	800b436 <vTaskStartScheduler+0x8e>
 800b42e:	f001 f9b3 	bl	800c798 <ulSetInterruptMask>
 800b432:	bf00      	nop
 800b434:	e7fd      	b.n	800b432 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800b436:	4b09      	ldr	r3, [pc, #36]	@ (800b45c <vTaskStartScheduler+0xb4>)
 800b438:	681b      	ldr	r3, [r3, #0]
}
 800b43a:	bf00      	nop
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	0800c9b4 	.word	0x0800c9b4
 800b448:	0800bc89 	.word	0x0800bc89
 800b44c:	20000da8 	.word	0x20000da8
 800b450:	20000da4 	.word	0x20000da4
 800b454:	20000d90 	.word	0x20000d90
 800b458:	20000d88 	.word	0x20000d88
 800b45c:	2000000c 	.word	0x2000000c

0800b460 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b460:	b480      	push	{r7}
 800b462:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800b464:	4b04      	ldr	r3, [pc, #16]	@ (800b478 <vTaskSuspendAll+0x18>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3301      	adds	r3, #1
 800b46a:	4a03      	ldr	r2, [pc, #12]	@ (800b478 <vTaskSuspendAll+0x18>)
 800b46c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800b46e:	bf00      	nop
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	20000dac 	.word	0x20000dac

0800b47c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800b482:	2300      	movs	r3, #0
 800b484:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800b486:	2300      	movs	r3, #0
 800b488:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800b48a:	4b6b      	ldr	r3, [pc, #428]	@ (800b638 <xTaskResumeAll+0x1bc>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d103      	bne.n	800b49a <xTaskResumeAll+0x1e>
 800b492:	f001 f981 	bl	800c798 <ulSetInterruptMask>
 800b496:	bf00      	nop
 800b498:	e7fd      	b.n	800b496 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800b49a:	f001 f83b 	bl	800c514 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800b49e:	4b66      	ldr	r3, [pc, #408]	@ (800b638 <xTaskResumeAll+0x1bc>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	4a64      	ldr	r2, [pc, #400]	@ (800b638 <xTaskResumeAll+0x1bc>)
 800b4a6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4a8:	4b63      	ldr	r3, [pc, #396]	@ (800b638 <xTaskResumeAll+0x1bc>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f040 80bb 	bne.w	800b628 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4b2:	4b62      	ldr	r3, [pc, #392]	@ (800b63c <xTaskResumeAll+0x1c0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 80b6 	beq.w	800b628 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4bc:	e08b      	b.n	800b5d6 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4be:	4b60      	ldr	r3, [pc, #384]	@ (800b640 <xTaskResumeAll+0x1c4>)
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ca:	60bb      	str	r3, [r7, #8]
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	6a12      	ldr	r2, [r2, #32]
 800b4d4:	609a      	str	r2, [r3, #8]
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	69d2      	ldr	r2, [r2, #28]
 800b4de:	605a      	str	r2, [r3, #4]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	3318      	adds	r3, #24
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d103      	bne.n	800b4f4 <xTaskResumeAll+0x78>
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	6a1a      	ldr	r2, [r3, #32]
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	605a      	str	r2, [r3, #4]
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	629a      	str	r2, [r3, #40]	@ 0x28
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	1e5a      	subs	r2, r3, #1
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	607b      	str	r3, [r7, #4]
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	697a      	ldr	r2, [r7, #20]
 800b510:	68d2      	ldr	r2, [r2, #12]
 800b512:	609a      	str	r2, [r3, #8]
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	6892      	ldr	r2, [r2, #8]
 800b51c:	605a      	str	r2, [r3, #4]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	3304      	adds	r3, #4
 800b526:	429a      	cmp	r2, r3
 800b528:	d103      	bne.n	800b532 <xTaskResumeAll+0xb6>
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	68da      	ldr	r2, [r3, #12]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	605a      	str	r2, [r3, #4]
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2200      	movs	r2, #0
 800b536:	615a      	str	r2, [r3, #20]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	1e5a      	subs	r2, r3, #1
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b546:	4b3f      	ldr	r3, [pc, #252]	@ (800b644 <xTaskResumeAll+0x1c8>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d903      	bls.n	800b556 <xTaskResumeAll+0xda>
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b552:	4a3c      	ldr	r2, [pc, #240]	@ (800b644 <xTaskResumeAll+0x1c8>)
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b55a:	493b      	ldr	r1, [pc, #236]	@ (800b648 <xTaskResumeAll+0x1cc>)
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	440b      	add	r3, r1
 800b566:	3304      	adds	r3, #4
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	609a      	str	r2, [r3, #8]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	689a      	ldr	r2, [r3, #8]
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	60da      	str	r2, [r3, #12]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	3204      	adds	r2, #4
 800b582:	605a      	str	r2, [r3, #4]
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	1d1a      	adds	r2, r3, #4
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	609a      	str	r2, [r3, #8]
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b590:	4613      	mov	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4a2b      	ldr	r2, [pc, #172]	@ (800b648 <xTaskResumeAll+0x1cc>)
 800b59a:	441a      	add	r2, r3
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	615a      	str	r2, [r3, #20]
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a4:	4928      	ldr	r1, [pc, #160]	@ (800b648 <xTaskResumeAll+0x1cc>)
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	440b      	add	r3, r1
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	1c59      	adds	r1, r3, #1
 800b5b4:	4824      	ldr	r0, [pc, #144]	@ (800b648 <xTaskResumeAll+0x1cc>)
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4403      	add	r3, r0
 800b5c0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c6:	4b21      	ldr	r3, [pc, #132]	@ (800b64c <xTaskResumeAll+0x1d0>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d302      	bcc.n	800b5d6 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800b5d0:	4b1f      	ldr	r3, [pc, #124]	@ (800b650 <xTaskResumeAll+0x1d4>)
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5d6:	4b1a      	ldr	r3, [pc, #104]	@ (800b640 <xTaskResumeAll+0x1c4>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f47f af6f 	bne.w	800b4be <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800b5e6:	f000 fbf5 	bl	800bdd4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5ea:	4b1a      	ldr	r3, [pc, #104]	@ (800b654 <xTaskResumeAll+0x1d8>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d010      	beq.n	800b618 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800b5f6:	f000 f83f 	bl	800b678 <xTaskIncrementTick>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800b600:	4b13      	ldr	r3, [pc, #76]	@ (800b650 <xTaskResumeAll+0x1d4>)
 800b602:	2201      	movs	r2, #1
 800b604:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3b01      	subs	r3, #1
 800b60a:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1f1      	bne.n	800b5f6 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800b612:	4b10      	ldr	r3, [pc, #64]	@ (800b654 <xTaskResumeAll+0x1d8>)
 800b614:	2200      	movs	r2, #0
 800b616:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800b618:	4b0d      	ldr	r3, [pc, #52]	@ (800b650 <xTaskResumeAll+0x1d4>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800b620:	2301      	movs	r3, #1
 800b622:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800b624:	f000 ff64 	bl	800c4f0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800b628:	f000 ff86 	bl	800c538 <vPortExitCritical>

    return xAlreadyYielded;
 800b62c:	693b      	ldr	r3, [r7, #16]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3718      	adds	r7, #24
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20000dac 	.word	0x20000dac
 800b63c:	20000d84 	.word	0x20000d84
 800b640:	20000d44 	.word	0x20000d44
 800b644:	20000d8c 	.word	0x20000d8c
 800b648:	200008b4 	.word	0x200008b4
 800b64c:	200008b0 	.word	0x200008b0
 800b650:	20000d98 	.word	0x20000d98
 800b654:	20000d94 	.word	0x20000d94

0800b658 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800b65e:	4b05      	ldr	r3, [pc, #20]	@ (800b674 <xTaskGetTickCount+0x1c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800b664:	687b      	ldr	r3, [r7, #4]
}
 800b666:	4618      	mov	r0, r3
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20000d88 	.word	0x20000d88

0800b678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b088      	sub	sp, #32
 800b67c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800b67e:	2300      	movs	r3, #0
 800b680:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b682:	4b7a      	ldr	r3, [pc, #488]	@ (800b86c <xTaskIncrementTick+0x1f4>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f040 80e6 	bne.w	800b858 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b68c:	4b78      	ldr	r3, [pc, #480]	@ (800b870 <xTaskIncrementTick+0x1f8>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3301      	adds	r3, #1
 800b692:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800b694:	4a76      	ldr	r2, [pc, #472]	@ (800b870 <xTaskIncrementTick+0x1f8>)
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d119      	bne.n	800b6d4 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800b6a0:	4b74      	ldr	r3, [pc, #464]	@ (800b874 <xTaskIncrementTick+0x1fc>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d003      	beq.n	800b6b2 <xTaskIncrementTick+0x3a>
 800b6aa:	f001 f875 	bl	800c798 <ulSetInterruptMask>
 800b6ae:	bf00      	nop
 800b6b0:	e7fd      	b.n	800b6ae <xTaskIncrementTick+0x36>
 800b6b2:	4b70      	ldr	r3, [pc, #448]	@ (800b874 <xTaskIncrementTick+0x1fc>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	617b      	str	r3, [r7, #20]
 800b6b8:	4b6f      	ldr	r3, [pc, #444]	@ (800b878 <xTaskIncrementTick+0x200>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a6d      	ldr	r2, [pc, #436]	@ (800b874 <xTaskIncrementTick+0x1fc>)
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	4a6d      	ldr	r2, [pc, #436]	@ (800b878 <xTaskIncrementTick+0x200>)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	4b6d      	ldr	r3, [pc, #436]	@ (800b87c <xTaskIncrementTick+0x204>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	4a6b      	ldr	r2, [pc, #428]	@ (800b87c <xTaskIncrementTick+0x204>)
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	f000 fb80 	bl	800bdd4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800b6d4:	4b6a      	ldr	r3, [pc, #424]	@ (800b880 <xTaskIncrementTick+0x208>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	69ba      	ldr	r2, [r7, #24]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	f0c0 80a7 	bcc.w	800b82e <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6e0:	4b64      	ldr	r3, [pc, #400]	@ (800b874 <xTaskIncrementTick+0x1fc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d104      	bne.n	800b6f4 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ea:	4b65      	ldr	r3, [pc, #404]	@ (800b880 <xTaskIncrementTick+0x208>)
 800b6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f0:	601a      	str	r2, [r3, #0]
                    break;
 800b6f2:	e09c      	b.n	800b82e <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f4:	4b5f      	ldr	r3, [pc, #380]	@ (800b874 <xTaskIncrementTick+0x1fc>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d203      	bcs.n	800b714 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800b70c:	4a5c      	ldr	r2, [pc, #368]	@ (800b880 <xTaskIncrementTick+0x208>)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800b712:	e08c      	b.n	800b82e <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	60bb      	str	r3, [r7, #8]
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	68d2      	ldr	r2, [r2, #12]
 800b722:	609a      	str	r2, [r3, #8]
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	6892      	ldr	r2, [r2, #8]
 800b72c:	605a      	str	r2, [r3, #4]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	3304      	adds	r3, #4
 800b736:	429a      	cmp	r2, r3
 800b738:	d103      	bne.n	800b742 <xTaskIncrementTick+0xca>
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	68da      	ldr	r2, [r3, #12]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	605a      	str	r2, [r3, #4]
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2200      	movs	r2, #0
 800b746:	615a      	str	r2, [r3, #20]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	1e5a      	subs	r2, r3, #1
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b756:	2b00      	cmp	r3, #0
 800b758:	d01e      	beq.n	800b798 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75e:	607b      	str	r3, [r7, #4]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	69db      	ldr	r3, [r3, #28]
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	6a12      	ldr	r2, [r2, #32]
 800b768:	609a      	str	r2, [r3, #8]
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	69d2      	ldr	r2, [r2, #28]
 800b772:	605a      	str	r2, [r3, #4]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	3318      	adds	r3, #24
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d103      	bne.n	800b788 <xTaskIncrementTick+0x110>
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	6a1a      	ldr	r2, [r3, #32]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	605a      	str	r2, [r3, #4]
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	2200      	movs	r2, #0
 800b78c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	1e5a      	subs	r2, r3, #1
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79c:	4b39      	ldr	r3, [pc, #228]	@ (800b884 <xTaskIncrementTick+0x20c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d903      	bls.n	800b7ac <xTaskIncrementTick+0x134>
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a8:	4a36      	ldr	r2, [pc, #216]	@ (800b884 <xTaskIncrementTick+0x20c>)
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7b0:	4935      	ldr	r1, [pc, #212]	@ (800b888 <xTaskIncrementTick+0x210>)
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	3304      	adds	r3, #4
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	603b      	str	r3, [r7, #0]
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	609a      	str	r2, [r3, #8]
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	689a      	ldr	r2, [r3, #8]
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	60da      	str	r2, [r3, #12]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	3204      	adds	r2, #4
 800b7d8:	605a      	str	r2, [r3, #4]
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	1d1a      	adds	r2, r3, #4
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	609a      	str	r2, [r3, #8]
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	4413      	add	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4a26      	ldr	r2, [pc, #152]	@ (800b888 <xTaskIncrementTick+0x210>)
 800b7f0:	441a      	add	r2, r3
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	615a      	str	r2, [r3, #20]
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7fa:	4923      	ldr	r1, [pc, #140]	@ (800b888 <xTaskIncrementTick+0x210>)
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	440b      	add	r3, r1
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	1c59      	adds	r1, r3, #1
 800b80a:	481f      	ldr	r0, [pc, #124]	@ (800b888 <xTaskIncrementTick+0x210>)
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4403      	add	r3, r0
 800b816:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b81c:	4b1b      	ldr	r3, [pc, #108]	@ (800b88c <xTaskIncrementTick+0x214>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b822:	429a      	cmp	r2, r3
 800b824:	f67f af5c 	bls.w	800b6e0 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800b828:	2301      	movs	r3, #1
 800b82a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b82c:	e758      	b.n	800b6e0 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b82e:	4b17      	ldr	r3, [pc, #92]	@ (800b88c <xTaskIncrementTick+0x214>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b834:	4914      	ldr	r1, [pc, #80]	@ (800b888 <xTaskIncrementTick+0x210>)
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	440b      	add	r3, r1
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d901      	bls.n	800b84a <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800b846:	2301      	movs	r3, #1
 800b848:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800b84a:	4b11      	ldr	r3, [pc, #68]	@ (800b890 <xTaskIncrementTick+0x218>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d007      	beq.n	800b862 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800b852:	2301      	movs	r3, #1
 800b854:	61fb      	str	r3, [r7, #28]
 800b856:	e004      	b.n	800b862 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800b858:	4b0e      	ldr	r3, [pc, #56]	@ (800b894 <xTaskIncrementTick+0x21c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3301      	adds	r3, #1
 800b85e:	4a0d      	ldr	r2, [pc, #52]	@ (800b894 <xTaskIncrementTick+0x21c>)
 800b860:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800b862:	69fb      	ldr	r3, [r7, #28]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3720      	adds	r7, #32
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	20000dac 	.word	0x20000dac
 800b870:	20000d88 	.word	0x20000d88
 800b874:	20000d3c 	.word	0x20000d3c
 800b878:	20000d40 	.word	0x20000d40
 800b87c:	20000d9c 	.word	0x20000d9c
 800b880:	20000da4 	.word	0x20000da4
 800b884:	20000d8c 	.word	0x20000d8c
 800b888:	200008b4 	.word	0x200008b4
 800b88c:	200008b0 	.word	0x200008b0
 800b890:	20000d98 	.word	0x20000d98
 800b894:	20000d94 	.word	0x20000d94

0800b898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b89e:	4b23      	ldr	r3, [pc, #140]	@ (800b92c <vTaskSwitchContext+0x94>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d003      	beq.n	800b8ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800b8a6:	4b22      	ldr	r3, [pc, #136]	@ (800b930 <vTaskSwitchContext+0x98>)
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800b8ac:	e03a      	b.n	800b924 <vTaskSwitchContext+0x8c>
        xYieldPending = pdFALSE;
 800b8ae:	4b20      	ldr	r3, [pc, #128]	@ (800b930 <vTaskSwitchContext+0x98>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b4:	4b1f      	ldr	r3, [pc, #124]	@ (800b934 <vTaskSwitchContext+0x9c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	607b      	str	r3, [r7, #4]
 800b8ba:	e009      	b.n	800b8d0 <vTaskSwitchContext+0x38>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d103      	bne.n	800b8ca <vTaskSwitchContext+0x32>
 800b8c2:	f000 ff69 	bl	800c798 <ulSetInterruptMask>
 800b8c6:	bf00      	nop
 800b8c8:	e7fd      	b.n	800b8c6 <vTaskSwitchContext+0x2e>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	607b      	str	r3, [r7, #4]
 800b8d0:	4919      	ldr	r1, [pc, #100]	@ (800b938 <vTaskSwitchContext+0xa0>)
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	440b      	add	r3, r1
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d0eb      	beq.n	800b8bc <vTaskSwitchContext+0x24>
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4a12      	ldr	r2, [pc, #72]	@ (800b938 <vTaskSwitchContext+0xa0>)
 800b8f0:	4413      	add	r3, r2
 800b8f2:	603b      	str	r3, [r7, #0]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	605a      	str	r2, [r3, #4]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	685a      	ldr	r2, [r3, #4]
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	3308      	adds	r3, #8
 800b906:	429a      	cmp	r2, r3
 800b908:	d104      	bne.n	800b914 <vTaskSwitchContext+0x7c>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	605a      	str	r2, [r3, #4]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	4a08      	ldr	r2, [pc, #32]	@ (800b93c <vTaskSwitchContext+0xa4>)
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	4a05      	ldr	r2, [pc, #20]	@ (800b934 <vTaskSwitchContext+0x9c>)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6013      	str	r3, [r2, #0]
}
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20000dac 	.word	0x20000dac
 800b930:	20000d98 	.word	0x20000d98
 800b934:	20000d8c 	.word	0x20000d8c
 800b938:	200008b4 	.word	0x200008b4
 800b93c:	200008b0 	.word	0x200008b0

0800b940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d103      	bne.n	800b958 <vTaskPlaceOnEventList+0x18>
 800b950:	f000 ff22 	bl	800c798 <ulSetInterruptMask>
 800b954:	bf00      	nop
 800b956:	e7fd      	b.n	800b954 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b958:	4b07      	ldr	r3, [pc, #28]	@ (800b978 <vTaskPlaceOnEventList+0x38>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3318      	adds	r3, #24
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f7ff f844 	bl	800a9ee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b966:	2101      	movs	r1, #1
 800b968:	6838      	ldr	r0, [r7, #0]
 800b96a:	f000 fa6d 	bl	800be48 <prvAddCurrentTaskToDelayedList>
}
 800b96e:	bf00      	nop
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	200008b0 	.word	0x200008b0

0800b97c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d103      	bne.n	800b996 <vTaskPlaceOnEventListRestricted+0x1a>
 800b98e:	f000 ff03 	bl	800c798 <ulSetInterruptMask>
 800b992:	bf00      	nop
 800b994:	e7fd      	b.n	800b992 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	617b      	str	r3, [r7, #20]
 800b99c:	4b15      	ldr	r3, [pc, #84]	@ (800b9f4 <vTaskPlaceOnEventListRestricted+0x78>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	61da      	str	r2, [r3, #28]
 800b9a4:	4b13      	ldr	r3, [pc, #76]	@ (800b9f4 <vTaskPlaceOnEventListRestricted+0x78>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	6892      	ldr	r2, [r2, #8]
 800b9ac:	621a      	str	r2, [r3, #32]
 800b9ae:	4b11      	ldr	r3, [pc, #68]	@ (800b9f4 <vTaskPlaceOnEventListRestricted+0x78>)
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	3218      	adds	r2, #24
 800b9b8:	605a      	str	r2, [r3, #4]
 800b9ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f4 <vTaskPlaceOnEventListRestricted+0x78>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f103 0218 	add.w	r2, r3, #24
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	609a      	str	r2, [r3, #8]
 800b9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b9f4 <vTaskPlaceOnEventListRestricted+0x78>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	629a      	str	r2, [r3, #40]	@ 0x28
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d002      	beq.n	800b9e4 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800b9de:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	68b8      	ldr	r0, [r7, #8]
 800b9e8:	f000 fa2e 	bl	800be48 <prvAddCurrentTaskToDelayedList>
    }
 800b9ec:	bf00      	nop
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	200008b0 	.word	0x200008b0

0800b9f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b088      	sub	sp, #32
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d103      	bne.n	800ba16 <xTaskRemoveFromEventList+0x1e>
 800ba0e:	f000 fec3 	bl	800c798 <ulSetInterruptMask>
 800ba12:	bf00      	nop
 800ba14:	e7fd      	b.n	800ba12 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	69db      	ldr	r3, [r3, #28]
 800ba20:	69ba      	ldr	r2, [r7, #24]
 800ba22:	6a12      	ldr	r2, [r2, #32]
 800ba24:	609a      	str	r2, [r3, #8]
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	69ba      	ldr	r2, [r7, #24]
 800ba2c:	69d2      	ldr	r2, [r2, #28]
 800ba2e:	605a      	str	r2, [r3, #4]
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	3318      	adds	r3, #24
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d103      	bne.n	800ba44 <xTaskRemoveFromEventList+0x4c>
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	6a1a      	ldr	r2, [r3, #32]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	605a      	str	r2, [r3, #4]
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	2200      	movs	r2, #0
 800ba48:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	1e5a      	subs	r2, r3, #1
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba54:	4b49      	ldr	r3, [pc, #292]	@ (800bb7c <xTaskRemoveFromEventList+0x184>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d15f      	bne.n	800bb1c <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	60fb      	str	r3, [r7, #12]
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	68d2      	ldr	r2, [r2, #12]
 800ba6a:	609a      	str	r2, [r3, #8]
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	69ba      	ldr	r2, [r7, #24]
 800ba72:	6892      	ldr	r2, [r2, #8]
 800ba74:	605a      	str	r2, [r3, #4]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d103      	bne.n	800ba8a <xTaskRemoveFromEventList+0x92>
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	68da      	ldr	r2, [r3, #12]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	605a      	str	r2, [r3, #4]
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	615a      	str	r2, [r3, #20]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	1e5a      	subs	r2, r3, #1
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba9e:	4b38      	ldr	r3, [pc, #224]	@ (800bb80 <xTaskRemoveFromEventList+0x188>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d903      	bls.n	800baae <xTaskRemoveFromEventList+0xb6>
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baaa:	4a35      	ldr	r2, [pc, #212]	@ (800bb80 <xTaskRemoveFromEventList+0x188>)
 800baac:	6013      	str	r3, [r2, #0]
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab2:	4934      	ldr	r1, [pc, #208]	@ (800bb84 <xTaskRemoveFromEventList+0x18c>)
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	440b      	add	r3, r1
 800babe:	3304      	adds	r3, #4
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	60bb      	str	r3, [r7, #8]
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	609a      	str	r2, [r3, #8]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	689a      	ldr	r2, [r3, #8]
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	60da      	str	r2, [r3, #12]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	69ba      	ldr	r2, [r7, #24]
 800bad8:	3204      	adds	r2, #4
 800bada:	605a      	str	r2, [r3, #4]
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	1d1a      	adds	r2, r3, #4
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	609a      	str	r2, [r3, #8]
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae8:	4613      	mov	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4a24      	ldr	r2, [pc, #144]	@ (800bb84 <xTaskRemoveFromEventList+0x18c>)
 800baf2:	441a      	add	r2, r3
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	615a      	str	r2, [r3, #20]
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bafc:	4921      	ldr	r1, [pc, #132]	@ (800bb84 <xTaskRemoveFromEventList+0x18c>)
 800bafe:	4613      	mov	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	440b      	add	r3, r1
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	1c59      	adds	r1, r3, #1
 800bb0c:	481d      	ldr	r0, [pc, #116]	@ (800bb84 <xTaskRemoveFromEventList+0x18c>)
 800bb0e:	4613      	mov	r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4413      	add	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4403      	add	r3, r0
 800bb18:	6019      	str	r1, [r3, #0]
 800bb1a:	e01b      	b.n	800bb54 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb1c:	4b1a      	ldr	r3, [pc, #104]	@ (800bb88 <xTaskRemoveFromEventList+0x190>)
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	613b      	str	r3, [r7, #16]
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	61da      	str	r2, [r3, #28]
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	689a      	ldr	r2, [r3, #8]
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	621a      	str	r2, [r3, #32]
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	69ba      	ldr	r2, [r7, #24]
 800bb36:	3218      	adds	r2, #24
 800bb38:	605a      	str	r2, [r3, #4]
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	f103 0218 	add.w	r2, r3, #24
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	609a      	str	r2, [r3, #8]
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	4a10      	ldr	r2, [pc, #64]	@ (800bb88 <xTaskRemoveFromEventList+0x190>)
 800bb48:	629a      	str	r2, [r3, #40]	@ 0x28
 800bb4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bb88 <xTaskRemoveFromEventList+0x190>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	4a0d      	ldr	r2, [pc, #52]	@ (800bb88 <xTaskRemoveFromEventList+0x190>)
 800bb52:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb58:	4b0c      	ldr	r3, [pc, #48]	@ (800bb8c <xTaskRemoveFromEventList+0x194>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d905      	bls.n	800bb6e <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800bb62:	2301      	movs	r3, #1
 800bb64:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800bb66:	4b0a      	ldr	r3, [pc, #40]	@ (800bb90 <xTaskRemoveFromEventList+0x198>)
 800bb68:	2201      	movs	r2, #1
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	e001      	b.n	800bb72 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800bb72:	69fb      	ldr	r3, [r7, #28]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3720      	adds	r7, #32
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	20000dac 	.word	0x20000dac
 800bb80:	20000d8c 	.word	0x20000d8c
 800bb84:	200008b4 	.word	0x200008b4
 800bb88:	20000d44 	.word	0x20000d44
 800bb8c:	200008b0 	.word	0x200008b0
 800bb90:	20000d98 	.word	0x20000d98

0800bb94 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb9c:	4b06      	ldr	r3, [pc, #24]	@ (800bbb8 <vTaskInternalSetTimeOutState+0x24>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800bba4:	4b05      	ldr	r3, [pc, #20]	@ (800bbbc <vTaskInternalSetTimeOutState+0x28>)
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	605a      	str	r2, [r3, #4]
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	20000d9c 	.word	0x20000d9c
 800bbbc:	20000d88 	.word	0x20000d88

0800bbc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d103      	bne.n	800bbd8 <xTaskCheckForTimeOut+0x18>
 800bbd0:	f000 fde2 	bl	800c798 <ulSetInterruptMask>
 800bbd4:	bf00      	nop
 800bbd6:	e7fd      	b.n	800bbd4 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d103      	bne.n	800bbe6 <xTaskCheckForTimeOut+0x26>
 800bbde:	f000 fddb 	bl	800c798 <ulSetInterruptMask>
 800bbe2:	bf00      	nop
 800bbe4:	e7fd      	b.n	800bbe2 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800bbe6:	f000 fc95 	bl	800c514 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800bbea:	4b1f      	ldr	r3, [pc, #124]	@ (800bc68 <xTaskCheckForTimeOut+0xa8>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc02:	d102      	bne.n	800bc0a <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800bc04:	2300      	movs	r3, #0
 800bc06:	617b      	str	r3, [r7, #20]
 800bc08:	e026      	b.n	800bc58 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	4b17      	ldr	r3, [pc, #92]	@ (800bc6c <xTaskCheckForTimeOut+0xac>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d00a      	beq.n	800bc2c <xTaskCheckForTimeOut+0x6c>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d305      	bcc.n	800bc2c <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800bc20:	2301      	movs	r3, #1
 800bc22:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2200      	movs	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]
 800bc2a:	e015      	b.n	800bc58 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d20b      	bcs.n	800bc4e <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	1ad2      	subs	r2, r2, r3
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff ffa6 	bl	800bb94 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	617b      	str	r3, [r7, #20]
 800bc4c:	e004      	b.n	800bc58 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800bc54:	2301      	movs	r3, #1
 800bc56:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800bc58:	f000 fc6e 	bl	800c538 <vPortExitCritical>

    return xReturn;
 800bc5c:	697b      	ldr	r3, [r7, #20]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20000d88 	.word	0x20000d88
 800bc6c:	20000d9c 	.word	0x20000d9c

0800bc70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc70:	b480      	push	{r7}
 800bc72:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800bc74:	4b03      	ldr	r3, [pc, #12]	@ (800bc84 <vTaskMissedYield+0x14>)
 800bc76:	2201      	movs	r2, #1
 800bc78:	601a      	str	r2, [r3, #0]
}
 800bc7a:	bf00      	nop
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	20000d98 	.word	0x20000d98

0800bc88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800bc90:	f000 f84a 	bl	800bd28 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc94:	4b03      	ldr	r3, [pc, #12]	@ (800bca4 <prvIdleTask+0x1c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d9f9      	bls.n	800bc90 <prvIdleTask+0x8>
            {
                taskYIELD();
 800bc9c:	f000 fc28 	bl	800c4f0 <vPortYield>
        prvCheckTasksWaitingTermination();
 800bca0:	e7f6      	b.n	800bc90 <prvIdleTask+0x8>
 800bca2:	bf00      	nop
 800bca4:	200008b4 	.word	0x200008b4

0800bca8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcae:	2300      	movs	r3, #0
 800bcb0:	607b      	str	r3, [r7, #4]
 800bcb2:	e00c      	b.n	800bcce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4a12      	ldr	r2, [pc, #72]	@ (800bd08 <prvInitialiseTaskLists+0x60>)
 800bcc0:	4413      	add	r3, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe fe66 	bl	800a994 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	3301      	adds	r3, #1
 800bccc:	607b      	str	r3, [r7, #4]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b37      	cmp	r3, #55	@ 0x37
 800bcd2:	d9ef      	bls.n	800bcb4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800bcd4:	480d      	ldr	r0, [pc, #52]	@ (800bd0c <prvInitialiseTaskLists+0x64>)
 800bcd6:	f7fe fe5d 	bl	800a994 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800bcda:	480d      	ldr	r0, [pc, #52]	@ (800bd10 <prvInitialiseTaskLists+0x68>)
 800bcdc:	f7fe fe5a 	bl	800a994 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800bce0:	480c      	ldr	r0, [pc, #48]	@ (800bd14 <prvInitialiseTaskLists+0x6c>)
 800bce2:	f7fe fe57 	bl	800a994 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800bce6:	480c      	ldr	r0, [pc, #48]	@ (800bd18 <prvInitialiseTaskLists+0x70>)
 800bce8:	f7fe fe54 	bl	800a994 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800bcec:	480b      	ldr	r0, [pc, #44]	@ (800bd1c <prvInitialiseTaskLists+0x74>)
 800bcee:	f7fe fe51 	bl	800a994 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800bcf2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd20 <prvInitialiseTaskLists+0x78>)
 800bcf4:	4a05      	ldr	r2, [pc, #20]	@ (800bd0c <prvInitialiseTaskLists+0x64>)
 800bcf6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	@ (800bd24 <prvInitialiseTaskLists+0x7c>)
 800bcfa:	4a05      	ldr	r2, [pc, #20]	@ (800bd10 <prvInitialiseTaskLists+0x68>)
 800bcfc:	601a      	str	r2, [r3, #0]
}
 800bcfe:	bf00      	nop
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	200008b4 	.word	0x200008b4
 800bd0c:	20000d14 	.word	0x20000d14
 800bd10:	20000d28 	.word	0x20000d28
 800bd14:	20000d44 	.word	0x20000d44
 800bd18:	20000d58 	.word	0x20000d58
 800bd1c:	20000d70 	.word	0x20000d70
 800bd20:	20000d3c 	.word	0x20000d3c
 800bd24:	20000d40 	.word	0x20000d40

0800bd28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd2e:	e019      	b.n	800bd64 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800bd30:	f000 fbf0 	bl	800c514 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd34:	4b10      	ldr	r3, [pc, #64]	@ (800bd78 <prvCheckTasksWaitingTermination+0x50>)
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	3304      	adds	r3, #4
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fe fe8d 	bl	800aa60 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800bd46:	4b0d      	ldr	r3, [pc, #52]	@ (800bd7c <prvCheckTasksWaitingTermination+0x54>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	4a0b      	ldr	r2, [pc, #44]	@ (800bd7c <prvCheckTasksWaitingTermination+0x54>)
 800bd4e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800bd50:	4b0b      	ldr	r3, [pc, #44]	@ (800bd80 <prvCheckTasksWaitingTermination+0x58>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3b01      	subs	r3, #1
 800bd56:	4a0a      	ldr	r2, [pc, #40]	@ (800bd80 <prvCheckTasksWaitingTermination+0x58>)
 800bd58:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800bd5a:	f000 fbed 	bl	800c538 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f810 	bl	800bd84 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd64:	4b06      	ldr	r3, [pc, #24]	@ (800bd80 <prvCheckTasksWaitingTermination+0x58>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1e1      	bne.n	800bd30 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800bd6c:	bf00      	nop
 800bd6e:	bf00      	nop
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20000d58 	.word	0x20000d58
 800bd7c:	20000d84 	.word	0x20000d84
 800bd80:	20000d6c 	.word	0x20000d6c

0800bd84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d108      	bne.n	800bda8 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 fdae 	bl	800c8fc <vPortFree>
                vPortFree( pxTCB );
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fdab 	bl	800c8fc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800bda6:	e011      	b.n	800bdcc <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d103      	bne.n	800bdba <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fda2 	bl	800c8fc <vPortFree>
    }
 800bdb8:	e008      	b.n	800bdcc <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d003      	beq.n	800bdcc <prvDeleteTCB+0x48>
 800bdc4:	f000 fce8 	bl	800c798 <ulSetInterruptMask>
 800bdc8:	bf00      	nop
 800bdca:	e7fd      	b.n	800bdc8 <prvDeleteTCB+0x44>
    }
 800bdcc:	bf00      	nop
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdd8:	4b0a      	ldr	r3, [pc, #40]	@ (800be04 <prvResetNextTaskUnblockTime+0x30>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d104      	bne.n	800bdec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800bde2:	4b09      	ldr	r3, [pc, #36]	@ (800be08 <prvResetNextTaskUnblockTime+0x34>)
 800bde4:	f04f 32ff 	mov.w	r2, #4294967295
 800bde8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800bdea:	e005      	b.n	800bdf8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bdec:	4b05      	ldr	r3, [pc, #20]	@ (800be04 <prvResetNextTaskUnblockTime+0x30>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a04      	ldr	r2, [pc, #16]	@ (800be08 <prvResetNextTaskUnblockTime+0x34>)
 800bdf6:	6013      	str	r3, [r2, #0]
}
 800bdf8:	bf00      	nop
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	20000d3c 	.word	0x20000d3c
 800be08:	20000da4 	.word	0x20000da4

0800be0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800be12:	4b0b      	ldr	r3, [pc, #44]	@ (800be40 <xTaskGetSchedulerState+0x34>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d102      	bne.n	800be20 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800be1a:	2301      	movs	r3, #1
 800be1c:	607b      	str	r3, [r7, #4]
 800be1e:	e008      	b.n	800be32 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be20:	4b08      	ldr	r3, [pc, #32]	@ (800be44 <xTaskGetSchedulerState+0x38>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d102      	bne.n	800be2e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800be28:	2302      	movs	r3, #2
 800be2a:	607b      	str	r3, [r7, #4]
 800be2c:	e001      	b.n	800be32 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800be2e:	2300      	movs	r3, #0
 800be30:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800be32:	687b      	ldr	r3, [r7, #4]
    }
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	20000d90 	.word	0x20000d90
 800be44:	20000dac 	.word	0x20000dac

0800be48 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800be52:	4b2e      	ldr	r3, [pc, #184]	@ (800bf0c <prvAddCurrentTaskToDelayedList+0xc4>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be58:	4b2d      	ldr	r3, [pc, #180]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3304      	adds	r3, #4
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fe fdfe 	bl	800aa60 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6a:	d124      	bne.n	800beb6 <prvAddCurrentTaskToDelayedList+0x6e>
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d021      	beq.n	800beb6 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be72:	4b28      	ldr	r3, [pc, #160]	@ (800bf14 <prvAddCurrentTaskToDelayedList+0xcc>)
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	613b      	str	r3, [r7, #16]
 800be78:	4b25      	ldr	r3, [pc, #148]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	609a      	str	r2, [r3, #8]
 800be80:	4b23      	ldr	r3, [pc, #140]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	6892      	ldr	r2, [r2, #8]
 800be88:	60da      	str	r2, [r3, #12]
 800be8a:	4b21      	ldr	r3, [pc, #132]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	3204      	adds	r2, #4
 800be94:	605a      	str	r2, [r3, #4]
 800be96:	4b1e      	ldr	r3, [pc, #120]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	1d1a      	adds	r2, r3, #4
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	609a      	str	r2, [r3, #8]
 800bea0:	4b1b      	ldr	r3, [pc, #108]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a1b      	ldr	r2, [pc, #108]	@ (800bf14 <prvAddCurrentTaskToDelayedList+0xcc>)
 800bea6:	615a      	str	r2, [r3, #20]
 800bea8:	4b1a      	ldr	r3, [pc, #104]	@ (800bf14 <prvAddCurrentTaskToDelayedList+0xcc>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3301      	adds	r3, #1
 800beae:	4a19      	ldr	r2, [pc, #100]	@ (800bf14 <prvAddCurrentTaskToDelayedList+0xcc>)
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800beb4:	e026      	b.n	800bf04 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800beb6:	697a      	ldr	r2, [r7, #20]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4413      	add	r3, r2
 800bebc:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bebe:	4b14      	ldr	r3, [pc, #80]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	429a      	cmp	r2, r3
 800becc:	d209      	bcs.n	800bee2 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bece:	4b12      	ldr	r3, [pc, #72]	@ (800bf18 <prvAddCurrentTaskToDelayedList+0xd0>)
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	4b0f      	ldr	r3, [pc, #60]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	3304      	adds	r3, #4
 800bed8:	4619      	mov	r1, r3
 800beda:	4610      	mov	r0, r2
 800bedc:	f7fe fd87 	bl	800a9ee <vListInsert>
}
 800bee0:	e010      	b.n	800bf04 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bee2:	4b0e      	ldr	r3, [pc, #56]	@ (800bf1c <prvAddCurrentTaskToDelayedList+0xd4>)
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	4b0a      	ldr	r3, [pc, #40]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3304      	adds	r3, #4
 800beec:	4619      	mov	r1, r3
 800beee:	4610      	mov	r0, r2
 800bef0:	f7fe fd7d 	bl	800a9ee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800bef4:	4b0a      	ldr	r3, [pc, #40]	@ (800bf20 <prvAddCurrentTaskToDelayedList+0xd8>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	429a      	cmp	r2, r3
 800befc:	d202      	bcs.n	800bf04 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800befe:	4a08      	ldr	r2, [pc, #32]	@ (800bf20 <prvAddCurrentTaskToDelayedList+0xd8>)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6013      	str	r3, [r2, #0]
}
 800bf04:	bf00      	nop
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	20000d88 	.word	0x20000d88
 800bf10:	200008b0 	.word	0x200008b0
 800bf14:	20000d70 	.word	0x20000d70
 800bf18:	20000d40 	.word	0x20000d40
 800bf1c:	20000d3c 	.word	0x20000d3c
 800bf20:	20000da4 	.word	0x20000da4

0800bf24 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b088      	sub	sp, #32
 800bf28:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800bf2e:	f000 fa5f 	bl	800c3f0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800bf32:	4b18      	ldr	r3, [pc, #96]	@ (800bf94 <xTimerCreateTimerTask+0x70>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d020      	beq.n	800bf7c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf42:	463a      	mov	r2, r7
 800bf44:	1d39      	adds	r1, r7, #4
 800bf46:	f107 0308 	add.w	r3, r7, #8
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe fd08 	bl	800a960 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	9202      	str	r2, [sp, #8]
 800bf58:	9301      	str	r3, [sp, #4]
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	460a      	mov	r2, r1
 800bf62:	490d      	ldr	r1, [pc, #52]	@ (800bf98 <xTimerCreateTimerTask+0x74>)
 800bf64:	480d      	ldr	r0, [pc, #52]	@ (800bf9c <xTimerCreateTimerTask+0x78>)
 800bf66:	f7ff f84f 	bl	800b008 <xTaskCreateStatic>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	4a0c      	ldr	r2, [pc, #48]	@ (800bfa0 <xTimerCreateTimerTask+0x7c>)
 800bf6e:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800bf70:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa0 <xTimerCreateTimerTask+0x7c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d103      	bne.n	800bf8a <xTimerCreateTimerTask+0x66>
 800bf82:	f000 fc09 	bl	800c798 <ulSetInterruptMask>
 800bf86:	bf00      	nop
 800bf88:	e7fd      	b.n	800bf86 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
    }
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	20000de0 	.word	0x20000de0
 800bf98:	0800c9bc 	.word	0x0800c9bc
 800bf9c:	0800c049 	.word	0x0800c049
 800bfa0:	20000de4 	.word	0x20000de4

0800bfa4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800bfb0:	e008      	b.n	800bfc4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	4413      	add	r3, r2
 800bfba:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	699a      	ldr	r2, [r3, #24]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	18d1      	adds	r1, r2, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 f8d7 	bl	800c184 <prvInsertTimerInActiveList>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1ea      	bne.n	800bfb2 <prvReloadTimer+0xe>
        }
    }
 800bfdc:	bf00      	nop
 800bfde:	bf00      	nop
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
	...

0800bfe8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bff2:	4b14      	ldr	r3, [pc, #80]	@ (800c044 <prvProcessExpiredTimer+0x5c>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3304      	adds	r3, #4
 800c000:	4618      	mov	r0, r3
 800c002:	f7fe fd2d 	bl	800aa60 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c00c:	f003 0304 	and.w	r3, r3, #4
 800c010:	2b00      	cmp	r3, #0
 800c012:	d005      	beq.n	800c020 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	6879      	ldr	r1, [r7, #4]
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff ffc3 	bl	800bfa4 <prvReloadTimer>
 800c01e:	e008      	b.n	800c032 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c026:	f023 0301 	bic.w	r3, r3, #1
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	4798      	blx	r3
    }
 800c03a:	bf00      	nop
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20000dd8 	.word	0x20000dd8

0800c048 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c050:	f107 0308 	add.w	r3, r7, #8
 800c054:	4618      	mov	r0, r3
 800c056:	f000 f851 	bl	800c0fc <prvGetNextExpireTime>
 800c05a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	4619      	mov	r1, r3
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f000 f805 	bl	800c070 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800c066:	f000 f8cf 	bl	800c208 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c06a:	bf00      	nop
 800c06c:	e7f0      	b.n	800c050 <prvTimerTask+0x8>
	...

0800c070 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800c07a:	f7ff f9f1 	bl	800b460 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c07e:	f107 0308 	add.w	r3, r7, #8
 800c082:	4618      	mov	r0, r3
 800c084:	f000 f85e 	bl	800c144 <prvSampleTimeNow>
 800c088:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d12a      	bne.n	800c0e6 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10a      	bne.n	800c0ac <prvProcessTimerOrBlockTask+0x3c>
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d806      	bhi.n	800c0ac <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800c09e:	f7ff f9ed 	bl	800b47c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0a2:	68f9      	ldr	r1, [r7, #12]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7ff ff9f 	bl	800bfe8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800c0aa:	e01e      	b.n	800c0ea <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d008      	beq.n	800c0c4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0b2:	4b10      	ldr	r3, [pc, #64]	@ (800c0f4 <prvProcessTimerOrBlockTask+0x84>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <prvProcessTimerOrBlockTask+0x50>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e000      	b.n	800c0c2 <prvProcessTimerOrBlockTask+0x52>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c0f8 <prvProcessTimerOrBlockTask+0x88>)
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7fe ff65 	bl	800afa0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c0d6:	f7ff f9d1 	bl	800b47c <xTaskResumeAll>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d104      	bne.n	800c0ea <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800c0e0:	f000 fa06 	bl	800c4f0 <vPortYield>
    }
 800c0e4:	e001      	b.n	800c0ea <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800c0e6:	f7ff f9c9 	bl	800b47c <xTaskResumeAll>
    }
 800c0ea:	bf00      	nop
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20000ddc 	.word	0x20000ddc
 800c0f8:	20000de0 	.word	0x20000de0

0800c0fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c104:	4b0e      	ldr	r3, [pc, #56]	@ (800c140 <prvGetNextExpireTime+0x44>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <prvGetNextExpireTime+0x16>
 800c10e:	2201      	movs	r2, #1
 800c110:	e000      	b.n	800c114 <prvGetNextExpireTime+0x18>
 800c112:	2200      	movs	r2, #0
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d105      	bne.n	800c12c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c120:	4b07      	ldr	r3, [pc, #28]	@ (800c140 <prvGetNextExpireTime+0x44>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	e001      	b.n	800c130 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800c12c:	2300      	movs	r3, #0
 800c12e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800c130:	68fb      	ldr	r3, [r7, #12]
    }
 800c132:	4618      	mov	r0, r3
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	20000dd8 	.word	0x20000dd8

0800c144 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800c14c:	f7ff fa84 	bl	800b658 <xTaskGetTickCount>
 800c150:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800c152:	4b0b      	ldr	r3, [pc, #44]	@ (800c180 <prvSampleTimeNow+0x3c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d205      	bcs.n	800c168 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800c15c:	f000 f922 	bl	800c3a4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	601a      	str	r2, [r3, #0]
 800c166:	e002      	b.n	800c16e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800c16e:	4a04      	ldr	r2, [pc, #16]	@ (800c180 <prvSampleTimeNow+0x3c>)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800c174:	68fb      	ldr	r3, [r7, #12]
    }
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	20000de8 	.word	0x20000de8

0800c184 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800c192:	2300      	movs	r3, #0
 800c194:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d812      	bhi.n	800c1d0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	1ad2      	subs	r2, r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d302      	bcc.n	800c1be <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	617b      	str	r3, [r7, #20]
 800c1bc:	e01b      	b.n	800c1f6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1be:	4b10      	ldr	r3, [pc, #64]	@ (800c200 <prvInsertTimerInActiveList+0x7c>)
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	f7fe fc10 	bl	800a9ee <vListInsert>
 800c1ce:	e012      	b.n	800c1f6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d206      	bcs.n	800c1e6 <prvInsertTimerInActiveList+0x62>
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d302      	bcc.n	800c1e6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	e007      	b.n	800c1f6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1e6:	4b07      	ldr	r3, [pc, #28]	@ (800c204 <prvInsertTimerInActiveList+0x80>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	f7fe fbfc 	bl	800a9ee <vListInsert>
            }
        }

        return xProcessTimerNow;
 800c1f6:	697b      	ldr	r3, [r7, #20]
    }
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3718      	adds	r7, #24
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	20000ddc 	.word	0x20000ddc
 800c204:	20000dd8 	.word	0x20000dd8

0800c208 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c20e:	e0b7      	b.n	800c380 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	da11      	bge.n	800c23a <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c216:	1d3b      	adds	r3, r7, #4
 800c218:	3304      	adds	r3, #4
 800c21a:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d103      	bne.n	800c22a <prvProcessReceivedCommands+0x22>
 800c222:	f000 fab9 	bl	800c798 <ulSetInterruptMask>
 800c226:	bf00      	nop
 800c228:	e7fd      	b.n	800c226 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	69fa      	ldr	r2, [r7, #28]
 800c230:	6850      	ldr	r0, [r2, #4]
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	6892      	ldr	r2, [r2, #8]
 800c236:	4611      	mov	r1, r2
 800c238:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f2c0 809f 	blt.w	800c380 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	695b      	ldr	r3, [r3, #20]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d004      	beq.n	800c258 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	3304      	adds	r3, #4
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe fc04 	bl	800aa60 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c258:	463b      	mov	r3, r7
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7ff ff72 	bl	800c144 <prvSampleTimeNow>
 800c260:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3b01      	subs	r3, #1
 800c266:	2b08      	cmp	r3, #8
 800c268:	f200 8087 	bhi.w	800c37a <prvProcessReceivedCommands+0x172>
 800c26c:	a201      	add	r2, pc, #4	@ (adr r2, 800c274 <prvProcessReceivedCommands+0x6c>)
 800c26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c272:	bf00      	nop
 800c274:	0800c299 	.word	0x0800c299
 800c278:	0800c299 	.word	0x0800c299
 800c27c:	0800c301 	.word	0x0800c301
 800c280:	0800c315 	.word	0x0800c315
 800c284:	0800c351 	.word	0x0800c351
 800c288:	0800c299 	.word	0x0800c299
 800c28c:	0800c299 	.word	0x0800c299
 800c290:	0800c301 	.word	0x0800c301
 800c294:	0800c315 	.word	0x0800c315
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c29e:	f043 0301 	orr.w	r3, r3, #1
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	18d1      	adds	r1, r2, r3
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	69b8      	ldr	r0, [r7, #24]
 800c2b8:	f7ff ff64 	bl	800c184 <prvInsertTimerInActiveList>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d05d      	beq.n	800c37e <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2c8:	f003 0304 	and.w	r3, r3, #4
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d009      	beq.n	800c2e4 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	699b      	ldr	r3, [r3, #24]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	697a      	ldr	r2, [r7, #20]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	69b8      	ldr	r0, [r7, #24]
 800c2de:	f7ff fe61 	bl	800bfa4 <prvReloadTimer>
 800c2e2:	e008      	b.n	800c2f6 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2ea:	f023 0301 	bic.w	r3, r3, #1
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	69b8      	ldr	r0, [r7, #24]
 800c2fc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800c2fe:	e03e      	b.n	800c37e <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c306:	f023 0301 	bic.w	r3, r3, #1
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800c312:	e035      	b.n	800c380 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c31a:	f043 0301 	orr.w	r3, r3, #1
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	699b      	ldr	r3, [r3, #24]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <prvProcessReceivedCommands+0x134>
 800c334:	f000 fa30 	bl	800c798 <ulSetInterruptMask>
 800c338:	bf00      	nop
 800c33a:	e7fd      	b.n	800c338 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	699a      	ldr	r2, [r3, #24]
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	18d1      	adds	r1, r2, r3
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	69b8      	ldr	r0, [r7, #24]
 800c34a:	f7ff ff1b 	bl	800c184 <prvInsertTimerInActiveList>
                        break;
 800c34e:	e017      	b.n	800c380 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d103      	bne.n	800c366 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800c35e:	69b8      	ldr	r0, [r7, #24]
 800c360:	f000 facc 	bl	800c8fc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c364:	e00c      	b.n	800c380 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c36c:	f023 0301 	bic.w	r3, r3, #1
 800c370:	b2da      	uxtb	r2, r3
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800c378:	e002      	b.n	800c380 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800c37a:	bf00      	nop
 800c37c:	e000      	b.n	800c380 <prvProcessReceivedCommands+0x178>
                        break;
 800c37e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c380:	4b07      	ldr	r3, [pc, #28]	@ (800c3a0 <prvProcessReceivedCommands+0x198>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	1d39      	adds	r1, r7, #4
 800c386:	2200      	movs	r2, #0
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fe fc78 	bl	800ac7e <xQueueReceive>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	f47f af3d 	bne.w	800c210 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800c396:	bf00      	nop
 800c398:	bf00      	nop
 800c39a:	3720      	adds	r7, #32
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	20000de0 	.word	0x20000de0

0800c3a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3aa:	e009      	b.n	800c3c0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800c3e8 <prvSwitchTimerLists+0x44>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800c3b6:	f04f 31ff 	mov.w	r1, #4294967295
 800c3ba:	6838      	ldr	r0, [r7, #0]
 800c3bc:	f7ff fe14 	bl	800bfe8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3c0:	4b09      	ldr	r3, [pc, #36]	@ (800c3e8 <prvSwitchTimerLists+0x44>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1f0      	bne.n	800c3ac <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800c3ca:	4b07      	ldr	r3, [pc, #28]	@ (800c3e8 <prvSwitchTimerLists+0x44>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800c3d0:	4b06      	ldr	r3, [pc, #24]	@ (800c3ec <prvSwitchTimerLists+0x48>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a04      	ldr	r2, [pc, #16]	@ (800c3e8 <prvSwitchTimerLists+0x44>)
 800c3d6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800c3d8:	4a04      	ldr	r2, [pc, #16]	@ (800c3ec <prvSwitchTimerLists+0x48>)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6013      	str	r3, [r2, #0]
    }
 800c3de:	bf00      	nop
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20000dd8 	.word	0x20000dd8
 800c3ec:	20000ddc 	.word	0x20000ddc

0800c3f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800c3f6:	f000 f88d 	bl	800c514 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800c3fa:	4b15      	ldr	r3, [pc, #84]	@ (800c450 <prvCheckForValidListAndQueue+0x60>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d120      	bne.n	800c444 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800c402:	4814      	ldr	r0, [pc, #80]	@ (800c454 <prvCheckForValidListAndQueue+0x64>)
 800c404:	f7fe fac6 	bl	800a994 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c408:	4813      	ldr	r0, [pc, #76]	@ (800c458 <prvCheckForValidListAndQueue+0x68>)
 800c40a:	f7fe fac3 	bl	800a994 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c40e:	4b13      	ldr	r3, [pc, #76]	@ (800c45c <prvCheckForValidListAndQueue+0x6c>)
 800c410:	4a10      	ldr	r2, [pc, #64]	@ (800c454 <prvCheckForValidListAndQueue+0x64>)
 800c412:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c414:	4b12      	ldr	r3, [pc, #72]	@ (800c460 <prvCheckForValidListAndQueue+0x70>)
 800c416:	4a10      	ldr	r2, [pc, #64]	@ (800c458 <prvCheckForValidListAndQueue+0x68>)
 800c418:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c41a:	2300      	movs	r3, #0
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	4b11      	ldr	r3, [pc, #68]	@ (800c464 <prvCheckForValidListAndQueue+0x74>)
 800c420:	4a11      	ldr	r2, [pc, #68]	@ (800c468 <prvCheckForValidListAndQueue+0x78>)
 800c422:	2110      	movs	r1, #16
 800c424:	200a      	movs	r0, #10
 800c426:	f7fe fbbe 	bl	800aba6 <xQueueGenericCreateStatic>
 800c42a:	4603      	mov	r3, r0
 800c42c:	4a08      	ldr	r2, [pc, #32]	@ (800c450 <prvCheckForValidListAndQueue+0x60>)
 800c42e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800c430:	4b07      	ldr	r3, [pc, #28]	@ (800c450 <prvCheckForValidListAndQueue+0x60>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d005      	beq.n	800c444 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c438:	4b05      	ldr	r3, [pc, #20]	@ (800c450 <prvCheckForValidListAndQueue+0x60>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	490b      	ldr	r1, [pc, #44]	@ (800c46c <prvCheckForValidListAndQueue+0x7c>)
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fe fd68 	bl	800af14 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c444:	f000 f878 	bl	800c538 <vPortExitCritical>
    }
 800c448:	bf00      	nop
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20000de0 	.word	0x20000de0
 800c454:	20000db0 	.word	0x20000db0
 800c458:	20000dc4 	.word	0x20000dc4
 800c45c:	20000dd8 	.word	0x20000dd8
 800c460:	20000ddc 	.word	0x20000ddc
 800c464:	20000e8c 	.word	0x20000e8c
 800c468:	20000dec 	.word	0x20000dec
 800c46c:	0800c9c4 	.word	0x0800c9c4

0800c470 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800c470:	b480      	push	{r7}
 800c472:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c474:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a4 <vPortSetupTimerInterrupt+0x34>)
 800c476:	2200      	movs	r2, #0
 800c478:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c47a:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a8 <vPortSetupTimerInterrupt+0x38>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c480:	4b0a      	ldr	r3, [pc, #40]	@ (800c4ac <vPortSetupTimerInterrupt+0x3c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a0a      	ldr	r2, [pc, #40]	@ (800c4b0 <vPortSetupTimerInterrupt+0x40>)
 800c486:	fba2 2303 	umull	r2, r3, r2, r3
 800c48a:	099b      	lsrs	r3, r3, #6
 800c48c:	4a09      	ldr	r2, [pc, #36]	@ (800c4b4 <vPortSetupTimerInterrupt+0x44>)
 800c48e:	3b01      	subs	r3, #1
 800c490:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c492:	4b04      	ldr	r3, [pc, #16]	@ (800c4a4 <vPortSetupTimerInterrupt+0x34>)
 800c494:	2207      	movs	r2, #7
 800c496:	601a      	str	r2, [r3, #0]
}
 800c498:	bf00      	nop
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	e000e010 	.word	0xe000e010
 800c4a8:	e000e018 	.word	0xe000e018
 800c4ac:	20000000 	.word	0x20000000
 800c4b0:	10624dd3 	.word	0x10624dd3
 800c4b4:	e000e014 	.word	0xe000e014

0800c4b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800c4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c4ec <prvTaskExitError+0x34>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ca:	d003      	beq.n	800c4d4 <prvTaskExitError+0x1c>
 800c4cc:	f000 f964 	bl	800c798 <ulSetInterruptMask>
 800c4d0:	bf00      	nop
 800c4d2:	e7fd      	b.n	800c4d0 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800c4d4:	f000 f960 	bl	800c798 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800c4d8:	bf00      	nop
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d0fc      	beq.n	800c4da <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20000010 	.word	0x20000010

0800c4f0 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4f4:	4b06      	ldr	r3, [pc, #24]	@ (800c510 <vPortYield+0x20>)
 800c4f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4fa:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800c4fc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800c500:	f3bf 8f6f 	isb	sy
}
 800c504:	bf00      	nop
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c514:	b580      	push	{r7, lr}
 800c516:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800c518:	f000 f93e 	bl	800c798 <ulSetInterruptMask>
    ulCriticalNesting++;
 800c51c:	4b05      	ldr	r3, [pc, #20]	@ (800c534 <vPortEnterCritical+0x20>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	3301      	adds	r3, #1
 800c522:	4a04      	ldr	r2, [pc, #16]	@ (800c534 <vPortEnterCritical+0x20>)
 800c524:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800c526:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800c52a:	f3bf 8f6f 	isb	sy
}
 800c52e:	bf00      	nop
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20000010 	.word	0x20000010

0800c538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800c53c:	4b0a      	ldr	r3, [pc, #40]	@ (800c568 <vPortExitCritical+0x30>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d103      	bne.n	800c54c <vPortExitCritical+0x14>
 800c544:	f000 f928 	bl	800c798 <ulSetInterruptMask>
 800c548:	bf00      	nop
 800c54a:	e7fd      	b.n	800c548 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800c54c:	4b06      	ldr	r3, [pc, #24]	@ (800c568 <vPortExitCritical+0x30>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3b01      	subs	r3, #1
 800c552:	4a05      	ldr	r2, [pc, #20]	@ (800c568 <vPortExitCritical+0x30>)
 800c554:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800c556:	4b04      	ldr	r3, [pc, #16]	@ (800c568 <vPortExitCritical+0x30>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d102      	bne.n	800c564 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800c55e:	2000      	movs	r0, #0
 800c560:	f000 f927 	bl	800c7b2 <vClearInterruptMask>
    }
}
 800c564:	bf00      	nop
 800c566:	bd80      	pop	{r7, pc}
 800c568:	20000010 	.word	0x20000010

0800c56c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c572:	f000 f911 	bl	800c798 <ulSetInterruptMask>
 800c576:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800c578:	f7ff f87e 	bl	800b678 <xTaskIncrementTick>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c582:	4b05      	ldr	r3, [pc, #20]	@ (800c598 <xPortSysTickHandler+0x2c>)
 800c584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c588:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f911 	bl	800c7b2 <vClearInterruptMask>
}
 800c590:	bf00      	nop
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	e000ed04 	.word	0xe000ed04

0800c59c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	3b02      	subs	r3, #2
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800c5b2:	7afb      	ldrb	r3, [r7, #11]
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d102      	bne.n	800c5be <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800c5b8:	f000 f8ba 	bl	800c730 <vRestoreContextOfFirstTask>
            break;
 800c5bc:	e003      	b.n	800c5c6 <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800c5be:	f000 f8eb 	bl	800c798 <ulSetInterruptMask>
 800c5c2:	bf00      	nop
 800c5c4:	e7fd      	b.n	800c5c2 <vPortSVCHandler_C+0x26>
    }
}
 800c5c6:	bf00      	nop
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
	...

0800c5d0 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
 800c5dc:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c5ea:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3b04      	subs	r3, #4
 800c5f0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3b04      	subs	r3, #4
 800c5fc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800c5fe:	4a38      	ldr	r2, [pc, #224]	@ (800c6e0 <pxPortInitialiseStack+0x110>)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	3b04      	subs	r3, #4
 800c608:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800c610:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3b04      	subs	r3, #4
 800c616:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800c61e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3b04      	subs	r3, #4
 800c624:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800c62c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3b04      	subs	r3, #4
 800c632:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800c63a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	3b04      	subs	r3, #4
 800c640:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	3b04      	subs	r3, #4
 800c64c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800c654:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	3b04      	subs	r3, #4
 800c65a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800c662:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	3b04      	subs	r3, #4
 800c668:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800c670:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	3b04      	subs	r3, #4
 800c676:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800c67e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	3b04      	subs	r3, #4
 800c684:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800c68c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	3b04      	subs	r3, #4
 800c692:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800c69a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3b04      	subs	r3, #4
 800c6a0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800c6a8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	3b04      	subs	r3, #4
 800c6ae:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800c6b6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	3b04      	subs	r3, #4
 800c6bc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800c6c4:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	3b04      	subs	r3, #4
 800c6ca:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	0800c4b9 	.word	0x0800c4b9

0800c6e4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800c6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c71c <xPortStartScheduler+0x38>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a0b      	ldr	r2, [pc, #44]	@ (800c71c <xPortStartScheduler+0x38>)
 800c6ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6f2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800c6f4:	4b09      	ldr	r3, [pc, #36]	@ (800c71c <xPortStartScheduler+0x38>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a08      	ldr	r2, [pc, #32]	@ (800c71c <xPortStartScheduler+0x38>)
 800c6fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6fe:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800c700:	f7ff feb6 	bl	800c470 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800c704:	4b06      	ldr	r3, [pc, #24]	@ (800c720 <xPortStartScheduler+0x3c>)
 800c706:	2200      	movs	r2, #0
 800c708:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800c70a:	f000 f831 	bl	800c770 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800c70e:	f7ff f8c3 	bl	800b898 <vTaskSwitchContext>
    prvTaskExitError();
 800c712:	f7ff fed1 	bl	800c4b8 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	e000ed20 	.word	0xe000ed20
 800c720:	20000010 	.word	0x20000010
	...

0800c730 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800c730:	4a0b      	ldr	r2, [pc, #44]	@ (800c760 <pxCurrentTCBConst2>)
 800c732:	6811      	ldr	r1, [r2, #0]
 800c734:	6808      	ldr	r0, [r1, #0]
 800c736:	c806      	ldmia	r0!, {r1, r2}
 800c738:	f381 880b 	msr	PSPLIM, r1
 800c73c:	2102      	movs	r1, #2
 800c73e:	f381 8814 	msr	CONTROL, r1
 800c742:	3020      	adds	r0, #32
 800c744:	f380 8809 	msr	PSP, r0
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f04f 0000 	mov.w	r0, #0
 800c750:	f380 8811 	msr	BASEPRI, r0
 800c754:	4710      	bx	r2
 800c756:	bf00      	nop
 800c758:	f3af 8000 	nop.w
 800c75c:	f3af 8000 	nop.w

0800c760 <pxCurrentTCBConst2>:
 800c760:	200008b0 	.word	0x200008b0
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
	...

0800c770 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800c770:	4807      	ldr	r0, [pc, #28]	@ (800c790 <xVTORConst>)
 800c772:	6800      	ldr	r0, [r0, #0]
 800c774:	6800      	ldr	r0, [r0, #0]
 800c776:	f380 8808 	msr	MSP, r0
 800c77a:	b662      	cpsie	i
 800c77c:	b661      	cpsie	f
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	df02      	svc	2
 800c788:	bf00      	nop
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w

0800c790 <xVTORConst>:
 800c790:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800c798:	f3ef 8011 	mrs	r0, BASEPRI
 800c79c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800c7a0:	f381 8811 	msr	BASEPRI, r1
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800c7ae:	bf00      	nop
 800c7b0:	4618      	mov	r0, r3

0800c7b2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800c7b2:	f380 8811 	msr	BASEPRI, r0
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800c7c0:	bf00      	nop
	...

0800c7d0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800c7d0:	f3ef 8009 	mrs	r0, PSP
 800c7d4:	f3ef 820b 	mrs	r2, PSPLIM
 800c7d8:	4673      	mov	r3, lr
 800c7da:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800c7de:	4a10      	ldr	r2, [pc, #64]	@ (800c820 <pxCurrentTCBConst>)
 800c7e0:	6811      	ldr	r1, [r2, #0]
 800c7e2:	6008      	str	r0, [r1, #0]
 800c7e4:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c7e8:	f380 8811 	msr	BASEPRI, r0
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f7ff f850 	bl	800b898 <vTaskSwitchContext>
 800c7f8:	f04f 0000 	mov.w	r0, #0
 800c7fc:	f380 8811 	msr	BASEPRI, r0
 800c800:	4a07      	ldr	r2, [pc, #28]	@ (800c820 <pxCurrentTCBConst>)
 800c802:	6811      	ldr	r1, [r2, #0]
 800c804:	6808      	ldr	r0, [r1, #0]
 800c806:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800c80a:	f382 880b 	msr	PSPLIM, r2
 800c80e:	f380 8809 	msr	PSP, r0
 800c812:	4718      	bx	r3
 800c814:	f3af 8000 	nop.w
 800c818:	f3af 8000 	nop.w
 800c81c:	f3af 8000 	nop.w

0800c820 <pxCurrentTCBConst>:
 800c820:	200008b0 	.word	0x200008b0
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop
	...

0800c830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800c830:	f01e 0f04 	tst.w	lr, #4
 800c834:	bf0c      	ite	eq
 800c836:	f3ef 8008 	mrseq	r0, MSP
 800c83a:	f3ef 8009 	mrsne	r0, PSP
 800c83e:	4904      	ldr	r1, [pc, #16]	@ (800c850 <svchandler_address_const>)
 800c840:	4708      	bx	r1
 800c842:	bf00      	nop
 800c844:	f3af 8000 	nop.w
 800c848:	f3af 8000 	nop.w
 800c84c:	f3af 8000 	nop.w

0800c850 <svchandler_address_const>:
 800c850:	0800c59d 	.word	0x0800c59d
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop

0800c858 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800c860:	2300      	movs	r3, #0
 800c862:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00e      	beq.n	800c88c <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f023 0307 	bic.w	r3, r3, #7
 800c874:	3308      	adds	r3, #8
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d205      	bcs.n	800c888 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f023 0307 	bic.w	r3, r3, #7
 800c882:	3308      	adds	r3, #8
 800c884:	607b      	str	r3, [r7, #4]
 800c886:	e001      	b.n	800c88c <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 800c88c:	f7fe fde8 	bl	800b460 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800c890:	4b17      	ldr	r3, [pc, #92]	@ (800c8f0 <pvPortMalloc+0x98>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d105      	bne.n	800c8a4 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800c898:	4b16      	ldr	r3, [pc, #88]	@ (800c8f4 <pvPortMalloc+0x9c>)
 800c89a:	f023 0307 	bic.w	r3, r3, #7
 800c89e:	461a      	mov	r2, r3
 800c8a0:	4b13      	ldr	r3, [pc, #76]	@ (800c8f0 <pvPortMalloc+0x98>)
 800c8a2:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d01b      	beq.n	800c8e2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800c8aa:	4b13      	ldr	r3, [pc, #76]	@ (800c8f8 <pvPortMalloc+0xa0>)
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800c8b2:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d813      	bhi.n	800c8e2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800c8ba:	4b0f      	ldr	r3, [pc, #60]	@ (800c8f8 <pvPortMalloc+0xa0>)
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	441a      	add	r2, r3
 800c8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f8 <pvPortMalloc+0xa0>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d90b      	bls.n	800c8e2 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800c8ca:	4b09      	ldr	r3, [pc, #36]	@ (800c8f0 <pvPortMalloc+0x98>)
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f8 <pvPortMalloc+0xa0>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800c8d6:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <pvPortMalloc+0xa0>)
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4413      	add	r3, r2
 800c8de:	4a06      	ldr	r2, [pc, #24]	@ (800c8f8 <pvPortMalloc+0xa0>)
 800c8e0:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800c8e2:	f7fe fdcb 	bl	800b47c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	20002ee0 	.word	0x20002ee0
 800c8f4:	20000ee3 	.word	0x20000ee3
 800c8f8:	20002edc 	.word	0x20002edc

0800c8fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <vPortFree+0x16>
 800c90a:	f7ff ff45 	bl	800c798 <ulSetInterruptMask>
 800c90e:	bf00      	nop
 800c910:	e7fd      	b.n	800c90e <vPortFree+0x12>
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <memset>:
 800c91a:	4402      	add	r2, r0
 800c91c:	4603      	mov	r3, r0
 800c91e:	4293      	cmp	r3, r2
 800c920:	d100      	bne.n	800c924 <memset+0xa>
 800c922:	4770      	bx	lr
 800c924:	f803 1b01 	strb.w	r1, [r3], #1
 800c928:	e7f9      	b.n	800c91e <memset+0x4>
	...

0800c92c <__libc_init_array>:
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	4d0d      	ldr	r5, [pc, #52]	@ (800c964 <__libc_init_array+0x38>)
 800c930:	2600      	movs	r6, #0
 800c932:	4c0d      	ldr	r4, [pc, #52]	@ (800c968 <__libc_init_array+0x3c>)
 800c934:	1b64      	subs	r4, r4, r5
 800c936:	10a4      	asrs	r4, r4, #2
 800c938:	42a6      	cmp	r6, r4
 800c93a:	d109      	bne.n	800c950 <__libc_init_array+0x24>
 800c93c:	4d0b      	ldr	r5, [pc, #44]	@ (800c96c <__libc_init_array+0x40>)
 800c93e:	2600      	movs	r6, #0
 800c940:	4c0b      	ldr	r4, [pc, #44]	@ (800c970 <__libc_init_array+0x44>)
 800c942:	f000 f825 	bl	800c990 <_init>
 800c946:	1b64      	subs	r4, r4, r5
 800c948:	10a4      	asrs	r4, r4, #2
 800c94a:	42a6      	cmp	r6, r4
 800c94c:	d105      	bne.n	800c95a <__libc_init_array+0x2e>
 800c94e:	bd70      	pop	{r4, r5, r6, pc}
 800c950:	f855 3b04 	ldr.w	r3, [r5], #4
 800c954:	3601      	adds	r6, #1
 800c956:	4798      	blx	r3
 800c958:	e7ee      	b.n	800c938 <__libc_init_array+0xc>
 800c95a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c95e:	3601      	adds	r6, #1
 800c960:	4798      	blx	r3
 800c962:	e7f2      	b.n	800c94a <__libc_init_array+0x1e>
 800c964:	0800ca38 	.word	0x0800ca38
 800c968:	0800ca38 	.word	0x0800ca38
 800c96c:	0800ca38 	.word	0x0800ca38
 800c970:	0800ca3c 	.word	0x0800ca3c

0800c974 <memcpy>:
 800c974:	440a      	add	r2, r1
 800c976:	1e43      	subs	r3, r0, #1
 800c978:	4291      	cmp	r1, r2
 800c97a:	d100      	bne.n	800c97e <memcpy+0xa>
 800c97c:	4770      	bx	lr
 800c97e:	b510      	push	{r4, lr}
 800c980:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c984:	4291      	cmp	r1, r2
 800c986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c98a:	d1f9      	bne.n	800c980 <memcpy+0xc>
 800c98c:	bd10      	pop	{r4, pc}
	...

0800c990 <_init>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	bf00      	nop
 800c994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c996:	bc08      	pop	{r3}
 800c998:	469e      	mov	lr, r3
 800c99a:	4770      	bx	lr

0800c99c <_fini>:
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	bf00      	nop
 800c9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a2:	bc08      	pop	{r3}
 800c9a4:	469e      	mov	lr, r3
 800c9a6:	4770      	bx	lr
